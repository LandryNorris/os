{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDCL",
          "fullName": "Qodana for C/C++",
          "version": "2024.1.2103.20",
          "rules": [
            {
              "id": "clang-analyzer-cplusplus.ArrayDelete",
              "name": "clang-analyzer-cplusplus.ArrayDelete",
              "shortDescription": {
                "text": "ArrayDelete"
              },
              "fullDescription": {
                "text": "ArrayDelete"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ReturnPtrRange",
              "name": "clang-analyzer-alpha.security.ReturnPtrRange",
              "shortDescription": {
                "text": "ReturnPtrRange"
              },
              "fullDescription": {
                "text": "ReturnPtrRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-7",
              "name": "clion-misra-c2012-16-7",
              "shortDescription": {
                "text": "misra-c2012-16-7"
              },
              "fullDescription": {
                "text": "misra-c2012-16-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-2",
              "name": "clion-misra-c2012-12-2",
              "shortDescription": {
                "text": "misra-c2012-12-2"
              },
              "fullDescription": {
                "text": "misra-c2012-12-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.C11Lock",
              "name": "clang-analyzer-alpha.core.C11Lock",
              "shortDescription": {
                "text": "C11Lock"
              },
              "fullDescription": {
                "text": "C11Lock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-namespace-comments",
              "name": "google-readability-namespace-comments",
              "shortDescription": {
                "text": "readability-namespace-comments"
              },
              "fullDescription": {
                "text": "readability-namespace-comments"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-move-operations",
              "name": "cppcoreguidelines-noexcept-move-operations",
              "shortDescription": {
                "text": "noexcept-move-operations"
              },
              "fullDescription": {
                "text": "noexcept-move-operations"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-3-5",
              "name": "clion-misra-cpp2008-15-3-5",
              "shortDescription": {
                "text": "misra-cpp2008-15-3-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-3-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-pointer-arithmetic",
              "name": "cppcoreguidelines-pro-bounds-pointer-arithmetic",
              "shortDescription": {
                "text": "pro-bounds-pointer-arithmetic"
              },
              "fullDescription": {
                "text": "pro-bounds-pointer-arithmetic"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.IteratorRange",
              "name": "clang-analyzer-alpha.cplusplus.IteratorRange",
              "shortDescription": {
                "text": "IteratorRange"
              },
              "fullDescription": {
                "text": "IteratorRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-restrict-system-libc-headers",
              "name": "llvmlibc-restrict-system-libc-headers",
              "shortDescription": {
                "text": "restrict-system-libc-headers"
              },
              "fullDescription": {
                "text": "restrict-system-libc-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-no-automatic-move",
              "name": "performance-no-automatic-move",
              "shortDescription": {
                "text": "no-automatic-move"
              },
              "fullDescription": {
                "text": "no-automatic-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-crtp-constructor-accessibility",
              "name": "bugprone-crtp-constructor-accessibility",
              "shortDescription": {
                "text": "crtp-constructor-accessibility"
              },
              "fullDescription": {
                "text": "crtp-constructor-accessibility"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-equals-default",
              "name": "modernize-use-equals-default",
              "shortDescription": {
                "text": "use-equals-default"
              },
              "fullDescription": {
                "text": "use-equals-default"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-declaration",
              "name": "readability-redundant-declaration",
              "shortDescription": {
                "text": "redundant-declaration"
              },
              "fullDescription": {
                "text": "redundant-declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-14",
              "name": "clion-misra-cpp2008-5-0-14",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-14"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-14"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-header-anon-namespaces",
              "name": "fuchsia-header-anon-namespaces",
              "shortDescription": {
                "text": "header-anon-namespaces"
              },
              "fullDescription": {
                "text": "header-anon-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.gets",
              "name": "clang-analyzer-security.insecureAPI.gets",
              "shortDescription": {
                "text": "gets"
              },
              "fullDescription": {
                "text": "gets"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-virtual-call-in-ctor-or-dtor",
              "name": "clion-virtual-call-in-ctor-or-dtor",
              "shortDescription": {
                "text": "virtual-call-in-ctor-or-dtor"
              },
              "fullDescription": {
                "text": "virtual-call-in-ctor-or-dtor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-noexcept-move",
              "name": "hicpp-noexcept-move",
              "shortDescription": {
                "text": "noexcept-move"
              },
              "fullDescription": {
                "text": "noexcept-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc54-cpp",
              "name": "cert-msc54-cpp",
              "shortDescription": {
                "text": "msc54-cpp"
              },
              "fullDescription": {
                "text": "msc54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.SelfInit",
              "name": "clang-analyzer-osx.cocoa.SelfInit",
              "shortDescription": {
                "text": "SelfInit"
              },
              "fullDescription": {
                "text": "SelfInit"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-header-guard",
              "name": "llvm-header-guard",
              "shortDescription": {
                "text": "header-guard"
              },
              "fullDescription": {
                "text": "header-guard"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-trivially-destructible",
              "name": "performance-trivially-destructible",
              "shortDescription": {
                "text": "trivially-destructible"
              },
              "fullDescription": {
                "text": "trivially-destructible"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-inconsistent-declaration-parameter-name",
              "name": "readability-inconsistent-declaration-parameter-name",
              "shortDescription": {
                "text": "inconsistent-declaration-parameter-name"
              },
              "fullDescription": {
                "text": "inconsistent-declaration-parameter-name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.strcpy",
              "name": "clang-analyzer-security.insecureAPI.strcpy",
              "shortDescription": {
                "text": "strcpy"
              },
              "fullDescription": {
                "text": "strcpy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl59-cpp",
              "name": "cert-dcl59-cpp",
              "shortDescription": {
                "text": "dcl59-cpp"
              },
              "fullDescription": {
                "text": "dcl59-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-string-concatenation",
              "name": "performance-inefficient-string-concatenation",
              "shortDescription": {
                "text": "inefficient-string-concatenation"
              },
              "fullDescription": {
                "text": "inefficient-string-concatenation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-pos47-c",
              "name": "cert-pos47-c",
              "shortDescription": {
                "text": "pos47-c"
              },
              "fullDescription": {
                "text": "pos47-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-2",
              "name": "clion-misra-c2012-10-2",
              "shortDescription": {
                "text": "misra-c2012-10-2"
              },
              "fullDescription": {
                "text": "misra-c2012-10-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.localizability.PluralMisuseChecker",
              "name": "clang-analyzer-alpha.osx.cocoa.localizability.PluralMisuseChecker",
              "shortDescription": {
                "text": "PluralMisuseChecker"
              },
              "fullDescription": {
                "text": "PluralMisuseChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa.localizability",
                    "index": 19,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-uppercase-literal-suffix",
              "name": "hicpp-uppercase-literal-suffix",
              "shortDescription": {
                "text": "uppercase-literal-suffix"
              },
              "fullDescription": {
                "text": "uppercase-literal-suffix"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-3-4",
              "name": "clion-misra-cpp2008-7-3-4",
              "shortDescription": {
                "text": "misra-cpp2008-7-3-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-3-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-make-shared",
              "name": "modernize-make-shared",
              "shortDescription": {
                "text": "make-shared"
              },
              "fullDescription": {
                "text": "make-shared"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "zircon-temporary-objects",
              "name": "zircon-temporary-objects",
              "shortDescription": {
                "text": "temporary-objects"
              },
              "fullDescription": {
                "text": "temporary-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "zircon",
                    "index": 20,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "boost-use-to-string",
              "name": "boost-use-to-string",
              "shortDescription": {
                "text": "use-to-string"
              },
              "fullDescription": {
                "text": "use-to-string"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "boost",
                    "index": 21,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-exp42-c",
              "name": "cert-exp42-c",
              "shortDescription": {
                "text": "exp42-c"
              },
              "fullDescription": {
                "text": "exp42-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-string-find-startswith",
              "name": "abseil-string-find-startswith",
              "shortDescription": {
                "text": "string-find-startswith"
              },
              "fullDescription": {
                "text": "string-find-startswith"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-5",
              "name": "clion-misra-c2012-11-5",
              "shortDescription": {
                "text": "misra-c2012-11-5"
              },
              "fullDescription": {
                "text": "misra-c2012-11-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-7",
              "name": "clion-misra-c2012-11-7",
              "shortDescription": {
                "text": "misra-c2012-11-7"
              },
              "fullDescription": {
                "text": "misra-c2012-11-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-reference-coroutine-parameters",
              "name": "cppcoreguidelines-avoid-reference-coroutine-parameters",
              "shortDescription": {
                "text": "avoid-reference-coroutine-parameters"
              },
              "fullDescription": {
                "text": "avoid-reference-coroutine-parameters"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-avoid-nsobject-new",
              "name": "google-objc-avoid-nsobject-new",
              "shortDescription": {
                "text": "objc-avoid-nsobject-new"
              },
              "fullDescription": {
                "text": "objc-avoid-nsobject-new"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.SimpleStream",
              "name": "clang-analyzer-alpha.unix.SimpleStream",
              "shortDescription": {
                "text": "SimpleStream"
              },
              "fullDescription": {
                "text": "SimpleStream"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-global-variable-declaration",
              "name": "google-objc-global-variable-declaration",
              "shortDescription": {
                "text": "objc-global-variable-declaration"
              },
              "fullDescription": {
                "text": "objc-global-variable-declaration"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.InvalidatedIterator",
              "name": "clang-analyzer-alpha.cplusplus.InvalidatedIterator",
              "shortDescription": {
                "text": "InvalidatedIterator"
              },
              "fullDescription": {
                "text": "InvalidatedIterator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-2",
              "name": "clion-misra-cpp2008-2-13-2",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.InstanceVariableInvalidation",
              "name": "clang-analyzer-alpha.osx.cocoa.InstanceVariableInvalidation",
              "shortDescription": {
                "text": "InstanceVariableInvalidation"
              },
              "fullDescription": {
                "text": "InstanceVariableInvalidation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-statically-constructed-objects",
              "name": "fuchsia-statically-constructed-objects",
              "shortDescription": {
                "text": "statically-constructed-objects"
              },
              "fullDescription": {
                "text": "statically-constructed-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-realloc-usage",
              "name": "bugprone-suspicious-realloc-usage",
              "shortDescription": {
                "text": "suspicious-realloc-usage"
              },
              "fullDescription": {
                "text": "suspicious-realloc-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-move-const-arg",
              "name": "hicpp-move-const-arg",
              "shortDescription": {
                "text": "move-const-arg"
              },
              "fullDescription": {
                "text": "move-const-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.ObjCProperty",
              "name": "clang-analyzer-osx.ObjCProperty",
              "shortDescription": {
                "text": "ObjCProperty"
              },
              "fullDescription": {
                "text": "ObjCProperty"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-0-1",
              "name": "clion-misra-cpp2008-8-0-1",
              "shortDescription": {
                "text": "misra-cpp2008-8-0-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-0-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl16-c",
              "name": "cert-dcl16-c",
              "shortDescription": {
                "text": "dcl16-c"
              },
              "fullDescription": {
                "text": "dcl16-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.OSObjectRetainCount",
              "name": "clang-analyzer-osx.OSObjectRetainCount",
              "shortDescription": {
                "text": "OSObjectRetainCount"
              },
              "fullDescription": {
                "text": "OSObjectRetainCount"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.mpi.MPI-Checker",
              "name": "clang-analyzer-optin.mpi.MPI-Checker",
              "shortDescription": {
                "text": "MPI-Checker"
              },
              "fullDescription": {
                "text": "MPI-Checker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.mpi",
                    "index": 26,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-vector-operation",
              "name": "performance-inefficient-vector-operation",
              "shortDescription": {
                "text": "inefficient-vector-operation"
              },
              "fullDescription": {
                "text": "inefficient-vector-operation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-3-1",
              "name": "clion-misra-cpp2008-7-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-7-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-else-after-return",
              "name": "llvm-else-after-return",
              "shortDescription": {
                "text": "else-after-return"
              },
              "fullDescription": {
                "text": "else-after-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.StdCLibraryFunctions",
              "name": "clang-analyzer-unix.StdCLibraryFunctions",
              "shortDescription": {
                "text": "StdCLibraryFunctions"
              },
              "fullDescription": {
                "text": "StdCLibraryFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-inline-function-decl",
              "name": "llvmlibc-inline-function-decl",
              "shortDescription": {
                "text": "inline-function-decl"
              },
              "fullDescription": {
                "text": "inline-function-decl"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-uniqueptr-reset-release",
              "name": "misc-uniqueptr-reset-release",
              "shortDescription": {
                "text": "uniqueptr-reset-release"
              },
              "fullDescription": {
                "text": "uniqueptr-reset-release"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-4",
              "name": "clion-misra-cpp2008-6-4-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-8-1",
              "name": "clion-misra-cpp2008-5-8-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-8-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-8-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-socket",
              "name": "android-cloexec-socket",
              "shortDescription": {
                "text": "cloexec-socket"
              },
              "fullDescription": {
                "text": "cloexec-socket"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-deprecated-headers",
              "name": "modernize-deprecated-headers",
              "shortDescription": {
                "text": "deprecated-headers"
              },
              "fullDescription": {
                "text": "deprecated-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-bool-literals",
              "name": "modernize-use-bool-literals",
              "shortDescription": {
                "text": "use-bool-literals"
              },
              "fullDescription": {
                "text": "use-bool-literals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-misplaced-array-index",
              "name": "readability-misplaced-array-index",
              "shortDescription": {
                "text": "misplaced-array-index"
              },
              "fullDescription": {
                "text": "misplaced-array-index"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-9",
              "name": "clion-misra-c2012-21-9",
              "shortDescription": {
                "text": "misra-c2012-21-9"
              },
              "fullDescription": {
                "text": "misra-c2012-21-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-4-1",
              "name": "clion-misra-cpp2008-8-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-8-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-optional-value-conversion",
              "name": "bugprone-optional-value-conversion",
              "shortDescription": {
                "text": "optional-value-conversion"
              },
              "fullDescription": {
                "text": "optional-value-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-con36-c",
              "name": "cert-con36-c",
              "shortDescription": {
                "text": "con36-c"
              },
              "fullDescription": {
                "text": "con36-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFError",
              "name": "clang-analyzer-osx.coreFoundation.CFError",
              "shortDescription": {
                "text": "CFError"
              },
              "fullDescription": {
                "text": "CFError"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.Move",
              "name": "clang-analyzer-cplusplus.Move",
              "shortDescription": {
                "text": "Move"
              },
              "fullDescription": {
                "text": "Move"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.BadSizeArg",
              "name": "clang-analyzer-unix.cstring.BadSizeArg",
              "shortDescription": {
                "text": "BadSizeArg"
              },
              "fullDescription": {
                "text": "BadSizeArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-pipe",
              "name": "android-cloexec-pipe",
              "shortDescription": {
                "text": "cloexec-pipe"
              },
              "fullDescription": {
                "text": "cloexec-pipe"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-bool-pointer-implicit-conversion",
              "name": "bugprone-bool-pointer-implicit-conversion",
              "shortDescription": {
                "text": "bool-pointer-implicit-conversion"
              },
              "fullDescription": {
                "text": "bool-pointer-implicit-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-8",
              "name": "clion-misra-c2012-18-8",
              "shortDescription": {
                "text": "misra-c2012-18-8"
              },
              "fullDescription": {
                "text": "misra-c2012-18-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.llvm.CastValue",
              "name": "clang-analyzer-apiModeling.llvm.CastValue",
              "shortDescription": {
                "text": "CastValue"
              },
              "fullDescription": {
                "text": "CastValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "index": 32,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-id-dependent-backward-branch",
              "name": "altera-id-dependent-backward-branch",
              "shortDescription": {
                "text": "id-dependent-backward-branch"
              },
              "fullDescription": {
                "text": "id-dependent-backward-branch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-deprecated-ios-base-aliases",
              "name": "modernize-deprecated-ios-base-aliases",
              "shortDescription": {
                "text": "deprecated-ios-base-aliases"
              },
              "fullDescription": {
                "text": "deprecated-ios-base-aliases"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-5",
              "name": "clion-misra-c2012-18-5",
              "shortDescription": {
                "text": "misra-c2012-18-5"
              },
              "fullDescription": {
                "text": "misra-c2012-18-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-throw-keyword-missing",
              "name": "bugprone-throw-keyword-missing",
              "shortDescription": {
                "text": "throw-keyword-missing"
              },
              "fullDescription": {
                "text": "throw-keyword-missing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-using",
              "name": "modernize-use-using",
              "shortDescription": {
                "text": "use-using"
              },
              "fullDescription": {
                "text": "use-using"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-epoll-create1",
              "name": "android-cloexec-epoll-create1",
              "shortDescription": {
                "text": "cloexec-epoll-create1"
              },
              "fullDescription": {
                "text": "cloexec-epoll-create1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-avoid-bind",
              "name": "modernize-avoid-bind",
              "shortDescription": {
                "text": "avoid-bind"
              },
              "fullDescription": {
                "text": "avoid-bind"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-runtime-operator",
              "name": "google-runtime-operator",
              "shortDescription": {
                "text": "runtime-operator"
              },
              "fullDescription": {
                "text": "runtime-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-header-include-cycle",
              "name": "misc-header-include-cycle",
              "shortDescription": {
                "text": "header-include-cycle"
              },
              "fullDescription": {
                "text": "header-include-cycle"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-equals-default",
              "name": "hicpp-use-equals-default",
              "shortDescription": {
                "text": "use-equals-default"
              },
              "fullDescription": {
                "text": "use-equals-default"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.FixedAddr",
              "name": "clang-analyzer-alpha.core.FixedAddr",
              "shortDescription": {
                "text": "FixedAddr"
              },
              "fullDescription": {
                "text": "FixedAddr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-smartptr-get",
              "name": "readability-redundant-smartptr-get",
              "shortDescription": {
                "text": "redundant-smartptr-get"
              },
              "fullDescription": {
                "text": "redundant-smartptr-get"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err52-cpp",
              "name": "cert-err52-cpp",
              "shortDescription": {
                "text": "err52-cpp"
              },
              "fullDescription": {
                "text": "err52-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-12-8-2",
              "name": "clion-misra-cpp2008-12-8-2",
              "shortDescription": {
                "text": "misra-cpp2008-12-8-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-12-8-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-move-forwarding-reference",
              "name": "bugprone-move-forwarding-reference",
              "shortDescription": {
                "text": "move-forwarding-reference"
              },
              "fullDescription": {
                "text": "move-forwarding-reference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-braces-around-statements",
              "name": "google-readability-braces-around-statements",
              "shortDescription": {
                "text": "readability-braces-around-statements"
              },
              "fullDescription": {
                "text": "readability-braces-around-statements"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-string-cstr",
              "name": "readability-redundant-string-cstr",
              "shortDescription": {
                "text": "redundant-string-cstr"
              },
              "fullDescription": {
                "text": "redundant-string-cstr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-constructor",
              "name": "bugprone-string-constructor",
              "shortDescription": {
                "text": "string-constructor"
              },
              "fullDescription": {
                "text": "string-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-7",
              "name": "clion-misra-c2012-17-7",
              "shortDescription": {
                "text": "misra-c2012-17-7"
              },
              "fullDescription": {
                "text": "misra-c2012-17-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-struct-pack-align",
              "name": "altera-struct-pack-align",
              "shortDescription": {
                "text": "struct-pack-align"
              },
              "fullDescription": {
                "text": "struct-pack-align"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-5",
              "name": "clion-misra-cpp2008-5-0-5",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-explicit-constructor",
              "name": "google-explicit-constructor",
              "shortDescription": {
                "text": "explicit-constructor"
              },
              "fullDescription": {
                "text": "explicit-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-equals-delete",
              "name": "hicpp-use-equals-delete",
              "shortDescription": {
                "text": "use-equals-delete"
              },
              "fullDescription": {
                "text": "use-equals-delete"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-reserved-identifier",
              "name": "bugprone-reserved-identifier",
              "shortDescription": {
                "text": "reserved-identifier"
              },
              "fullDescription": {
                "text": "reserved-identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-signal-handler",
              "name": "bugprone-signal-handler",
              "shortDescription": {
                "text": "signal-handler"
              },
              "fullDescription": {
                "text": "signal-handler"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-pos44-c",
              "name": "cert-pos44-c",
              "shortDescription": {
                "text": "pos44-c"
              },
              "fullDescription": {
                "text": "pos44-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-sig30-c",
              "name": "cert-sig30-c",
              "shortDescription": {
                "text": "sig30-c"
              },
              "fullDescription": {
                "text": "sig30-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-misleading-capture-default-by-value",
              "name": "cppcoreguidelines-misleading-capture-default-by-value",
              "shortDescription": {
                "text": "misleading-capture-default-by-value"
              },
              "fullDescription": {
                "text": "misleading-capture-default-by-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-string-find-str-contains",
              "name": "abseil-string-find-str-contains",
              "shortDescription": {
                "text": "string-find-str-contains"
              },
              "fullDescription": {
                "text": "string-find-str-contains"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-avoid-goto",
              "name": "hicpp-avoid-goto",
              "shortDescription": {
                "text": "avoid-goto"
              },
              "fullDescription": {
                "text": "avoid-goto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-narrowing-conversions",
              "name": "cppcoreguidelines-narrowing-conversions",
              "shortDescription": {
                "text": "narrowing-conversions"
              },
              "fullDescription": {
                "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-2-1",
              "name": "clion-misra-cpp2008-6-2-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-2-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-2-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-1-3",
              "name": "clion-misra-cpp2008-3-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-3-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-override",
              "name": "hicpp-use-override",
              "shortDescription": {
                "text": "use-override"
              },
              "fullDescription": {
                "text": "use-override"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-swap",
              "name": "cppcoreguidelines-noexcept-swap",
              "shortDescription": {
                "text": "noexcept-swap"
              },
              "fullDescription": {
                "text": "noexcept-swap"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.ContainerModeling",
              "name": "clang-analyzer-alpha.cplusplus.ContainerModeling",
              "shortDescription": {
                "text": "ContainerModeling"
              },
              "fullDescription": {
                "text": "ContainerModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-fuchsia.HandleChecker",
              "name": "clang-analyzer-fuchsia.HandleChecker",
              "shortDescription": {
                "text": "HandleChecker"
              },
              "fullDescription": {
                "text": "HandleChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-3",
              "name": "clion-misra-c2012-7-3",
              "shortDescription": {
                "text": "misra-c2012-7-3"
              },
              "fullDescription": {
                "text": "misra-c2012-7-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-casting",
              "name": "readability-redundant-casting",
              "shortDescription": {
                "text": "redundant-casting"
              },
              "fullDescription": {
                "text": "redundant-casting"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-2",
              "name": "clion-misra-cpp2008-18-0-2",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-assert-side-effect",
              "name": "bugprone-assert-side-effect",
              "shortDescription": {
                "text": "assert-side-effect"
              },
              "fullDescription": {
                "text": "assert-side-effect"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-12",
              "name": "clion-misra-c2012-8-12",
              "shortDescription": {
                "text": "misra-c2012-8-12"
              },
              "fullDescription": {
                "text": "misra-c2012-8-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-implementation-in-namespace",
              "name": "llvmlibc-implementation-in-namespace",
              "shortDescription": {
                "text": "implementation-in-namespace"
              },
              "fullDescription": {
                "text": "implementation-in-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-alias-decls",
              "name": "misc-unused-alias-decls",
              "shortDescription": {
                "text": "unused-alias-decls"
              },
              "fullDescription": {
                "text": "unused-alias-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi-type-mismatch",
              "name": "mpi-type-mismatch",
              "shortDescription": {
                "text": "type-mismatch"
              },
              "fullDescription": {
                "text": "type-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "index": 34,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-upgrade-duration-conversions",
              "name": "abseil-upgrade-duration-conversions",
              "shortDescription": {
                "text": "upgrade-duration-conversions"
              },
              "fullDescription": {
                "text": "upgrade-duration-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-signed-char-misuse",
              "name": "bugprone-signed-char-misuse",
              "shortDescription": {
                "text": "signed-char-misuse"
              },
              "fullDescription": {
                "text": "signed-char-misuse"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-preprocessor",
              "name": "readability-redundant-preprocessor",
              "shortDescription": {
                "text": "redundant-preprocessor"
              },
              "fullDescription": {
                "text": "redundant-preprocessor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unsafe-functions",
              "name": "bugprone-unsafe-functions",
              "shortDescription": {
                "text": "unsafe-functions"
              },
              "fullDescription": {
                "text": "unsafe-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-use-default-member-init",
              "name": "cppcoreguidelines-use-default-member-init",
              "shortDescription": {
                "text": "use-default-member-init"
              },
              "fullDescription": {
                "text": "use-default-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-enum-initial-value",
              "name": "readability-enum-initial-value",
              "shortDescription": {
                "text": "enum-initial-value"
              },
              "fullDescription": {
                "text": "enum-initial-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-7",
              "name": "clion-misra-c2012-21-7",
              "shortDescription": {
                "text": "misra-c2012-21-7"
              },
              "fullDescription": {
                "text": "misra-c2012-21-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-comparison-in-temp-failure-retry",
              "name": "android-comparison-in-temp-failure-retry",
              "shortDescription": {
                "text": "comparison-in-temp-failure-retry"
              },
              "fullDescription": {
                "text": "comparison-in-temp-failure-retry"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-std-print",
              "name": "modernize-use-std-print",
              "shortDescription": {
                "text": "use-std-print"
              },
              "fullDescription": {
                "text": "use-std-print"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.NewArraySize",
              "name": "clang-analyzer-core.uninitialized.NewArraySize",
              "shortDescription": {
                "text": "NewArraySize"
              },
              "fullDescription": {
                "text": "NewArraySize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-accept4",
              "name": "android-cloexec-accept4",
              "shortDescription": {
                "text": "cloexec-accept4"
              },
              "fullDescription": {
                "text": "cloexec-accept4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-concat-nested-namespaces",
              "name": "modernize-concat-nested-namespaces",
              "shortDescription": {
                "text": "concat-nested-namespaces"
              },
              "fullDescription": {
                "text": "concat-nested-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-2",
              "name": "clion-misra-cpp2008-6-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-6-4",
              "name": "clion-misra-cpp2008-9-6-4",
              "shortDescription": {
                "text": "misra-cpp2008-9-6-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-6-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.builtin.NoReturnFunctions",
              "name": "clang-analyzer-core.builtin.NoReturnFunctions",
              "shortDescription": {
                "text": "NoReturnFunctions"
              },
              "fullDescription": {
                "text": "NoReturnFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "index": 36,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-override",
              "name": "modernize-use-override",
              "shortDescription": {
                "text": "use-override"
              },
              "fullDescription": {
                "text": "use-override"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-interfaces-global-init",
              "name": "cppcoreguidelines-interfaces-global-init",
              "shortDescription": {
                "text": "interfaces-global-init"
              },
              "fullDescription": {
                "text": "interfaces-global-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-identifier-naming",
              "name": "readability-identifier-naming",
              "shortDescription": {
                "text": "identifier-naming"
              },
              "fullDescription": {
                "text": "identifier-naming"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-too-small-loop-variable",
              "name": "bugprone-too-small-loop-variable",
              "shortDescription": {
                "text": "too-small-loop-variable"
              },
              "fullDescription": {
                "text": "too-small-loop-variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.PlacementNew",
              "name": "clang-analyzer-cplusplus.PlacementNew",
              "shortDescription": {
                "text": "PlacementNew"
              },
              "fullDescription": {
                "text": "PlacementNew"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-return-value",
              "name": "bugprone-unused-return-value",
              "shortDescription": {
                "text": "unused-return-value"
              },
              "fullDescription": {
                "text": "unused-return-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-2",
              "name": "clion-misra-cpp2008-5-2-2",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.UndefReturn",
              "name": "clang-analyzer-core.uninitialized.UndefReturn",
              "shortDescription": {
                "text": "UndefReturn"
              },
              "fullDescription": {
                "text": "UndefReturn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-epoll-create",
              "name": "android-cloexec-epoll-create",
              "shortDescription": {
                "text": "cloexec-epoll-create"
              },
              "fullDescription": {
                "text": "cloexec-epoll-create"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-signed-bitwise",
              "name": "hicpp-signed-bitwise",
              "shortDescription": {
                "text": "signed-bitwise"
              },
              "fullDescription": {
                "text": "signed-bitwise"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-single-work-item-barrier",
              "name": "altera-single-work-item-barrier",
              "shortDescription": {
                "text": "single-work-item-barrier"
              },
              "fullDescription": {
                "text": "single-work-item-barrier"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NullDereference",
              "name": "clang-analyzer-core.NullDereference",
              "shortDescription": {
                "text": "NullDereference"
              },
              "fullDescription": {
                "text": "NullDereference"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-inc-dec-in-conditions",
              "name": "bugprone-inc-dec-in-conditions",
              "shortDescription": {
                "text": "inc-dec-in-conditions"
              },
              "fullDescription": {
                "text": "inc-dec-in-conditions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.CopyToSelf",
              "name": "clang-analyzer-valist.CopyToSelf",
              "shortDescription": {
                "text": "CopyToSelf"
              },
              "fullDescription": {
                "text": "CopyToSelf"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.StackAddrEscapeBase",
              "name": "clang-analyzer-core.StackAddrEscapeBase",
              "shortDescription": {
                "text": "StackAddrEscapeBase"
              },
              "fullDescription": {
                "text": "StackAddrEscapeBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-1",
              "name": "clion-misra-c2012-13-1",
              "shortDescription": {
                "text": "misra-c2012-13-1"
              },
              "fullDescription": {
                "text": "misra-c2012-13-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-3-1",
              "name": "clion-misra-cpp2008-6-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.DivideZero",
              "name": "clang-analyzer-core.DivideZero",
              "shortDescription": {
                "text": "DivideZero"
              },
              "fullDescription": {
                "text": "DivideZero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-1",
              "name": "clion-misra-cpp2008-5-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-static-assert",
              "name": "misc-static-assert",
              "shortDescription": {
                "text": "static-assert"
              },
              "fullDescription": {
                "text": "static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl58-cpp",
              "name": "cert-dcl58-cpp",
              "shortDescription": {
                "text": "dcl58-cpp"
              },
              "fullDescription": {
                "text": "dcl58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-redundant-void-arg",
              "name": "modernize-redundant-void-arg",
              "shortDescription": {
                "text": "redundant-void-arg"
              },
              "fullDescription": {
                "text": "redundant-void-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-6-2",
              "name": "clion-misra-cpp2008-9-6-2",
              "shortDescription": {
                "text": "misra-cpp2008-9-6-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-factory-float",
              "name": "abseil-duration-factory-float",
              "shortDescription": {
                "text": "duration-factory-float"
              },
              "fullDescription": {
                "text": "duration-factory-float"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-nullptr",
              "name": "hicpp-use-nullptr",
              "shortDescription": {
                "text": "use-nullptr"
              },
              "fullDescription": {
                "text": "use-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-string-compare",
              "name": "readability-string-compare",
              "shortDescription": {
                "text": "string-compare"
              },
              "fullDescription": {
                "text": "string-compare"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-shared-ptr-array-mismatch",
              "name": "bugprone-shared-ptr-array-mismatch",
              "shortDescription": {
                "text": "shared-ptr-array-mismatch"
              },
              "fullDescription": {
                "text": "shared-ptr-array-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unique-ptr-array-mismatch",
              "name": "bugprone-unique-ptr-array-mismatch",
              "shortDescription": {
                "text": "unique-ptr-array-mismatch"
              },
              "fullDescription": {
                "text": "unique-ptr-array-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.UncountedLambdaCapturesChecker",
              "name": "clang-analyzer-webkit.UncountedLambdaCapturesChecker",
              "shortDescription": {
                "text": "UncountedLambdaCapturesChecker"
              },
              "fullDescription": {
                "text": "UncountedLambdaCapturesChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-non-copyable-objects",
              "name": "misc-non-copyable-objects",
              "shortDescription": {
                "text": "non-copyable-objects"
              },
              "fullDescription": {
                "text": "non-copyable-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-nsdate-formatter",
              "name": "objc-nsdate-formatter",
              "shortDescription": {
                "text": "nsdate-formatter"
              },
              "fullDescription": {
                "text": "nsdate-formatter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.CallAndMessageModeling",
              "name": "clang-analyzer-core.CallAndMessageModeling",
              "shortDescription": {
                "text": "CallAndMessageModeling"
              },
              "fullDescription": {
                "text": "CallAndMessageModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.API",
              "name": "clang-analyzer-osx.API",
              "shortDescription": {
                "text": "API"
              },
              "fullDescription": {
                "text": "API"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multiple-new-in-one-expression",
              "name": "bugprone-multiple-new-in-one-expression",
              "shortDescription": {
                "text": "multiple-new-in-one-expression"
              },
              "fullDescription": {
                "text": "multiple-new-in-one-expression"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-6",
              "name": "clion-misra-c2012-17-6",
              "shortDescription": {
                "text": "misra-c2012-17-6"
              },
              "fullDescription": {
                "text": "misra-c2012-17-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-preprocessor-comment-check",
              "name": "clion-preprocessor-comment-check",
              "shortDescription": {
                "text": "preprocessor-comment-check"
              },
              "fullDescription": {
                "text": "preprocessor-comment-check"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-non-private-member-variables-in-classes",
              "name": "misc-non-private-member-variables-in-classes",
              "shortDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "fullDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-dup",
              "name": "android-cloexec-dup",
              "shortDescription": {
                "text": "cloexec-dup"
              },
              "fullDescription": {
                "text": "cloexec-dup"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-unconditional-preprocessor-if",
              "name": "readability-avoid-unconditional-preprocessor-if",
              "shortDescription": {
                "text": "avoid-unconditional-preprocessor-if"
              },
              "fullDescription": {
                "text": "avoid-unconditional-preprocessor-if"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-move-constructor-init",
              "name": "performance-move-constructor-init",
              "shortDescription": {
                "text": "move-constructor-init"
              },
              "fullDescription": {
                "text": "move-constructor-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-cstyle-cast",
              "name": "cppcoreguidelines-pro-type-cstyle-cast",
              "shortDescription": {
                "text": "pro-type-cstyle-cast"
              },
              "fullDescription": {
                "text": "pro-type-cstyle-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-3",
              "name": "clion-misra-c2012-17-3",
              "shortDescription": {
                "text": "misra-c2012-17-3"
              },
              "fullDescription": {
                "text": "misra-c2012-17-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.MallocOverflow",
              "name": "clang-analyzer-alpha.security.MallocOverflow",
              "shortDescription": {
                "text": "MallocOverflow"
              },
              "fullDescription": {
                "text": "MallocOverflow"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-simplify",
              "name": "clion-simplify",
              "shortDescription": {
                "text": "simplify"
              },
              "fullDescription": {
                "text": "simplify"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-overloaded-operator",
              "name": "fuchsia-overloaded-operator",
              "shortDescription": {
                "text": "overloaded-operator"
              },
              "fullDescription": {
                "text": "overloaded-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-contains",
              "name": "readability-container-contains",
              "shortDescription": {
                "text": "container-contains"
              },
              "fullDescription": {
                "text": "container-contains"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-empty-catch",
              "name": "bugprone-empty-catch",
              "shortDescription": {
                "text": "empty-catch"
              },
              "fullDescription": {
                "text": "empty-catch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-control-flow",
              "name": "readability-redundant-control-flow",
              "shortDescription": {
                "text": "redundant-control-flow"
              },
              "fullDescription": {
                "text": "redundant-control-flow"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-11",
              "name": "clion-misra-c2012-8-11",
              "shortDescription": {
                "text": "misra-c2012-8-11"
              },
              "fullDescription": {
                "text": "misra-c2012-8-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-static-definition-in-anonymous-namespace",
              "name": "readability-static-definition-in-anonymous-namespace",
              "shortDescription": {
                "text": "static-definition-in-anonymous-namespace"
              },
              "fullDescription": {
                "text": "static-definition-in-anonymous-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-braces-around-statements",
              "name": "readability-braces-around-statements",
              "shortDescription": {
                "text": "braces-around-statements"
              },
              "fullDescription": {
                "text": "braces-around-statements"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-undefined-memory-manipulation",
              "name": "bugprone-undefined-memory-manipulation",
              "shortDescription": {
                "text": "undefined-memory-manipulation"
              },
              "fullDescription": {
                "text": "undefined-memory-manipulation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-infinite-loop",
              "name": "bugprone-infinite-loop",
              "shortDescription": {
                "text": "infinite-loop"
              },
              "fullDescription": {
                "text": "infinite-loop"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-10-3-2",
              "name": "clion-misra-cpp2008-10-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-10-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-10-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-memfd-create",
              "name": "android-cloexec-memfd-create",
              "shortDescription": {
                "text": "cloexec-memfd-create"
              },
              "fullDescription": {
                "text": "cloexec-memfd-create"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-literal-with-embedded-nul",
              "name": "bugprone-string-literal-with-embedded-nul",
              "shortDescription": {
                "text": "string-literal-with-embedded-nul"
              },
              "fullDescription": {
                "text": "string-literal-with-embedded-nul"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.llvm.Conventions",
              "name": "clang-analyzer-alpha.llvm.Conventions",
              "shortDescription": {
                "text": "Conventions"
              },
              "fullDescription": {
                "text": "Conventions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.llvm",
                    "index": 41,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-avoid-underscore-in-googletest-name",
              "name": "google-readability-avoid-underscore-in-googletest-name",
              "shortDescription": {
                "text": "readability-avoid-underscore-in-googletest-name"
              },
              "fullDescription": {
                "text": "readability-avoid-underscore-in-googletest-name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RetainCountBase",
              "name": "clang-analyzer-osx.cocoa.RetainCountBase",
              "shortDescription": {
                "text": "RetainCountBase"
              },
              "fullDescription": {
                "text": "RetainCountBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-9",
              "name": "clion-misra-c2012-11-9",
              "shortDescription": {
                "text": "misra-c2012-11-9"
              },
              "fullDescription": {
                "text": "misra-c2012-11-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.SmartPtrModeling",
              "name": "clang-analyzer-cplusplus.SmartPtrModeling",
              "shortDescription": {
                "text": "SmartPtrModeling"
              },
              "fullDescription": {
                "text": "SmartPtrModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-non-zero-enum-to-bool-conversion",
              "name": "bugprone-non-zero-enum-to-bool-conversion",
              "shortDescription": {
                "text": "non-zero-enum-to-bool-conversion"
              },
              "fullDescription": {
                "text": "non-zero-enum-to-bool-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ArrayBoundV2",
              "name": "clang-analyzer-alpha.security.ArrayBoundV2",
              "shortDescription": {
                "text": "ArrayBoundV2"
              },
              "fullDescription": {
                "text": "ArrayBoundV2"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullableReturnedFromNonnull",
              "name": "clang-analyzer-nullability.NullableReturnedFromNonnull",
              "shortDescription": {
                "text": "NullableReturnedFromNonnull"
              },
              "fullDescription": {
                "text": "NullableReturnedFromNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-2",
              "name": "clion-misra-c2012-8-2",
              "shortDescription": {
                "text": "misra-c2012-8-2"
              },
              "fullDescription": {
                "text": "misra-c2012-8-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-con54-cpp",
              "name": "cert-con54-cpp",
              "shortDescription": {
                "text": "con54-cpp"
              },
              "fullDescription": {
                "text": "con54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-vararg",
              "name": "cppcoreguidelines-pro-type-vararg",
              "shortDescription": {
                "text": "pro-type-vararg"
              },
              "fullDescription": {
                "text": "pro-type-vararg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-4",
              "name": "clion-misra-cpp2008-5-0-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-2",
              "name": "clion-misra-c2012-11-2",
              "shortDescription": {
                "text": "misra-c2012-11-2"
              },
              "fullDescription": {
                "text": "misra-c2012-11-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-spuriously-wake-up-functions",
              "name": "bugprone-spuriously-wake-up-functions",
              "shortDescription": {
                "text": "spuriously-wake-up-functions"
              },
              "fullDescription": {
                "text": "spuriously-wake-up-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-5-1",
              "name": "clion-misra-cpp2008-15-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-15-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-type-promotion-in-math-fn",
              "name": "performance-type-promotion-in-math-fn",
              "shortDescription": {
                "text": "type-promotion-in-math-fn"
              },
              "fullDescription": {
                "text": "type-promotion-in-math-fn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-identifier-length",
              "name": "readability-identifier-length",
              "shortDescription": {
                "text": "identifier-length"
              },
              "fullDescription": {
                "text": "identifier-length"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.CapturedBlockVariable",
              "name": "clang-analyzer-core.uninitialized.CapturedBlockVariable",
              "shortDescription": {
                "text": "CapturedBlockVariable"
              },
              "fullDescription": {
                "text": "CapturedBlockVariable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-union-access",
              "name": "cppcoreguidelines-pro-type-union-access",
              "shortDescription": {
                "text": "pro-type-union-access"
              },
              "fullDescription": {
                "text": "pro-type-union-access"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-default-arguments-calls",
              "name": "fuchsia-default-arguments-calls",
              "shortDescription": {
                "text": "default-arguments-calls"
              },
              "fullDescription": {
                "text": "default-arguments-calls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.DynamicTypePropagation",
              "name": "clang-analyzer-core.DynamicTypePropagation",
              "shortDescription": {
                "text": "DynamicTypePropagation"
              },
              "fullDescription": {
                "text": "DynamicTypePropagation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-runtime-int",
              "name": "google-runtime-int",
              "shortDescription": {
                "text": "runtime-int"
              },
              "fullDescription": {
                "text": "runtime-int"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency-thread-canceltype-asynchronous",
              "name": "concurrency-thread-canceltype-asynchronous",
              "shortDescription": {
                "text": "thread-canceltype-asynchronous"
              },
              "fullDescription": {
                "text": "thread-canceltype-asynchronous"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "index": 43,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.API",
              "name": "clang-analyzer-unix.API",
              "shortDescription": {
                "text": "API"
              },
              "fullDescription": {
                "text": "API"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.StringChecker",
              "name": "clang-analyzer-cplusplus.StringChecker",
              "shortDescription": {
                "text": "StringChecker"
              },
              "fullDescription": {
                "text": "StringChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-destructor",
              "name": "cppcoreguidelines-noexcept-destructor",
              "shortDescription": {
                "text": "noexcept-destructor"
              },
              "fullDescription": {
                "text": "noexcept-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-8",
              "name": "clion-misra-c2012-11-8",
              "shortDescription": {
                "text": "misra-c2012-11-8"
              },
              "fullDescription": {
                "text": "misra-c2012-11-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-0-2",
              "name": "clion-misra-cpp2008-15-0-2",
              "shortDescription": {
                "text": "misra-cpp2008-15-0-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-0-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin-dispatch-once-nonstatic",
              "name": "darwin-dispatch-once-nonstatic",
              "shortDescription": {
                "text": "dispatch-once-nonstatic"
              },
              "fullDescription": {
                "text": "dispatch-once-nonstatic"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "index": 44,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-exception-escape",
              "name": "bugprone-exception-escape",
              "shortDescription": {
                "text": "exception-escape"
              },
              "fullDescription": {
                "text": "exception-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-cleanup-ctad",
              "name": "abseil-cleanup-ctad",
              "shortDescription": {
                "text": "cleanup-ctad"
              },
              "fullDescription": {
                "text": "cleanup-ctad"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.VariadicMethodTypes",
              "name": "clang-analyzer-osx.cocoa.VariadicMethodTypes",
              "shortDescription": {
                "text": "VariadicMethodTypes"
              },
              "fullDescription": {
                "text": "VariadicMethodTypes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-deadcode.DeadStores",
              "name": "clang-analyzer-deadcode.DeadStores",
              "shortDescription": {
                "text": "DeadStores"
              },
              "fullDescription": {
                "text": "DeadStores"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "deadcode",
                    "index": 45,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl50-cpp",
              "name": "cert-dcl50-cpp",
              "shortDescription": {
                "text": "dcl50-cpp"
              },
              "fullDescription": {
                "text": "dcl50-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-5",
              "name": "clion-misra-cpp2008-5-2-5",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-5",
              "name": "clion-misra-c2012-17-5",
              "shortDescription": {
                "text": "misra-c2012-17-5"
              },
              "fullDescription": {
                "text": "misra-c2012-17-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-using-decls",
              "name": "misc-unused-using-decls",
              "shortDescription": {
                "text": "unused-using-decls"
              },
              "fullDescription": {
                "text": "unused-using-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-goto",
              "name": "cppcoreguidelines-avoid-goto",
              "shortDescription": {
                "text": "avoid-goto"
              },
              "fullDescription": {
                "text": "avoid-goto"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-missing-std-forward",
              "name": "cppcoreguidelines-missing-std-forward",
              "shortDescription": {
                "text": "missing-std-forward"
              },
              "fullDescription": {
                "text": "missing-std-forward"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-fio38-c",
              "name": "cert-fio38-c",
              "shortDescription": {
                "text": "fio38-c"
              },
              "fullDescription": {
                "text": "fio38-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NonNilReturnValue",
              "name": "clang-analyzer-osx.cocoa.NonNilReturnValue",
              "shortDescription": {
                "text": "NonNilReturnValue"
              },
              "fullDescription": {
                "text": "NonNilReturnValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-nodiscard",
              "name": "modernize-use-nodiscard",
              "shortDescription": {
                "text": "use-nodiscard"
              },
              "fullDescription": {
                "text": "use-nodiscard"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-misleading-indentation",
              "name": "readability-misleading-indentation",
              "shortDescription": {
                "text": "misleading-indentation"
              },
              "fullDescription": {
                "text": "misleading-indentation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.webkit.UncountedCallArgsChecker",
              "name": "clang-analyzer-alpha.webkit.UncountedCallArgsChecker",
              "shortDescription": {
                "text": "UncountedCallArgsChecker"
              },
              "fullDescription": {
                "text": "UncountedCallArgsChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "index": 46,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-str34-c",
              "name": "cert-str34-c",
              "shortDescription": {
                "text": "str34-c"
              },
              "fullDescription": {
                "text": "str34-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.MissingSuperCall",
              "name": "clang-analyzer-osx.cocoa.MissingSuperCall",
              "shortDescription": {
                "text": "MissingSuperCall"
              },
              "fullDescription": {
                "text": "MissingSuperCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-dangling-handle",
              "name": "bugprone-dangling-handle",
              "shortDescription": {
                "text": "dangling-handle"
              },
              "fullDescription": {
                "text": "dangling-handle"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-1",
              "name": "clion-misra-cpp2008-6-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.performance.GCDAntipattern",
              "name": "clang-analyzer-optin.performance.GCDAntipattern",
              "shortDescription": {
                "text": "GCDAntipattern"
              },
              "fullDescription": {
                "text": "GCDAntipattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "index": 47,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-12-1-3",
              "name": "clion-misra-cpp2008-12-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-12-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-12-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-prefer-member-initializer",
              "name": "cppcoreguidelines-prefer-member-initializer",
              "shortDescription": {
                "text": "prefer-member-initializer"
              },
              "fullDescription": {
                "text": "prefer-member-initializer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-namespaces",
              "name": "google-build-namespaces",
              "shortDescription": {
                "text": "build-namespaces"
              },
              "fullDescription": {
                "text": "build-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-static-cast-downcast",
              "name": "cppcoreguidelines-pro-type-static-cast-downcast",
              "shortDescription": {
                "text": "pro-type-static-cast-downcast"
              },
              "fullDescription": {
                "text": "pro-type-static-cast-downcast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-4-1",
              "name": "clion-misra-cpp2008-18-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-18-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-noexcept",
              "name": "hicpp-use-noexcept",
              "shortDescription": {
                "text": "use-noexcept"
              },
              "fullDescription": {
                "text": "use-noexcept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.SecKeychainAPI",
              "name": "clang-analyzer-osx.SecKeychainAPI",
              "shortDescription": {
                "text": "SecKeychainAPI"
              },
              "fullDescription": {
                "text": "SecKeychainAPI"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NSAutoreleasePool",
              "name": "clang-analyzer-osx.cocoa.NSAutoreleasePool",
              "shortDescription": {
                "text": "NSAutoreleasePool"
              },
              "fullDescription": {
                "text": "NSAutoreleasePool"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-3",
              "name": "clion-misra-c2012-21-3",
              "shortDescription": {
                "text": "misra-c2012-21-3"
              },
              "fullDescription": {
                "text": "misra-c2012-21-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-memory-comparison",
              "name": "bugprone-suspicious-memory-comparison",
              "shortDescription": {
                "text": "suspicious-memory-comparison"
              },
              "fullDescription": {
                "text": "suspicious-memory-comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.Uninitialized",
              "name": "clang-analyzer-valist.Uninitialized",
              "shortDescription": {
                "text": "Uninitialized"
              },
              "fullDescription": {
                "text": "Uninitialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-nullptr",
              "name": "modernize-use-nullptr",
              "shortDescription": {
                "text": "use-nullptr"
              },
              "fullDescription": {
                "text": "use-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-owning-memory",
              "name": "cppcoreguidelines-owning-memory",
              "shortDescription": {
                "text": "owning-memory"
              },
              "fullDescription": {
                "text": "owning-memory"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-4-4",
              "name": "clion-misra-cpp2008-8-4-4",
              "shortDescription": {
                "text": "misra-cpp2008-8-4-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-4-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-6",
              "name": "clion-misra-c2012-15-6",
              "shortDescription": {
                "text": "misra-c2012-15-6"
              },
              "fullDescription": {
                "text": "misra-c2012-15-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.CStringModeling",
              "name": "clang-analyzer-unix.cstring.CStringModeling",
              "shortDescription": {
                "text": "CStringModeling"
              },
              "fullDescription": {
                "text": "CStringModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-shrink-to-fit",
              "name": "modernize-shrink-to-fit",
              "shortDescription": {
                "text": "shrink-to-fit"
              },
              "fullDescription": {
                "text": "shrink-to-fit"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-unnecessary-value-param",
              "name": "performance-unnecessary-value-param",
              "shortDescription": {
                "text": "unnecessary-value-param"
              },
              "fullDescription": {
                "text": "unnecessary-value-param"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-12",
              "name": "clion-misra-cpp2008-5-0-12",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-12"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-static-assert",
              "name": "hicpp-static-assert",
              "shortDescription": {
                "text": "static-assert"
              },
              "fullDescription": {
                "text": "static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-emplace",
              "name": "modernize-use-emplace",
              "shortDescription": {
                "text": "use-emplace"
              },
              "fullDescription": {
                "text": "use-emplace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-avoid-throwing-exception",
              "name": "google-objc-avoid-throwing-exception",
              "shortDescription": {
                "text": "objc-avoid-throwing-exception"
              },
              "fullDescription": {
                "text": "objc-avoid-throwing-exception"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-const-correctness",
              "name": "misc-const-correctness",
              "shortDescription": {
                "text": "const-correctness"
              },
              "fullDescription": {
                "text": "const-correctness"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullableDereferenced",
              "name": "clang-analyzer-nullability.NullableDereferenced",
              "shortDescription": {
                "text": "NullableDereferenced"
              },
              "fullDescription": {
                "text": "NullableDereferenced"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-forbidden-subclassing",
              "name": "objc-forbidden-subclassing",
              "shortDescription": {
                "text": "forbidden-subclassing"
              },
              "fullDescription": {
                "text": "forbidden-subclassing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-swapped-arguments",
              "name": "bugprone-swapped-arguments",
              "shortDescription": {
                "text": "swapped-arguments"
              },
              "fullDescription": {
                "text": "swapped-arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-nsinvocation-argument-lifetime",
              "name": "objc-nsinvocation-argument-lifetime",
              "shortDescription": {
                "text": "nsinvocation-argument-lifetime"
              },
              "fullDescription": {
                "text": "nsinvocation-argument-lifetime"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-include-order",
              "name": "llvm-include-order",
              "shortDescription": {
                "text": "include-order"
              },
              "fullDescription": {
                "text": "include-order"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-compare-pointer-to-member-virtual-function",
              "name": "bugprone-compare-pointer-to-member-virtual-function",
              "shortDescription": {
                "text": "compare-pointer-to-member-virtual-function"
              },
              "fullDescription": {
                "text": "compare-pointer-to-member-virtual-function"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.core.EnumCastOutOfRange",
              "name": "clang-analyzer-optin.core.EnumCastOutOfRange",
              "shortDescription": {
                "text": "EnumCastOutOfRange"
              },
              "fullDescription": {
                "text": "EnumCastOutOfRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.core",
                    "index": 48,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.ArraySubscript",
              "name": "clang-analyzer-core.uninitialized.ArraySubscript",
              "shortDescription": {
                "text": "ArraySubscript"
              },
              "fullDescription": {
                "text": "ArraySubscript"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-std-allocator-const",
              "name": "portability-std-allocator-const",
              "shortDescription": {
                "text": "std-allocator-const"
              },
              "fullDescription": {
                "text": "std-allocator-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.AutoreleaseWrite",
              "name": "clang-analyzer-osx.cocoa.AutoreleaseWrite",
              "shortDescription": {
                "text": "AutoreleaseWrite"
              },
              "fullDescription": {
                "text": "AutoreleaseWrite"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-inotify-init",
              "name": "android-cloexec-inotify-init",
              "shortDescription": {
                "text": "cloexec-inotify-init"
              },
              "fullDescription": {
                "text": "cloexec-inotify-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-malloc",
              "name": "hicpp-no-malloc",
              "shortDescription": {
                "text": "no-malloc"
              },
              "fullDescription": {
                "text": "no-malloc"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-assembler",
              "name": "hicpp-no-assembler",
              "shortDescription": {
                "text": "no-assembler"
              },
              "fullDescription": {
                "text": "no-assembler"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-data-pointer",
              "name": "readability-container-data-pointer",
              "shortDescription": {
                "text": "container-data-pointer"
              },
              "fullDescription": {
                "text": "container-data-pointer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-4-12",
              "name": "clion-misra-c2012-4-12",
              "shortDescription": {
                "text": "misra-c2012-4-12"
              },
              "fullDescription": {
                "text": "misra-c2012-4-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-move-const-arg",
              "name": "performance-move-const-arg",
              "shortDescription": {
                "text": "move-const-arg"
              },
              "fullDescription": {
                "text": "move-const-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.webkit.UncountedLocalVarsChecker",
              "name": "clang-analyzer-alpha.webkit.UncountedLocalVarsChecker",
              "shortDescription": {
                "text": "UncountedLocalVarsChecker"
              },
              "fullDescription": {
                "text": "UncountedLocalVarsChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "index": 46,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-implicit-conversion-in-loop",
              "name": "performance-implicit-conversion-in-loop",
              "shortDescription": {
                "text": "implicit-conversion-in-loop"
              },
              "fullDescription": {
                "text": "implicit-conversion-in-loop"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-integer-assignment",
              "name": "bugprone-string-integer-assignment",
              "shortDescription": {
                "text": "string-integer-assignment"
              },
              "fullDescription": {
                "text": "string-integer-assignment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-5",
              "name": "clion-misra-c2012-10-5",
              "shortDescription": {
                "text": "misra-c2012-10-5"
              },
              "fullDescription": {
                "text": "misra-c2012-10-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-copy-constructor-init",
              "name": "bugprone-copy-constructor-init",
              "shortDescription": {
                "text": "copy-constructor-init"
              },
              "fullDescription": {
                "text": "copy-constructor-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.FloatLoopCounter",
              "name": "clang-analyzer-security.FloatLoopCounter",
              "shortDescription": {
                "text": "FloatLoopCounter"
              },
              "fullDescription": {
                "text": "FloatLoopCounter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security",
                    "index": 50,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
              "name": "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
              "shortDescription": {
                "text": "IncompatibleMethodTypes"
              },
              "fullDescription": {
                "text": "IncompatibleMethodTypes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-4",
              "name": "clion-misra-cpp2008-6-6-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-easily-swappable-parameters",
              "name": "bugprone-easily-swappable-parameters",
              "shortDescription": {
                "text": "easily-swappable-parameters"
              },
              "fullDescription": {
                "text": "easily-swappable-parameters"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-prefer-isa-or-dyn-cast-in-conditionals",
              "name": "llvm-prefer-isa-or-dyn-cast-in-conditionals",
              "shortDescription": {
                "text": "prefer-isa-or-dyn-cast-in-conditionals"
              },
              "fullDescription": {
                "text": "prefer-isa-or-dyn-cast-in-conditionals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-integer-division",
              "name": "bugprone-integer-division",
              "shortDescription": {
                "text": "integer-division"
              },
              "fullDescription": {
                "text": "integer-division"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.Assign",
              "name": "clang-analyzer-core.uninitialized.Assign",
              "shortDescription": {
                "text": "Assign"
              },
              "fullDescription": {
                "text": "Assign"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-constraints",
              "name": "modernize-use-constraints",
              "shortDescription": {
                "text": "use-constraints"
              },
              "fullDescription": {
                "text": "use-constraints"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-time-subtraction",
              "name": "abseil-time-subtraction",
              "shortDescription": {
                "text": "time-subtraction"
              },
              "fullDescription": {
                "text": "time-subtraction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-enum-usage",
              "name": "bugprone-suspicious-enum-usage",
              "shortDescription": {
                "text": "suspicious-enum-usage"
              },
              "fullDescription": {
                "text": "suspicious-enum-usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-string-init",
              "name": "readability-redundant-string-init",
              "shortDescription": {
                "text": "redundant-string-init"
              },
              "fullDescription": {
                "text": "redundant-string-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-3",
              "name": "clion-misra-c2012-13-3",
              "shortDescription": {
                "text": "misra-c2012-13-3"
              },
              "fullDescription": {
                "text": "misra-c2012-13-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unchecked-optional-access",
              "name": "bugprone-unchecked-optional-access",
              "shortDescription": {
                "text": "unchecked-optional-access"
              },
              "fullDescription": {
                "text": "unchecked-optional-access"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-isolate-declaration",
              "name": "readability-isolate-declaration",
              "shortDescription": {
                "text": "isolate-declaration"
              },
              "fullDescription": {
                "text": "isolate-declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.TestAfterDivZero",
              "name": "clang-analyzer-alpha.core.TestAfterDivZero",
              "shortDescription": {
                "text": "TestAfterDivZero"
              },
              "fullDescription": {
                "text": "TestAfterDivZero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-conversion-cast",
              "name": "abseil-duration-conversion-cast",
              "shortDescription": {
                "text": "duration-conversion-cast"
              },
              "fullDescription": {
                "text": "duration-conversion-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-5",
              "name": "clion-misra-c2012-16-5",
              "shortDescription": {
                "text": "misra-c2012-16-5"
              },
              "fullDescription": {
                "text": "misra-c2012-16-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-local-non-trivial-variable",
              "name": "bugprone-unused-local-non-trivial-variable",
              "shortDescription": {
                "text": "unused-local-non-trivial-variable"
              },
              "fullDescription": {
                "text": "unused-local-non-trivial-variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.google.GTest",
              "name": "clang-analyzer-apiModeling.google.GTest",
              "shortDescription": {
                "text": "GTest"
              },
              "fullDescription": {
                "text": "GTest"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.google",
                    "index": 51,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-const-cast",
              "name": "cppcoreguidelines-pro-type-const-cast",
              "shortDescription": {
                "text": "pro-type-const-cast"
              },
              "fullDescription": {
                "text": "pro-type-const-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.StackAddressAsyncEscape",
              "name": "clang-analyzer-alpha.core.StackAddressAsyncEscape",
              "shortDescription": {
                "text": "StackAddressAsyncEscape"
              },
              "fullDescription": {
                "text": "StackAddressAsyncEscape"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unconventional-assign-operator",
              "name": "misc-unconventional-assign-operator",
              "shortDescription": {
                "text": "unconventional-assign-operator"
              },
              "fullDescription": {
                "text": "unconventional-assign-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-no-escape",
              "name": "bugprone-no-escape",
              "shortDescription": {
                "text": "no-escape"
              },
              "fullDescription": {
                "text": "no-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-const-or-ref-data-members",
              "name": "cppcoreguidelines-avoid-const-or-ref-data-members",
              "shortDescription": {
                "text": "avoid-const-or-ref-data-members"
              },
              "fullDescription": {
                "text": "avoid-const-or-ref-data-members"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-enum-size",
              "name": "performance-enum-size",
              "shortDescription": {
                "text": "enum-size"
              },
              "fullDescription": {
                "text": "enum-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-convert-member-functions-to-static",
              "name": "readability-convert-member-functions-to-static",
              "shortDescription": {
                "text": "convert-member-functions-to-static"
              },
              "fullDescription": {
                "text": "convert-member-functions-to-static"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-function-ptr-dereference",
              "name": "readability-redundant-function-ptr-dereference",
              "shortDescription": {
                "text": "redundant-function-ptr-dereference"
              },
              "fullDescription": {
                "text": "redundant-function-ptr-dereference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.cert.env.InvalidPtr",
              "name": "clang-analyzer-security.cert.env.InvalidPtr",
              "shortDescription": {
                "text": "InvalidPtr"
              },
              "fullDescription": {
                "text": "InvalidPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.cert.env",
                    "index": 52,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-2",
              "name": "clion-misra-cpp2008-6-4-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-posix-return",
              "name": "bugprone-posix-return",
              "shortDescription": {
                "text": "posix-return"
              },
              "fullDescription": {
                "text": "posix-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-ignored-remove-result",
              "name": "hicpp-ignored-remove-result",
              "shortDescription": {
                "text": "ignored-remove-result"
              },
              "fullDescription": {
                "text": "ignored-remove-result"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-7",
              "name": "clion-misra-c2012-15-7",
              "shortDescription": {
                "text": "misra-c2012-15-7"
              },
              "fullDescription": {
                "text": "misra-c2012-15-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.NumberObjectConversion",
              "name": "clang-analyzer-osx.NumberObjectConversion",
              "shortDescription": {
                "text": "NumberObjectConversion"
              },
              "fullDescription": {
                "text": "NumberObjectConversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFRetainRelease",
              "name": "clang-analyzer-osx.coreFoundation.CFRetainRelease",
              "shortDescription": {
                "text": "CFRetainRelease"
              },
              "fullDescription": {
                "text": "CFRetainRelease"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-member-init",
              "name": "cppcoreguidelines-pro-type-member-init",
              "shortDescription": {
                "text": "pro-type-member-init"
              },
              "fullDescription": {
                "text": "pro-type-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-designated-initializers",
              "name": "modernize-use-designated-initializers",
              "shortDescription": {
                "text": "use-designated-initializers"
              },
              "fullDescription": {
                "text": "use-designated-initializers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-time-comparison",
              "name": "abseil-time-comparison",
              "shortDescription": {
                "text": "time-comparison"
              },
              "fullDescription": {
                "text": "time-comparison"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-mem57-cpp",
              "name": "cert-mem57-cpp",
              "shortDescription": {
                "text": "mem57-cpp"
              },
              "fullDescription": {
                "text": "mem57-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-10-1-1",
              "name": "clion-misra-cpp2008-10-1-1",
              "shortDescription": {
                "text": "misra-cpp2008-10-1-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-10-1-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-7",
              "name": "clion-misra-cpp2008-6-4-7",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-7"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-explicit-conversions",
              "name": "hicpp-explicit-conversions",
              "shortDescription": {
                "text": "explicit-conversions"
              },
              "fullDescription": {
                "text": "explicit-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-implicit-widening-of-multiplication-result",
              "name": "bugprone-implicit-widening-of-multiplication-result",
              "shortDescription": {
                "text": "implicit-widening-of-multiplication-result"
              },
              "fullDescription": {
                "text": "implicit-widening-of-multiplication-result"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-unary-static-assert",
              "name": "modernize-unary-static-assert",
              "shortDescription": {
                "text": "unary-static-assert"
              },
              "fullDescription": {
                "text": "unary-static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.clone.CloneChecker",
              "name": "clang-analyzer-alpha.clone.CloneChecker",
              "shortDescription": {
                "text": "CloneChecker"
              },
              "fullDescription": {
                "text": "CloneChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.clone",
                    "index": 53,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-14-5-2",
              "name": "clion-misra-cpp2008-14-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-14-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-14-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-faster-strsplit-delimiter",
              "name": "abseil-faster-strsplit-delimiter",
              "shortDescription": {
                "text": "faster-strsplit-delimiter"
              },
              "fullDescription": {
                "text": "faster-strsplit-delimiter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.nondeterminism.PointerIteration",
              "name": "clang-analyzer-alpha.nondeterminism.PointerIteration",
              "shortDescription": {
                "text": "PointerIteration"
              },
              "fullDescription": {
                "text": "PointerIteration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "index": 54,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-for-range-copy",
              "name": "performance-for-range-copy",
              "shortDescription": {
                "text": "for-range-copy"
              },
              "fullDescription": {
                "text": "for-range-copy"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-equals-delete",
              "name": "modernize-use-equals-delete",
              "shortDescription": {
                "text": "use-equals-delete"
              },
              "fullDescription": {
                "text": "use-equals-delete"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-move-constructor",
              "name": "performance-noexcept-move-constructor",
              "shortDescription": {
                "text": "noexcept-move-constructor"
              },
              "fullDescription": {
                "text": "noexcept-move-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl51-cpp",
              "name": "cert-dcl51-cpp",
              "shortDescription": {
                "text": "dcl51-cpp"
              },
              "fullDescription": {
                "text": "dcl51-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-std-numbers",
              "name": "modernize-use-std-numbers",
              "shortDescription": {
                "text": "use-std-numbers"
              },
              "fullDescription": {
                "text": "use-std-numbers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi-buffer-deref",
              "name": "mpi-buffer-deref",
              "shortDescription": {
                "text": "buffer-deref"
              },
              "fullDescription": {
                "text": "buffer-deref"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "index": 34,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-delete-null-pointer",
              "name": "readability-delete-null-pointer",
              "shortDescription": {
                "text": "delete-null-pointer"
              },
              "fullDescription": {
                "text": "delete-null-pointer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-simplify-subscript-expr",
              "name": "readability-simplify-subscript-expr",
              "shortDescription": {
                "text": "simplify-subscript-expr"
              },
              "fullDescription": {
                "text": "simplify-subscript-expr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-named-parameter",
              "name": "readability-named-parameter",
              "shortDescription": {
                "text": "named-parameter"
              },
              "fullDescription": {
                "text": "named-parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.SelfAssignment",
              "name": "clang-analyzer-cplusplus.SelfAssignment",
              "shortDescription": {
                "text": "SelfAssignment"
              },
              "fullDescription": {
                "text": "SelfAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-string-compare",
              "name": "bugprone-suspicious-string-compare",
              "shortDescription": {
                "text": "suspicious-string-compare"
              },
              "fullDescription": {
                "text": "suspicious-string-compare"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
              "name": "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
              "shortDescription": {
                "text": "EmptyLocalizationContextChecker"
              },
              "fullDescription": {
                "text": "EmptyLocalizationContextChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "index": 55,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err33-c",
              "name": "cert-err33-c",
              "shortDescription": {
                "text": "err33-c"
              },
              "fullDescription": {
                "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-reference-to-constructed-temporary",
              "name": "readability-reference-to-constructed-temporary",
              "shortDescription": {
                "text": "reference-to-constructed-temporary"
              },
              "fullDescription": {
                "text": "reference-to-constructed-temporary"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-factory-scale",
              "name": "abseil-duration-factory-scale",
              "shortDescription": {
                "text": "duration-factory-scale"
              },
              "fullDescription": {
                "text": "duration-factory-scale"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bcmp",
              "name": "clang-analyzer-security.insecureAPI.bcmp",
              "shortDescription": {
                "text": "bcmp"
              },
              "fullDescription": {
                "text": "bcmp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-3",
              "name": "clion-misra-c2012-16-3",
              "shortDescription": {
                "text": "misra-c2012-16-3"
              },
              "fullDescription": {
                "text": "misra-c2012-16-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-widening-cast",
              "name": "bugprone-misplaced-widening-cast",
              "shortDescription": {
                "text": "misplaced-widening-cast"
              },
              "fullDescription": {
                "text": "misplaced-widening-cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-dynamic-static-initializers",
              "name": "bugprone-dynamic-static-initializers",
              "shortDescription": {
                "text": "dynamic-static-initializers"
              },
              "fullDescription": {
                "text": "dynamic-static-initializers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-8",
              "name": "clion-misra-c2012-17-8",
              "shortDescription": {
                "text": "misra-c2012-17-8"
              },
              "fullDescription": {
                "text": "misra-c2012-17-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-kernel-name-restriction",
              "name": "altera-kernel-name-restriction",
              "shortDescription": {
                "text": "kernel-name-restriction"
              },
              "fullDescription": {
                "text": "kernel-name-restriction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.MallocSizeof",
              "name": "clang-analyzer-unix.MallocSizeof",
              "shortDescription": {
                "text": "MallocSizeof"
              },
              "fullDescription": {
                "text": "MallocSizeof"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop11-cpp",
              "name": "cert-oop11-cpp",
              "shortDescription": {
                "text": "oop11-cpp"
              },
              "fullDescription": {
                "text": "oop11-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullReturnedFromNonnull",
              "name": "clang-analyzer-nullability.NullReturnedFromNonnull",
              "shortDescription": {
                "text": "NullReturnedFromNonnull"
              },
              "fullDescription": {
                "text": "NullReturnedFromNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unhandled-exception-at-new",
              "name": "bugprone-unhandled-exception-at-new",
              "shortDescription": {
                "text": "unhandled-exception-at-new"
              },
              "fullDescription": {
                "text": "unhandled-exception-at-new"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-1",
              "name": "clion-misra-cpp2008-6-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-use-std-min-max",
              "name": "readability-use-std-min-max",
              "shortDescription": {
                "text": "use-std-min-max"
              },
              "fullDescription": {
                "text": "use-std-min-max"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-raw-string-literal",
              "name": "modernize-raw-string-literal",
              "shortDescription": {
                "text": "raw-string-literal"
              },
              "fullDescription": {
                "text": "raw-string-literal"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-inaccurate-erase",
              "name": "bugprone-inaccurate-erase",
              "shortDescription": {
                "text": "inaccurate-erase"
              },
              "fullDescription": {
                "text": "inaccurate-erase"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misleading-identifier",
              "name": "misc-misleading-identifier",
              "shortDescription": {
                "text": "misleading-identifier"
              },
              "fullDescription": {
                "text": "misleading-identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-1",
              "name": "clion-misra-c2012-11-1",
              "shortDescription": {
                "text": "misra-c2012-11-1"
              },
              "fullDescription": {
                "text": "misra-c2012-11-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.portability.UnixAPI",
              "name": "clang-analyzer-optin.portability.UnixAPI",
              "shortDescription": {
                "text": "UnixAPI"
              },
              "fullDescription": {
                "text": "UnixAPI"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.portability",
                    "index": 56,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-parameters",
              "name": "misc-unused-parameters",
              "shortDescription": {
                "text": "unused-parameters"
              },
              "fullDescription": {
                "text": "unused-parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-1-2",
              "name": "clion-misra-cpp2008-15-1-2",
              "shortDescription": {
                "text": "misra-cpp2008-15-1-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-1-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.NSOrCFErrorDerefChecker",
              "name": "clang-analyzer-osx.NSOrCFErrorDerefChecker",
              "shortDescription": {
                "text": "NSOrCFErrorDerefChecker"
              },
              "fullDescription": {
                "text": "NSOrCFErrorDerefChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-auto-ptr",
              "name": "modernize-replace-auto-ptr",
              "shortDescription": {
                "text": "replace-auto-ptr"
              },
              "fullDescription": {
                "text": "replace-auto-ptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-reinterpret-cast",
              "name": "cppcoreguidelines-pro-type-reinterpret-cast",
              "shortDescription": {
                "text": "pro-type-reinterpret-cast"
              },
              "fullDescription": {
                "text": "pro-type-reinterpret-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-4",
              "name": "clion-misra-c2012-16-4",
              "shortDescription": {
                "text": "misra-c2012-16-4"
              },
              "fullDescription": {
                "text": "misra-c2012-16-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-virtual-class-destructor",
              "name": "cppcoreguidelines-virtual-class-destructor",
              "shortDescription": {
                "text": "virtual-class-destructor"
              },
              "fullDescription": {
                "text": "virtual-class-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NonNullParamChecker",
              "name": "clang-analyzer-core.NonNullParamChecker",
              "shortDescription": {
                "text": "NonNullParamChecker"
              },
              "fullDescription": {
                "text": "NonNullParamChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp-exception-escape",
              "name": "openmp-exception-escape",
              "shortDescription": {
                "text": "exception-escape"
              },
              "fullDescription": {
                "text": "exception-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "index": 57,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-vararg",
              "name": "hicpp-vararg",
              "shortDescription": {
                "text": "vararg"
              },
              "fullDescription": {
                "text": "vararg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.UninitializedRead",
              "name": "clang-analyzer-alpha.unix.cstring.UninitializedRead",
              "shortDescription": {
                "text": "UninitializedRead"
              },
              "fullDescription": {
                "text": "UninitializedRead"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-5-3",
              "name": "clion-misra-cpp2008-8-5-3",
              "shortDescription": {
                "text": "misra-cpp2008-8-5-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-5-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop57-cpp",
              "name": "cert-oop57-cpp",
              "shortDescription": {
                "text": "oop57-cpp"
              },
              "fullDescription": {
                "text": "oop57-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-8",
              "name": "clion-misra-c2012-21-8",
              "shortDescription": {
                "text": "misra-c2012-21-8"
              },
              "fullDescription": {
                "text": "misra-c2012-21-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-8",
              "name": "clion-misra-c2012-8-8",
              "shortDescription": {
                "text": "misra-c2012-8-8"
              },
              "fullDescription": {
                "text": "misra-c2012-8-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullPassedToNonnull",
              "name": "clang-analyzer-nullability.NullPassedToNonnull",
              "shortDescription": {
                "text": "NullPassedToNonnull"
              },
              "fullDescription": {
                "text": "NullPassedToNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-pipe2",
              "name": "android-cloexec-pipe2",
              "shortDescription": {
                "text": "cloexec-pipe2"
              },
              "fullDescription": {
                "text": "cloexec-pipe2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-avoid-c-arrays",
              "name": "hicpp-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-division",
              "name": "abseil-duration-division",
              "shortDescription": {
                "text": "duration-division"
              },
              "fullDescription": {
                "text": "duration-division"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-deprecated-headers",
              "name": "hicpp-deprecated-headers",
              "shortDescription": {
                "text": "deprecated-headers"
              },
              "fullDescription": {
                "text": "deprecated-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-6",
              "name": "clion-misra-cpp2008-5-2-6",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-3",
              "name": "clion-misra-cpp2008-2-13-3",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-global-names-in-headers",
              "name": "google-global-names-in-headers",
              "shortDescription": {
                "text": "global-names-in-headers"
              },
              "fullDescription": {
                "text": "global-names-in-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-random-shuffle",
              "name": "modernize-replace-random-shuffle",
              "shortDescription": {
                "text": "replace-random-shuffle"
              },
              "fullDescription": {
                "text": "replace-random-shuffle"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-access-specifiers",
              "name": "readability-redundant-access-specifiers",
              "shortDescription": {
                "text": "redundant-access-specifiers"
              },
              "fullDescription": {
                "text": "redundant-access-specifiers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.STLAlgorithmModeling",
              "name": "clang-analyzer-alpha.cplusplus.STLAlgorithmModeling",
              "shortDescription": {
                "text": "STLAlgorithmModeling"
              },
              "fullDescription": {
                "text": "STLAlgorithmModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.Chroot",
              "name": "clang-analyzer-alpha.unix.Chroot",
              "shortDescription": {
                "text": "Chroot"
              },
              "fullDescription": {
                "text": "Chroot"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.mkstemp",
              "name": "clang-analyzer-security.insecureAPI.mkstemp",
              "shortDescription": {
                "text": "mkstemp"
              },
              "fullDescription": {
                "text": "mkstemp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc30-c",
              "name": "cert-msc30-c",
              "shortDescription": {
                "text": "msc30-c"
              },
              "fullDescription": {
                "text": "msc30-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-sizeof-container",
              "name": "bugprone-sizeof-container",
              "shortDescription": {
                "text": "sizeof-container"
              },
              "fullDescription": {
                "text": "sizeof-container"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-upgrade-googletest-case",
              "name": "google-upgrade-googletest-case",
              "shortDescription": {
                "text": "upgrade-googletest-case"
              },
              "fullDescription": {
                "text": "upgrade-googletest-case"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-const-return-type",
              "name": "readability-const-return-type",
              "shortDescription": {
                "text": "const-return-type"
              },
              "fullDescription": {
                "text": "const-return-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-pass-by-value",
              "name": "modernize-pass-by-value",
              "shortDescription": {
                "text": "pass-by-value"
              },
              "fullDescription": {
                "text": "pass-by-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-no-namespace",
              "name": "abseil-no-namespace",
              "shortDescription": {
                "text": "no-namespace"
              },
              "fullDescription": {
                "text": "no-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.NewDelete",
              "name": "clang-analyzer-cplusplus.NewDelete",
              "shortDescription": {
                "text": "NewDelete"
              },
              "fullDescription": {
                "text": "NewDelete"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-function-naming",
              "name": "google-objc-function-naming",
              "shortDescription": {
                "text": "objc-function-naming"
              },
              "fullDescription": {
                "text": "objc-function-naming"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop58-cpp",
              "name": "cert-oop58-cpp",
              "shortDescription": {
                "text": "oop58-cpp"
              },
              "fullDescription": {
                "text": "oop58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-10",
              "name": "clion-misra-c2012-8-10",
              "shortDescription": {
                "text": "misra-c2012-8-10"
              },
              "fullDescription": {
                "text": "misra-c2012-8-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NSError",
              "name": "clang-analyzer-osx.cocoa.NSError",
              "shortDescription": {
                "text": "NSError"
              },
              "fullDescription": {
                "text": "NSError"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-c-copy-assignment-signature",
              "name": "cppcoreguidelines-c-copy-assignment-signature",
              "shortDescription": {
                "text": "c-copy-assignment-signature"
              },
              "fullDescription": {
                "text": "c-copy-assignment-signature"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop54-cpp",
              "name": "cert-oop54-cpp",
              "shortDescription": {
                "text": "oop54-cpp"
              },
              "fullDescription": {
                "text": "oop54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-3-2",
              "name": "clion-misra-cpp2008-3-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-3-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-redundant-expression",
              "name": "misc-redundant-expression",
              "shortDescription": {
                "text": "redundant-expression"
              },
              "fullDescription": {
                "text": "redundant-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-swap",
              "name": "performance-noexcept-swap",
              "shortDescription": {
                "text": "noexcept-swap"
              },
              "fullDescription": {
                "text": "noexcept-swap"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-no-internal-dependencies",
              "name": "abseil-no-internal-dependencies",
              "shortDescription": {
                "text": "no-internal-dependencies"
              },
              "fullDescription": {
                "text": "no-internal-dependencies"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-const-params-in-decls",
              "name": "readability-avoid-const-params-in-decls",
              "shortDescription": {
                "text": "avoid-const-params-in-decls"
              },
              "fullDescription": {
                "text": "avoid-const-params-in-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.SecuritySyntaxChecker",
              "name": "clang-analyzer-security.insecureAPI.SecuritySyntaxChecker",
              "shortDescription": {
                "text": "SecuritySyntaxChecker"
              },
              "fullDescription": {
                "text": "SecuritySyntaxChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-super-self",
              "name": "objc-super-self",
              "shortDescription": {
                "text": "super-self"
              },
              "fullDescription": {
                "text": "super-self"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-redundant-strcat-calls",
              "name": "abseil-redundant-strcat-calls",
              "shortDescription": {
                "text": "redundant-strcat-calls"
              },
              "fullDescription": {
                "text": "redundant-strcat-calls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-accept",
              "name": "android-cloexec-accept",
              "shortDescription": {
                "text": "cloexec-accept"
              },
              "fullDescription": {
                "text": "cloexec-accept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-chained-comparison",
              "name": "bugprone-chained-comparison",
              "shortDescription": {
                "text": "chained-comparison"
              },
              "fullDescription": {
                "text": "chained-comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.ClassRelease",
              "name": "clang-analyzer-osx.cocoa.ClassRelease",
              "shortDescription": {
                "text": "ClassRelease"
              },
              "fullDescription": {
                "text": "ClassRelease"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
              "name": "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
              "shortDescription": {
                "text": "NonLocalizedStringChecker"
              },
              "fullDescription": {
                "text": "NonLocalizedStringChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "index": 55,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
              "name": "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
              "shortDescription": {
                "text": "PointerSizedValues"
              },
              "fullDescription": {
                "text": "PointerSizedValues"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "index": 59,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-member-init",
              "name": "hicpp-member-init",
              "shortDescription": {
                "text": "member-init"
              },
              "fullDescription": {
                "text": "member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-flp30-c",
              "name": "cert-flp30-c",
              "shortDescription": {
                "text": "flp30-c"
              },
              "fullDescription": {
                "text": "flp30-c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.Branch",
              "name": "clang-analyzer-core.uninitialized.Branch",
              "shortDescription": {
                "text": "Branch"
              },
              "fullDescription": {
                "text": "Branch"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-trailing-return",
              "name": "fuchsia-trailing-return",
              "shortDescription": {
                "text": "trailing-return"
              },
              "fullDescription": {
                "text": "trailing-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ArrayBound",
              "name": "clang-analyzer-alpha.security.ArrayBound",
              "shortDescription": {
                "text": "ArrayBound"
              },
              "fullDescription": {
                "text": "ArrayBound"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-1",
              "name": "clion-misra-c2012-10-1",
              "shortDescription": {
                "text": "misra-c2012-10-1"
              },
              "fullDescription": {
                "text": "misra-c2012-10-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-5-1",
              "name": "clion-misra-cpp2008-9-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-9-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.VirtualCallModeling",
              "name": "clang-analyzer-cplusplus.VirtualCallModeling",
              "shortDescription": {
                "text": "VirtualCallModeling"
              },
              "fullDescription": {
                "text": "VirtualCallModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-3",
              "name": "clion-misra-cpp2008-18-0-3",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
              "name": "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
              "shortDescription": {
                "text": "OutOfBounds"
              },
              "fullDescription": {
                "text": "OutOfBounds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "index": 59,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
              "name": "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
              "shortDescription": {
                "text": "pro-bounds-array-to-pointer-decay"
              },
              "fullDescription": {
                "text": "pro-bounds-array-to-pointer-decay"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-no-recursion",
              "name": "misc-no-recursion",
              "shortDescription": {
                "text": "no-recursion"
              },
              "fullDescription": {
                "text": "no-recursion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.llvm.ReturnValue",
              "name": "clang-analyzer-apiModeling.llvm.ReturnValue",
              "shortDescription": {
                "text": "ReturnValue"
              },
              "fullDescription": {
                "text": "ReturnValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "index": 32,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-incorrect-enable-if",
              "name": "bugprone-incorrect-enable-if",
              "shortDescription": {
                "text": "incorrect-enable-if"
              },
              "fullDescription": {
                "text": "incorrect-enable-if"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-switch-missing-default-case",
              "name": "bugprone-switch-missing-default-case",
              "shortDescription": {
                "text": "switch-missing-default-case"
              },
              "fullDescription": {
                "text": "switch-missing-default-case"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-11",
              "name": "clion-misra-cpp2008-5-0-11",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-11"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-inline-specifier",
              "name": "readability-redundant-inline-specifier",
              "shortDescription": {
                "text": "redundant-inline-specifier"
              },
              "fullDescription": {
                "text": "redundant-inline-specifier"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-1",
              "name": "clion-misra-c2012-8-1",
              "shortDescription": {
                "text": "misra-c2012-8-1"
              },
              "fullDescription": {
                "text": "misra-c2012-8-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-6-2",
              "name": "clion-misra-c2012-6-2",
              "shortDescription": {
                "text": "misra-c2012-6-2"
              },
              "fullDescription": {
                "text": "misra-c2012-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-non-private-member-variables-in-classes",
              "name": "cppcoreguidelines-non-private-member-variables-in-classes",
              "shortDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "fullDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-1",
              "name": "clion-misra-c2012-15-1",
              "shortDescription": {
                "text": "misra-c2012-15-1"
              },
              "fullDescription": {
                "text": "misra-c2012-15-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-comparison",
              "name": "abseil-duration-comparison",
              "shortDescription": {
                "text": "duration-comparison"
              },
              "fullDescription": {
                "text": "duration-comparison"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-do-while",
              "name": "cppcoreguidelines-avoid-do-while",
              "shortDescription": {
                "text": "avoid-do-while"
              },
              "fullDescription": {
                "text": "avoid-do-while"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-uncaught-exceptions",
              "name": "modernize-use-uncaught-exceptions",
              "shortDescription": {
                "text": "use-uncaught-exceptions"
              },
              "fullDescription": {
                "text": "use-uncaught-exceptions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-memset-usage",
              "name": "bugprone-suspicious-memset-usage",
              "shortDescription": {
                "text": "suspicious-memset-usage"
              },
              "fullDescription": {
                "text": "suspicious-memset-usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl37-c",
              "name": "cert-dcl37-c",
              "shortDescription": {
                "text": "dcl37-c"
              },
              "fullDescription": {
                "text": "dcl37-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.DynamicMemoryModeling",
              "name": "clang-analyzer-unix.DynamicMemoryModeling",
              "shortDescription": {
                "text": "DynamicMemoryModeling"
              },
              "fullDescription": {
                "text": "DynamicMemoryModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc24-c",
              "name": "cert-msc24-c",
              "shortDescription": {
                "text": "msc24-c"
              },
              "fullDescription": {
                "text": "msc24-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-6",
              "name": "clion-misra-c2012-13-6",
              "shortDescription": {
                "text": "misra-c2012-13-6"
              },
              "fullDescription": {
                "text": "misra-c2012-13-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-redundant-branch-condition",
              "name": "bugprone-redundant-branch-condition",
              "shortDescription": {
                "text": "redundant-branch-condition"
              },
              "fullDescription": {
                "text": "redundant-branch-condition"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-5",
              "name": "clion-misra-c2012-12-5",
              "shortDescription": {
                "text": "misra-c2012-12-5"
              },
              "fullDescription": {
                "text": "misra-c2012-12-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-casting-through-void",
              "name": "bugprone-casting-through-void",
              "shortDescription": {
                "text": "casting-through-void"
              },
              "fullDescription": {
                "text": "casting-through-void"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err60-cpp",
              "name": "cert-err60-cpp",
              "shortDescription": {
                "text": "err60-cpp"
              },
              "fullDescription": {
                "text": "err60-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.deadcode.UnreachableCode",
              "name": "clang-analyzer-alpha.deadcode.UnreachableCode",
              "shortDescription": {
                "text": "UnreachableCode"
              },
              "fullDescription": {
                "text": "UnreachableCode"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.deadcode",
                    "index": 60,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NonnilStringConstants",
              "name": "clang-analyzer-core.NonnilStringConstants",
              "shortDescription": {
                "text": "NonnilStringConstants"
              },
              "fullDescription": {
                "text": "NonnilStringConstants"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-macro-usage",
              "name": "cppcoreguidelines-macro-usage",
              "shortDescription": {
                "text": "macro-usage"
              },
              "fullDescription": {
                "text": "macro-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-undelegated-constructor",
              "name": "hicpp-undelegated-constructor",
              "shortDescription": {
                "text": "undelegated-constructor"
              },
              "fullDescription": {
                "text": "undelegated-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.BitwiseShift",
              "name": "clang-analyzer-core.BitwiseShift",
              "shortDescription": {
                "text": "BitwiseShift"
              },
              "fullDescription": {
                "text": "BitwiseShift"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-new-delete-overloads",
              "name": "misc-new-delete-overloads",
              "shortDescription": {
                "text": "new-delete-overloads"
              },
              "fullDescription": {
                "text": "new-delete-overloads"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-5-2",
              "name": "clion-misra-cpp2008-4-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-4-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-4",
              "name": "clion-misra-c2012-13-4",
              "shortDescription": {
                "text": "misra-c2012-13-4"
              },
              "fullDescription": {
                "text": "misra-c2012-13-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.NoUncountedMemberChecker",
              "name": "clang-analyzer-webkit.NoUncountedMemberChecker",
              "shortDescription": {
                "text": "NoUncountedMemberChecker"
              },
              "fullDescription": {
                "text": "NoUncountedMemberChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp-use-default-none",
              "name": "openmp-use-default-none",
              "shortDescription": {
                "text": "use-default-none"
              },
              "fullDescription": {
                "text": "use-default-none"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "index": 57,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-5",
              "name": "clion-misra-cpp2008-6-6-5",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-forwarding-reference-overload",
              "name": "bugprone-forwarding-reference-overload",
              "shortDescription": {
                "text": "forwarding-reference-overload"
              },
              "fullDescription": {
                "text": "forwarding-reference-overload"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-incorrect-roundings",
              "name": "bugprone-incorrect-roundings",
              "shortDescription": {
                "text": "incorrect-roundings"
              },
              "fullDescription": {
                "text": "incorrect-roundings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-duplicate-include",
              "name": "readability-duplicate-include",
              "shortDescription": {
                "text": "duplicate-include"
              },
              "fullDescription": {
                "text": "duplicate-include"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-5",
              "name": "clion-misra-c2012-15-5",
              "shortDescription": {
                "text": "misra-c2012-15-5"
              },
              "fullDescription": {
                "text": "misra-c2012-15-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-use-anonymous-namespace",
              "name": "misc-use-anonymous-namespace",
              "shortDescription": {
                "text": "use-anonymous-namespace"
              },
              "fullDescription": {
                "text": "use-anonymous-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-transparent-functors",
              "name": "modernize-use-transparent-functors",
              "shortDescription": {
                "text": "use-transparent-functors"
              },
              "fullDescription": {
                "text": "use-transparent-functors"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-pointer-arithmetic-in-alloc",
              "name": "bugprone-misplaced-pointer-arithmetic-in-alloc",
              "shortDescription": {
                "text": "misplaced-pointer-arithmetic-in-alloc"
              },
              "fullDescription": {
                "text": "misplaced-pointer-arithmetic-in-alloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.DirectIvarAssignment",
              "name": "clang-analyzer-alpha.osx.cocoa.DirectIvarAssignment",
              "shortDescription": {
                "text": "DirectIvarAssignment"
              },
              "fullDescription": {
                "text": "DirectIvarAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err09-cpp",
              "name": "cert-err09-cpp",
              "shortDescription": {
                "text": "err09-cpp"
              },
              "fullDescription": {
                "text": "err09-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-macro-repeated-side-effects",
              "name": "bugprone-macro-repeated-side-effects",
              "shortDescription": {
                "text": "macro-repeated-side-effects"
              },
              "fullDescription": {
                "text": "macro-repeated-side-effects"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-10-2",
              "name": "clion-misra-cpp2008-4-10-2",
              "shortDescription": {
                "text": "misra-cpp2008-4-10-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-10-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-flp37-c",
              "name": "cert-flp37-c",
              "shortDescription": {
                "text": "flp37-c"
              },
              "fullDescription": {
                "text": "flp37-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.RefCntblBaseVirtualDtor",
              "name": "clang-analyzer-webkit.RefCntblBaseVirtualDtor",
              "shortDescription": {
                "text": "RefCntblBaseVirtualDtor"
              },
              "fullDescription": {
                "text": "RefCntblBaseVirtualDtor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-13",
              "name": "clion-misra-cpp2008-5-0-13",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-13"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-13"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.builtin.BuiltinFunctions",
              "name": "clang-analyzer-core.builtin.BuiltinFunctions",
              "shortDescription": {
                "text": "BuiltinFunctions"
              },
              "fullDescription": {
                "text": "BuiltinFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "index": 36,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.ObjCGenerics",
              "name": "clang-analyzer-osx.cocoa.ObjCGenerics",
              "shortDescription": {
                "text": "ObjCGenerics"
              },
              "fullDescription": {
                "text": "ObjCGenerics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-simd-intrinsics",
              "name": "portability-simd-intrinsics",
              "shortDescription": {
                "text": "simd-intrinsics"
              },
              "fullDescription": {
                "text": "simd-intrinsics"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc51-cpp",
              "name": "cert-msc51-cpp",
              "shortDescription": {
                "text": "msc51-cpp"
              },
              "fullDescription": {
                "text": "msc51-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-non-const-global-variables",
              "name": "cppcoreguidelines-avoid-non-const-global-variables",
              "shortDescription": {
                "text": "avoid-non-const-global-variables"
              },
              "fullDescription": {
                "text": "avoid-non-const-global-variables"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-19",
              "name": "clion-misra-cpp2008-5-0-19",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-19"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-19"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-12",
              "name": "clion-misra-cpp2008-5-2-12",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-12"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-explicit-make-pair",
              "name": "google-build-explicit-make-pair",
              "shortDescription": {
                "text": "build-explicit-make-pair"
              },
              "fullDescription": {
                "text": "build-explicit-make-pair"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-addition",
              "name": "abseil-duration-addition",
              "shortDescription": {
                "text": "duration-addition"
              },
              "fullDescription": {
                "text": "duration-addition"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.OSObjectCStyleCast",
              "name": "clang-analyzer-optin.osx.OSObjectCStyleCast",
              "shortDescription": {
                "text": "OSObjectCStyleCast"
              },
              "fullDescription": {
                "text": "OSObjectCStyleCast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx",
                    "index": 61,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-using-namespace",
              "name": "google-build-using-namespace",
              "shortDescription": {
                "text": "build-using-namespace"
              },
              "fullDescription": {
                "text": "build-using-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-todo",
              "name": "google-readability-todo",
              "shortDescription": {
                "text": "readability-todo"
              },
              "fullDescription": {
                "text": "readability-todo"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-disallow-copy-and-assign-macro",
              "name": "modernize-replace-disallow-copy-and-assign-macro",
              "shortDescription": {
                "text": "replace-disallow-copy-and-assign-macro"
              },
              "fullDescription": {
                "text": "replace-disallow-copy-and-assign-macro"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-else-after-return",
              "name": "readability-else-after-return",
              "shortDescription": {
                "text": "else-after-return"
              },
              "fullDescription": {
                "text": "else-after-return"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-function-size",
              "name": "readability-function-size",
              "shortDescription": {
                "text": "function-size"
              },
              "fullDescription": {
                "text": "function 'os_libc_printf' exceeds recommended size/complexity thresholds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-stringview-nullptr",
              "name": "bugprone-stringview-nullptr",
              "shortDescription": {
                "text": "stringview-nullptr"
              },
              "fullDescription": {
                "text": "stringview-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc32-c",
              "name": "cert-msc32-c",
              "shortDescription": {
                "text": "msc32-c"
              },
              "fullDescription": {
                "text": "msc32-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err34-c",
              "name": "cert-err34-c",
              "shortDescription": {
                "text": "err34-c"
              },
              "fullDescription": {
                "text": "err34-c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Errno",
              "name": "clang-analyzer-unix.Errno",
              "shortDescription": {
                "text": "Errno"
              },
              "fullDescription": {
                "text": "Errno"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-3",
              "name": "clion-misra-c2012-11-3",
              "shortDescription": {
                "text": "misra-c2012-11-3"
              },
              "fullDescription": {
                "text": "misra-c2012-11-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-magic-numbers",
              "name": "cppcoreguidelines-avoid-magic-numbers",
              "shortDescription": {
                "text": "avoid-magic-numbers"
              },
              "fullDescription": {
                "text": "avoid-magic-numbers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unhandled-self-assignment",
              "name": "bugprone-unhandled-self-assignment",
              "shortDescription": {
                "text": "unhandled-self-assignment"
              },
              "fullDescription": {
                "text": "unhandled-self-assignment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-simplify-boolean-expr",
              "name": "readability-simplify-boolean-expr",
              "shortDescription": {
                "text": "simplify-boolean-expr"
              },
              "fullDescription": {
                "text": "simplify-boolean-expr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-open",
              "name": "android-cloexec-open",
              "shortDescription": {
                "text": "cloexec-open"
              },
              "fullDescription": {
                "text": "cloexec-open"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.IvarInvalidationModeling",
              "name": "clang-analyzer-alpha.osx.cocoa.IvarInvalidationModeling",
              "shortDescription": {
                "text": "IvarInvalidationModeling"
              },
              "fullDescription": {
                "text": "IvarInvalidationModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-forward-declaration-namespace",
              "name": "bugprone-forward-declaration-namespace",
              "shortDescription": {
                "text": "forward-declaration-namespace"
              },
              "fullDescription": {
                "text": "forward-declaration-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-subtraction",
              "name": "abseil-duration-subtraction",
              "shortDescription": {
                "text": "duration-subtraction"
              },
              "fullDescription": {
                "text": "duration-subtraction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-no-malloc",
              "name": "cppcoreguidelines-no-malloc",
              "shortDescription": {
                "text": "no-malloc"
              },
              "fullDescription": {
                "text": "no-malloc"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.StackAddressEscape",
              "name": "clang-analyzer-core.StackAddressEscape",
              "shortDescription": {
                "text": "StackAddressEscape"
              },
              "fullDescription": {
                "text": "StackAddressEscape"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PthreadLockBase",
              "name": "clang-analyzer-alpha.core.PthreadLockBase",
              "shortDescription": {
                "text": "PthreadLockBase"
              },
              "fullDescription": {
                "text": "PthreadLockBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-return-braced-init-list",
              "name": "modernize-return-braced-init-list",
              "shortDescription": {
                "text": "return-braced-init-list"
              },
              "fullDescription": {
                "text": "return-braced-init-list"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.UnusedIvars",
              "name": "clang-analyzer-osx.cocoa.UnusedIvars",
              "shortDescription": {
                "text": "UnusedIvars"
              },
              "fullDescription": {
                "text": "UnusedIvars"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multi-level-implicit-pointer-conversion",
              "name": "bugprone-multi-level-implicit-pointer-conversion",
              "shortDescription": {
                "text": "multi-level-implicit-pointer-conversion"
              },
              "fullDescription": {
                "text": "multi-level-implicit-pointer-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.InnerPointer",
              "name": "clang-analyzer-cplusplus.InnerPointer",
              "shortDescription": {
                "text": "InnerPointer"
              },
              "fullDescription": {
                "text": "InnerPointer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.vfork",
              "name": "clang-analyzer-security.insecureAPI.vfork",
              "shortDescription": {
                "text": "vfork"
              },
              "fullDescription": {
                "text": "vfork"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.MismatchedIterator",
              "name": "clang-analyzer-alpha.cplusplus.MismatchedIterator",
              "shortDescription": {
                "text": "MismatchedIterator"
              },
              "fullDescription": {
                "text": "MismatchedIterator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-1-3",
              "name": "clion-misra-cpp2008-15-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-15-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-macro-to-enum",
              "name": "cppcoreguidelines-macro-to-enum",
              "shortDescription": {
                "text": "macro-to-enum"
              },
              "fullDescription": {
                "text": "macro-to-enum"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-twine-local",
              "name": "llvm-twine-local",
              "shortDescription": {
                "text": "twine-local"
              },
              "fullDescription": {
                "text": "twine-local"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-macro-parentheses",
              "name": "bugprone-macro-parentheses",
              "shortDescription": {
                "text": "macro-parentheses"
              },
              "fullDescription": {
                "text": "macro-parentheses"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFNumber",
              "name": "clang-analyzer-osx.coreFoundation.CFNumber",
              "shortDescription": {
                "text": "CFNumber"
              },
              "fullDescription": {
                "text": "CFNumber"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-unroll-loops",
              "name": "altera-unroll-loops",
              "shortDescription": {
                "text": "unroll-loops"
              },
              "fullDescription": {
                "text": "unroll-loops"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-virtual-inheritance",
              "name": "fuchsia-virtual-inheritance",
              "shortDescription": {
                "text": "virtual-inheritance"
              },
              "fullDescription": {
                "text": "virtual-inheritance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-destructor",
              "name": "performance-noexcept-destructor",
              "shortDescription": {
                "text": "noexcept-destructor"
              },
              "fullDescription": {
                "text": "noexcept-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-10",
              "name": "clion-misra-c2012-21-10",
              "shortDescription": {
                "text": "misra-c2012-21-10"
              },
              "fullDescription": {
                "text": "misra-c2012-21-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-14",
              "name": "clion-misra-c2012-8-14",
              "shortDescription": {
                "text": "misra-c2012-8-14"
              },
              "fullDescription": {
                "text": "misra-c2012-8-14"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-not-null-terminated-result",
              "name": "bugprone-not-null-terminated-result",
              "shortDescription": {
                "text": "not-null-terminated-result"
              },
              "fullDescription": {
                "text": "not-null-terminated-result"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.SmartPtr",
              "name": "clang-analyzer-alpha.cplusplus.SmartPtr",
              "shortDescription": {
                "text": "SmartPtr"
              },
              "fullDescription": {
                "text": "SmartPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.UncheckedReturn",
              "name": "clang-analyzer-security.insecureAPI.UncheckedReturn",
              "shortDescription": {
                "text": "UncheckedReturn"
              },
              "fullDescription": {
                "text": "UncheckedReturn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-callee-namespace",
              "name": "llvmlibc-callee-namespace",
              "shortDescription": {
                "text": "callee-namespace"
              },
              "fullDescription": {
                "text": "callee-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-avoid-nserror-init",
              "name": "objc-avoid-nserror-init",
              "shortDescription": {
                "text": "avoid-nserror-init"
              },
              "fullDescription": {
                "text": "avoid-nserror-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.BoolAssignment",
              "name": "clang-analyzer-alpha.core.BoolAssignment",
              "shortDescription": {
                "text": "BoolAssignment"
              },
              "fullDescription": {
                "text": "BoolAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PointerSub",
              "name": "clang-analyzer-alpha.core.PointerSub",
              "shortDescription": {
                "text": "PointerSub"
              },
              "fullDescription": {
                "text": "PointerSub"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-default-arguments-declarations",
              "name": "fuchsia-default-arguments-declarations",
              "shortDescription": {
                "text": "default-arguments-declarations"
              },
              "fullDescription": {
                "text": "default-arguments-declarations"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-semicolon",
              "name": "bugprone-suspicious-semicolon",
              "shortDescription": {
                "text": "suspicious-semicolon"
              },
              "fullDescription": {
                "text": "suspicious-semicolon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-5",
              "name": "clion-misra-c2012-13-5",
              "shortDescription": {
                "text": "misra-c2012-13-5"
              },
              "fullDescription": {
                "text": "misra-c2012-13-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-branch-clone",
              "name": "bugprone-branch-clone",
              "shortDescription": {
                "text": "branch-clone"
              },
              "fullDescription": {
                "text": "branch-clone"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-fold-init-type",
              "name": "bugprone-fold-init-type",
              "shortDescription": {
                "text": "fold-init-type"
              },
              "fullDescription": {
                "text": "fold-init-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl03-c",
              "name": "cert-dcl03-c",
              "shortDescription": {
                "text": "dcl03-c"
              },
              "fullDescription": {
                "text": "dcl03-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullabilityBase",
              "name": "clang-analyzer-nullability.NullabilityBase",
              "shortDescription": {
                "text": "NullabilityBase"
              },
              "fullDescription": {
                "text": "NullabilityBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-macro-to-enum",
              "name": "modernize-macro-to-enum",
              "shortDescription": {
                "text": "macro-to-enum"
              },
              "fullDescription": {
                "text": "macro-to-enum"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-4",
              "name": "clion-misra-cpp2008-2-13-4",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.BlockInCriticalSection",
              "name": "clang-analyzer-alpha.unix.BlockInCriticalSection",
              "shortDescription": {
                "text": "BlockInCriticalSection"
              },
              "fullDescription": {
                "text": "BlockInCriticalSection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-init-variables",
              "name": "cppcoreguidelines-init-variables",
              "shortDescription": {
                "text": "init-variables"
              },
              "fullDescription": {
                "text": "init-variables"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-no-int-to-ptr",
              "name": "performance-no-int-to-ptr",
              "shortDescription": {
                "text": "no-int-to-ptr"
              },
              "fullDescription": {
                "text": "no-int-to-ptr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-argument-selection-defects",
              "name": "clion-argument-selection-defects",
              "shortDescription": {
                "text": "argument-selection-defects"
              },
              "fullDescription": {
                "text": "argument-selection-defects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-assignment-in-if-condition",
              "name": "bugprone-assignment-in-if-condition",
              "shortDescription": {
                "text": "assignment-in-if-condition"
              },
              "fullDescription": {
                "text": "assignment-in-if-condition"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-undelegated-constructor",
              "name": "bugprone-undelegated-constructor",
              "shortDescription": {
                "text": "undelegated-constructor"
              },
              "fullDescription": {
                "text": "undelegated-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-terminating-continue",
              "name": "bugprone-terminating-continue",
              "shortDescription": {
                "text": "terminating-continue"
              },
              "fullDescription": {
                "text": "terminating-continue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.CastSize",
              "name": "clang-analyzer-alpha.core.CastSize",
              "shortDescription": {
                "text": "CastSize"
              },
              "fullDescription": {
                "text": "CastSize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.NotNullTerminated",
              "name": "clang-analyzer-alpha.unix.cstring.NotNullTerminated",
              "shortDescription": {
                "text": "NotNullTerminated"
              },
              "fullDescription": {
                "text": "NotNullTerminated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-2",
              "name": "clion-misra-c2012-7-2",
              "shortDescription": {
                "text": "misra-c2012-7-2"
              },
              "fullDescription": {
                "text": "misra-c2012-7-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.rand",
              "name": "clang-analyzer-security.insecureAPI.rand",
              "shortDescription": {
                "text": "rand"
              },
              "fullDescription": {
                "text": "rand"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-inotify-init1",
              "name": "android-cloexec-inotify-init1",
              "shortDescription": {
                "text": "cloexec-inotify-init1"
              },
              "fullDescription": {
                "text": "cloexec-inotify-init1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-operator-in-strlen-in-alloc",
              "name": "bugprone-misplaced-operator-in-strlen-in-alloc",
              "shortDescription": {
                "text": "misplaced-operator-in-strlen-in-alloc"
              },
              "fullDescription": {
                "text": "misplaced-operator-in-strlen-in-alloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-6",
              "name": "clion-misra-cpp2008-6-4-6",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misleading-bidirectional",
              "name": "misc-misleading-bidirectional",
              "shortDescription": {
                "text": "misleading-bidirectional"
              },
              "fullDescription": {
                "text": "misleading-bidirectional"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-6-1",
              "name": "clion-misra-c2012-6-1",
              "shortDescription": {
                "text": "misra-c2012-6-1"
              },
              "fullDescription": {
                "text": "misra-c2012-6-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-10",
              "name": "clion-misra-cpp2008-5-2-10",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-10"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.AtSync",
              "name": "clang-analyzer-osx.cocoa.AtSync",
              "shortDescription": {
                "text": "AtSync"
              },
              "fullDescription": {
                "text": "AtSync"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-unnecessary-copy-initialization",
              "name": "performance-unnecessary-copy-initialization",
              "shortDescription": {
                "text": "unnecessary-copy-initialization"
              },
              "fullDescription": {
                "text": "unnecessary-copy-initialization"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PointerArithm",
              "name": "clang-analyzer-alpha.core.PointerArithm",
              "shortDescription": {
                "text": "PointerArithm"
              },
              "fullDescription": {
                "text": "PointerArithm"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-faster-string-find",
              "name": "performance-faster-string-find",
              "shortDescription": {
                "text": "faster-string-find"
              },
              "fullDescription": {
                "text": "faster-string-find"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-1-2",
              "name": "clion-misra-cpp2008-3-1-2",
              "shortDescription": {
                "text": "misra-cpp2008-3-1-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-1-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-rvalue-reference-param-not-moved",
              "name": "cppcoreguidelines-rvalue-reference-param-not-moved",
              "shortDescription": {
                "text": "rvalue-reference-param-not-moved"
              },
              "fullDescription": {
                "text": "rvalue-reference-param-not-moved"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-sizeof-expression",
              "name": "bugprone-sizeof-expression",
              "shortDescription": {
                "text": "sizeof-expression"
              },
              "fullDescription": {
                "text": "sizeof-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-9-3",
              "name": "clion-misra-c2012-9-3",
              "shortDescription": {
                "text": "misra-c2012-9-3"
              },
              "fullDescription": {
                "text": "misra-c2012-9-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.DeleteWithNonVirtualDtor",
              "name": "clang-analyzer-alpha.cplusplus.DeleteWithNonVirtualDtor",
              "shortDescription": {
                "text": "DeleteWithNonVirtualDtor"
              },
              "fullDescription": {
                "text": "DeleteWithNonVirtualDtor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-9-5",
              "name": "clion-misra-c2012-9-5",
              "shortDescription": {
                "text": "misra-c2012-9-5"
              },
              "fullDescription": {
                "text": "misra-c2012-9-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-11",
              "name": "clion-misra-cpp2008-5-2-11",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-11"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-3",
              "name": "clion-misra-cpp2008-5-3-3",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-use-after-move",
              "name": "bugprone-use-after-move",
              "shortDescription": {
                "text": "use-after-move"
              },
              "fullDescription": {
                "text": "use-after-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullablePassedToNonnull",
              "name": "clang-analyzer-nullability.NullablePassedToNonnull",
              "shortDescription": {
                "text": "NullablePassedToNonnull"
              },
              "fullDescription": {
                "text": "NullablePassedToNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-stringview-data-usage",
              "name": "bugprone-suspicious-stringview-data-usage",
              "shortDescription": {
                "text": "suspicious-stringview-data-usage"
              },
              "fullDescription": {
                "text": "suspicious-stringview-data-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.NewDeleteLeaks",
              "name": "clang-analyzer-cplusplus.NewDeleteLeaks",
              "shortDescription": {
                "text": "NewDeleteLeaks"
              },
              "fullDescription": {
                "text": "NewDeleteLeaks"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.Loops",
              "name": "clang-analyzer-osx.cocoa.Loops",
              "shortDescription": {
                "text": "Loops"
              },
              "fullDescription": {
                "text": "Loops"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.NullArg",
              "name": "clang-analyzer-unix.cstring.NullArg",
              "shortDescription": {
                "text": "NullArg"
              },
              "fullDescription": {
                "text": "NullArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-3",
              "name": "clion-misra-c2012-12-3",
              "shortDescription": {
                "text": "misra-c2012-12-3"
              },
              "fullDescription": {
                "text": "misra-c2012-12-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-1",
              "name": "clion-misra-cpp2008-2-13-1",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-6",
              "name": "clion-misra-c2012-16-6",
              "shortDescription": {
                "text": "misra-c2012-16-6"
              },
              "fullDescription": {
                "text": "misra-c2012-16-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
              "name": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
              "shortDescription": {
                "text": "DeprecatedOrUnsafeBufferHandling"
              },
              "fullDescription": {
                "text": "DeprecatedOrUnsafeBufferHandling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-4",
              "name": "clion-misra-c2012-11-4",
              "shortDescription": {
                "text": "misra-c2012-11-4"
              },
              "fullDescription": {
                "text": "misra-c2012-11-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-str-cat-append",
              "name": "abseil-str-cat-append",
              "shortDescription": {
                "text": "str-cat-append"
              },
              "fullDescription": {
                "text": "str-cat-append"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bzero",
              "name": "clang-analyzer-security.insecureAPI.bzero",
              "shortDescription": {
                "text": "bzero"
              },
              "fullDescription": {
                "text": "bzero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-definitions-in-headers",
              "name": "misc-definitions-in-headers",
              "shortDescription": {
                "text": "definitions-in-headers"
              },
              "fullDescription": {
                "text": "definitions-in-headers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-8",
              "name": "clion-misra-cpp2008-6-4-8",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-8"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-5",
              "name": "clion-misra-cpp2008-6-4-5",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.OutOfBounds",
              "name": "clang-analyzer-alpha.unix.cstring.OutOfBounds",
              "shortDescription": {
                "text": "OutOfBounds"
              },
              "fullDescription": {
                "text": "OutOfBounds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-restrict-system-includes",
              "name": "portability-restrict-system-includes",
              "shortDescription": {
                "text": "restrict-system-includes"
              },
              "fullDescription": {
                "text": "restrict-system-includes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multiple-statement-macro",
              "name": "bugprone-multiple-statement-macro",
              "shortDescription": {
                "text": "multiple-statement-macro"
              },
              "fullDescription": {
                "text": "multiple-statement-macro"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-make-member-function-const",
              "name": "readability-make-member-function-const",
              "shortDescription": {
                "text": "make-member-function-const"
              },
              "fullDescription": {
                "text": "make-member-function-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-4-3",
              "name": "clion-misra-c2012-4-3",
              "shortDescription": {
                "text": "misra-c2012-4-3"
              },
              "fullDescription": {
                "text": "misra-c2012-4-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-special-member-functions",
              "name": "cppcoreguidelines-special-member-functions",
              "shortDescription": {
                "text": "special-member-functions"
              },
              "fullDescription": {
                "text": "special-member-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-namespace-comment",
              "name": "llvm-namespace-comment",
              "shortDescription": {
                "text": "namespace-comment"
              },
              "fullDescription": {
                "text": "namespace-comment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-algorithm",
              "name": "performance-inefficient-algorithm",
              "shortDescription": {
                "text": "inefficient-algorithm"
              },
              "fullDescription": {
                "text": "inefficient-algorithm"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-14-1",
              "name": "clion-misra-cpp2008-5-14-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-14-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-14-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-type-traits",
              "name": "modernize-type-traits",
              "shortDescription": {
                "text": "type-traits"
              },
              "fullDescription": {
                "text": "type-traits"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-size-empty",
              "name": "readability-container-size-empty",
              "shortDescription": {
                "text": "container-size-empty"
              },
              "fullDescription": {
                "text": "container-size-empty"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-2-1",
              "name": "clion-misra-cpp2008-18-2-1",
              "shortDescription": {
                "text": "misra-cpp2008-18-2-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-2-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-braces-around-statements",
              "name": "hicpp-braces-around-statements",
              "shortDescription": {
                "text": "braces-around-statements"
              },
              "fullDescription": {
                "text": "braces-around-statements"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-implicit-bool-conversion",
              "name": "readability-implicit-bool-conversion",
              "shortDescription": {
                "text": "implicit-bool-conversion"
              },
              "fullDescription": {
                "text": "implicit-bool-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-raii",
              "name": "bugprone-unused-raii",
              "shortDescription": {
                "text": "unused-raii"
              },
              "fullDescription": {
                "text": "unused-raii"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-operators-representation",
              "name": "readability-operators-representation",
              "shortDescription": {
                "text": "operators-representation"
              },
              "fullDescription": {
                "text": "operators-representation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.Stream",
              "name": "clang-analyzer-alpha.unix.Stream",
              "shortDescription": {
                "text": "Stream"
              },
              "fullDescription": {
                "text": "Stream"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-4",
              "name": "clion-misra-cpp2008-18-0-4",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-standalone-empty",
              "name": "bugprone-standalone-empty",
              "shortDescription": {
                "text": "standalone-empty"
              },
              "fullDescription": {
                "text": "standalone-empty"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-emplace",
              "name": "hicpp-use-emplace",
              "shortDescription": {
                "text": "use-emplace"
              },
              "fullDescription": {
                "text": "use-emplace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-virtual-near-miss",
              "name": "bugprone-virtual-near-miss",
              "shortDescription": {
                "text": "virtual-near-miss"
              },
              "fullDescription": {
                "text": "virtual-near-miss"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-function-size",
              "name": "hicpp-function-size",
              "shortDescription": {
                "text": "function-size"
              },
              "fullDescription": {
                "text": "function-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.getpw",
              "name": "clang-analyzer-security.insecureAPI.getpw",
              "shortDescription": {
                "text": "getpw"
              },
              "fullDescription": {
                "text": "getpw"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-fopen",
              "name": "android-cloexec-fopen",
              "shortDescription": {
                "text": "cloexec-fopen"
              },
              "fullDescription": {
                "text": "cloexec-fopen"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.StdVariant",
              "name": "clang-analyzer-alpha.core.StdVariant",
              "shortDescription": {
                "text": "StdVariant"
              },
              "fullDescription": {
                "text": "StdVariant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-static-accessed-through-instance",
              "name": "readability-static-accessed-through-instance",
              "shortDescription": {
                "text": "static-accessed-through-instance"
              },
              "fullDescription": {
                "text": "static-accessed-through-instance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-creat",
              "name": "android-cloexec-creat",
              "shortDescription": {
                "text": "cloexec-creat"
              },
              "fullDescription": {
                "text": "cloexec-creat"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.cert.pos.34c",
              "name": "clang-analyzer-alpha.security.cert.pos.34c",
              "shortDescription": {
                "text": "34c"
              },
              "fullDescription": {
                "text": "34c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.cert.pos",
                    "index": 62,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.IteratorModeling",
              "name": "clang-analyzer-alpha.cplusplus.IteratorModeling",
              "shortDescription": {
                "text": "IteratorModeling"
              },
              "fullDescription": {
                "text": "IteratorModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.mktemp",
              "name": "clang-analyzer-security.insecureAPI.mktemp",
              "shortDescription": {
                "text": "mktemp"
              },
              "fullDescription": {
                "text": "mktemp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.MissingInvalidationMethod",
              "name": "clang-analyzer-alpha.osx.cocoa.MissingInvalidationMethod",
              "shortDescription": {
                "text": "MissingInvalidationMethod"
              },
              "fullDescription": {
                "text": "MissingInvalidationMethod"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NilArg",
              "name": "clang-analyzer-osx.cocoa.NilArg",
              "shortDescription": {
                "text": "NilArg"
              },
              "fullDescription": {
                "text": "NilArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc33-c",
              "name": "cert-msc33-c",
              "shortDescription": {
                "text": "msc33-c"
              },
              "fullDescription": {
                "text": "msc33-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-4",
              "name": "clion-misra-cpp2008-5-3-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-coroutine-hostile-raii",
              "name": "misc-coroutine-hostile-raii",
              "shortDescription": {
                "text": "coroutine-hostile-raii"
              },
              "fullDescription": {
                "text": "coroutine-hostile-raii"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-starts-ends-with",
              "name": "modernize-use-starts-ends-with",
              "shortDescription": {
                "text": "use-starts-ends-with"
              },
              "fullDescription": {
                "text": "use-starts-ends-with"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-magic-numbers",
              "name": "readability-magic-numbers",
              "shortDescription": {
                "text": "magic-numbers"
              },
              "fullDescription": {
                "text": "6 is a magic number; consider replacing it with a named constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-non-const-parameter",
              "name": "readability-non-const-parameter",
              "shortDescription": {
                "text": "non-const-parameter"
              },
              "fullDescription": {
                "text": "non-const-parameter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-member-init",
              "name": "readability-redundant-member-init",
              "shortDescription": {
                "text": "redundant-member-init"
              },
              "fullDescription": {
                "text": "redundant-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-auto",
              "name": "hicpp-use-auto",
              "shortDescription": {
                "text": "use-auto"
              },
              "fullDescription": {
                "text": "use-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-special-member-functions",
              "name": "hicpp-special-member-functions",
              "shortDescription": {
                "text": "special-member-functions"
              },
              "fullDescription": {
                "text": "special-member-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-18-1",
              "name": "clion-misra-cpp2008-5-18-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-18-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-18-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-replace-enable-if",
              "name": "clion-replace-enable-if",
              "shortDescription": {
                "text": "replace-enable-if"
              },
              "fullDescription": {
                "text": "replace-enable-if"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-noexcept",
              "name": "modernize-use-noexcept",
              "shortDescription": {
                "text": "use-noexcept"
              },
              "fullDescription": {
                "text": "use-noexcept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-explicit-virtual-functions",
              "name": "cppcoreguidelines-explicit-virtual-functions",
              "shortDescription": {
                "text": "explicit-virtual-functions"
              },
              "fullDescription": {
                "text": "explicit-virtual-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-named-parameter",
              "name": "hicpp-named-parameter",
              "shortDescription": {
                "text": "named-parameter"
              },
              "fullDescription": {
                "text": "named-parameter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.cplusplus.VirtualCall",
              "name": "clang-analyzer-optin.cplusplus.VirtualCall",
              "shortDescription": {
                "text": "VirtualCall"
              },
              "fullDescription": {
                "text": "VirtualCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "index": 63,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.BufferOverlap",
              "name": "clang-analyzer-alpha.unix.cstring.BufferOverlap",
              "shortDescription": {
                "text": "BufferOverlap"
              },
              "fullDescription": {
                "text": "BufferOverlap"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.TrustNonnull",
              "name": "clang-analyzer-apiModeling.TrustNonnull",
              "shortDescription": {
                "text": "TrustNonnull"
              },
              "fullDescription": {
                "text": "TrustNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-22-5",
              "name": "clion-misra-c2012-22-5",
              "shortDescription": {
                "text": "misra-c2012-22-5"
              },
              "fullDescription": {
                "text": "misra-c2012-22-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.TrustReturnsNonnull",
              "name": "clang-analyzer-apiModeling.TrustReturnsNonnull",
              "shortDescription": {
                "text": "TrustReturnsNonnull"
              },
              "fullDescription": {
                "text": "TrustReturnsNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-c-arrays",
              "name": "cppcoreguidelines-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-include",
              "name": "bugprone-suspicious-include",
              "shortDescription": {
                "text": "suspicious-include"
              },
              "fullDescription": {
                "text": "suspicious-include"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-make-unique",
              "name": "modernize-make-unique",
              "shortDescription": {
                "text": "make-unique"
              },
              "fullDescription": {
                "text": "make-unique"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-5-1",
              "name": "clion-misra-cpp2008-4-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-4-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-4",
              "name": "clion-misra-c2012-18-4",
              "shortDescription": {
                "text": "misra-c2012-18-4"
              },
              "fullDescription": {
                "text": "misra-c2012-18-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-new-delete-operators",
              "name": "hicpp-new-delete-operators",
              "shortDescription": {
                "text": "new-delete-operators"
              },
              "fullDescription": {
                "text": "new-delete-operators"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.ValistBase",
              "name": "clang-analyzer-valist.ValistBase",
              "shortDescription": {
                "text": "ValistBase"
              },
              "fullDescription": {
                "text": "ValistBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-19-2",
              "name": "clion-misra-c2012-19-2",
              "shortDescription": {
                "text": "misra-c2012-19-2"
              },
              "fullDescription": {
                "text": "misra-c2012-19-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-uppercase-literal-suffix",
              "name": "readability-uppercase-literal-suffix",
              "shortDescription": {
                "text": "uppercase-literal-suffix"
              },
              "fullDescription": {
                "text": "uppercase-literal-suffix"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.CastToStruct",
              "name": "clang-analyzer-alpha.core.CastToStruct",
              "shortDescription": {
                "text": "CastToStruct"
              },
              "fullDescription": {
                "text": "CastToStruct"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-missing-hash",
              "name": "objc-missing-hash",
              "shortDescription": {
                "text": "missing-hash"
              },
              "fullDescription": {
                "text": "missing-hash"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-property-declaration",
              "name": "objc-property-declaration",
              "shortDescription": {
                "text": "property-declaration"
              },
              "fullDescription": {
                "text": "property-declaration"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-loop-convert",
              "name": "modernize-loop-convert",
              "shortDescription": {
                "text": "loop-convert"
              },
              "fullDescription": {
                "text": "loop-convert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.Conversion",
              "name": "clang-analyzer-alpha.core.Conversion",
              "shortDescription": {
                "text": "Conversion"
              },
              "fullDescription": {
                "text": "Conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-3",
              "name": "clion-misra-cpp2008-6-5-3",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.Unterminated",
              "name": "clang-analyzer-valist.Unterminated",
              "shortDescription": {
                "text": "Unterminated"
              },
              "fullDescription": {
                "text": "Unterminated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-casting",
              "name": "google-readability-casting",
              "shortDescription": {
                "text": "readability-casting"
              },
              "fullDescription": {
                "text": "readability-casting"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-suspicious-call-argument",
              "name": "readability-suspicious-call-argument",
              "shortDescription": {
                "text": "suspicious-call-argument"
              },
              "fullDescription": {
                "text": "suspicious-call-argument"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-default-arguments",
              "name": "google-default-arguments",
              "shortDescription": {
                "text": "default-arguments"
              },
              "fullDescription": {
                "text": "default-arguments"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-uniqueptr-delete-release",
              "name": "readability-uniqueptr-delete-release",
              "shortDescription": {
                "text": "uniqueptr-delete-release"
              },
              "fullDescription": {
                "text": "uniqueptr-delete-release"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-avoid-endl",
              "name": "performance-avoid-endl",
              "shortDescription": {
                "text": "avoid-endl"
              },
              "fullDescription": {
                "text": "avoid-endl"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-6",
              "name": "clion-misra-cpp2008-5-0-6",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-trailing-return-type",
              "name": "modernize-use-trailing-return-type",
              "shortDescription": {
                "text": "use-trailing-return-type"
              },
              "fullDescription": {
                "text": "use-trailing-return-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.MmapWriteExec",
              "name": "clang-analyzer-alpha.security.MmapWriteExec",
              "shortDescription": {
                "text": "MmapWriteExec"
              },
              "fullDescription": {
                "text": "MmapWriteExec"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.UndefinedBinaryOperatorResult",
              "name": "clang-analyzer-core.UndefinedBinaryOperatorResult",
              "shortDescription": {
                "text": "UndefinedBinaryOperatorResult"
              },
              "fullDescription": {
                "text": "UndefinedBinaryOperatorResult"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.nondeterminism.PointerSorting",
              "name": "clang-analyzer-alpha.nondeterminism.PointerSorting",
              "shortDescription": {
                "text": "PointerSorting"
              },
              "fullDescription": {
                "text": "PointerSorting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "index": 54,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RetainCount",
              "name": "clang-analyzer-osx.cocoa.RetainCount",
              "shortDescription": {
                "text": "RetainCount"
              },
              "fullDescription": {
                "text": "RetainCount"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "linuxkernel-must-check-errs",
              "name": "linuxkernel-must-check-errs",
              "shortDescription": {
                "text": "must-check-errs"
              },
              "fullDescription": {
                "text": "must-check-errs"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "linuxkernel",
                    "index": 65,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.Errno",
              "name": "clang-analyzer-apiModeling.Errno",
              "shortDescription": {
                "text": "Errno"
              },
              "fullDescription": {
                "text": "Errno"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-6",
              "name": "clion-misra-c2012-11-6",
              "shortDescription": {
                "text": "misra-c2012-11-6"
              },
              "fullDescription": {
                "text": "misra-c2012-11-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-invalid-access-moved",
              "name": "hicpp-invalid-access-moved",
              "shortDescription": {
                "text": "invalid-access-moved"
              },
              "fullDescription": {
                "text": "invalid-access-moved"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-4",
              "name": "clion-misra-cpp2008-5-2-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-4",
              "name": "clion-misra-c2012-7-4",
              "shortDescription": {
                "text": "misra-c2012-7-4"
              },
              "fullDescription": {
                "text": "misra-c2012-7-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-0-1-7",
              "name": "clion-misra-cpp2008-0-1-7",
              "shortDescription": {
                "text": "misra-cpp2008-0-1-7"
              },
              "fullDescription": {
                "text": "misra-cpp2008-0-1-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-include-cleaner",
              "name": "misc-include-cleaner",
              "shortDescription": {
                "text": "include-cleaner"
              },
              "fullDescription": {
                "text": "include-cleaner"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency-mt-unsafe",
              "name": "concurrency-mt-unsafe",
              "shortDescription": {
                "text": "mt-unsafe"
              },
              "fullDescription": {
                "text": "mt-unsafe"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "index": 43,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-argument-comment",
              "name": "bugprone-argument-comment",
              "shortDescription": {
                "text": "argument-comment"
              },
              "fullDescription": {
                "text": "argument-comment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.IdenticalExpr",
              "name": "clang-analyzer-alpha.core.IdenticalExpr",
              "shortDescription": {
                "text": "IdenticalExpr"
              },
              "fullDescription": {
                "text": "IdenticalExpr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-nested-conditional-operator",
              "name": "readability-avoid-nested-conditional-operator",
              "shortDescription": {
                "text": "avoid-nested-conditional-operator"
              },
              "fullDescription": {
                "text": "avoid-nested-conditional-operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-slicing",
              "name": "cppcoreguidelines-slicing",
              "shortDescription": {
                "text": "slicing"
              },
              "fullDescription": {
                "text": "slicing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.DynamicTypeChecker",
              "name": "clang-analyzer-alpha.core.DynamicTypeChecker",
              "shortDescription": {
                "text": "DynamicTypeChecker"
              },
              "fullDescription": {
                "text": "DynamicTypeChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.PthreadLock",
              "name": "clang-analyzer-alpha.unix.PthreadLock",
              "shortDescription": {
                "text": "PthreadLock"
              },
              "fullDescription": {
                "text": "PthreadLock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl54-cpp",
              "name": "cert-dcl54-cpp",
              "shortDescription": {
                "text": "dcl54-cpp"
              },
              "fullDescription": {
                "text": "dcl54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.PureVirtualCall",
              "name": "clang-analyzer-cplusplus.PureVirtualCall",
              "shortDescription": {
                "text": "PureVirtualCall"
              },
              "fullDescription": {
                "text": "PureVirtualCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin-avoid-spinlock",
              "name": "darwin-avoid-spinlock",
              "shortDescription": {
                "text": "avoid-spinlock"
              },
              "fullDescription": {
                "text": "avoid-spinlock"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "index": 44,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Malloc",
              "name": "clang-analyzer-unix.Malloc",
              "shortDescription": {
                "text": "Malloc"
              },
              "fullDescription": {
                "text": "Malloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-capturing-lambda-coroutines",
              "name": "cppcoreguidelines-avoid-capturing-lambda-coroutines",
              "shortDescription": {
                "text": "avoid-capturing-lambda-coroutines"
              },
              "fullDescription": {
                "text": "avoid-capturing-lambda-coroutines"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-dealloc-in-category",
              "name": "objc-dealloc-in-category",
              "shortDescription": {
                "text": "dealloc-in-category"
              },
              "fullDescription": {
                "text": "dealloc-in-category"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-11-0-1",
              "name": "clion-misra-cpp2008-11-0-1",
              "shortDescription": {
                "text": "misra-cpp2008-11-0-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-11-0-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-2",
              "name": "clion-misra-c2012-15-2",
              "shortDescription": {
                "text": "misra-c2012-15-2"
              },
              "fullDescription": {
                "text": "misra-c2012-15-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-env33-c",
              "name": "cert-env33-c",
              "shortDescription": {
                "text": "env33-c"
              },
              "fullDescription": {
                "text": "env33-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc50-cpp",
              "name": "cert-msc50-cpp",
              "shortDescription": {
                "text": "msc50-cpp"
              },
              "fullDescription": {
                "text": "msc50-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-narrowing-conversions",
              "name": "bugprone-narrowing-conversions",
              "shortDescription": {
                "text": "narrowing-conversions"
              },
              "fullDescription": {
                "text": "narrowing-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-function-size",
              "name": "google-readability-function-size",
              "shortDescription": {
                "text": "readability-function-size"
              },
              "fullDescription": {
                "text": "readability-function-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.decodeValueOfObjCType",
              "name": "clang-analyzer-security.insecureAPI.decodeValueOfObjCType",
              "shortDescription": {
                "text": "decodeValueOfObjCType"
              },
              "fullDescription": {
                "text": "decodeValueOfObjCType"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-7",
              "name": "clion-misra-c2012-18-7",
              "shortDescription": {
                "text": "misra-c2012-18-7"
              },
              "fullDescription": {
                "text": "misra-c2012-18-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-1",
              "name": "clion-misra-c2012-7-1",
              "shortDescription": {
                "text": "misra-c2012-7-1"
              },
              "fullDescription": {
                "text": "misra-c2012-7-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-lambda-function-name",
              "name": "bugprone-lambda-function-name",
              "shortDescription": {
                "text": "lambda-function-name"
              },
              "fullDescription": {
                "text": "lambda-function-name"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.cplusplus.UninitializedObject",
              "name": "clang-analyzer-optin.cplusplus.UninitializedObject",
              "shortDescription": {
                "text": "UninitializedObject"
              },
              "fullDescription": {
                "text": "UninitializedObject"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "index": 63,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-use-anyofallof",
              "name": "readability-use-anyofallof",
              "shortDescription": {
                "text": "use-anyofallof"
              },
              "fullDescription": {
                "text": "use-anyofallof"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-default-member-init",
              "name": "modernize-use-default-member-init",
              "shortDescription": {
                "text": "use-default-member-init"
              },
              "fullDescription": {
                "text": "use-default-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-function-cognitive-complexity",
              "name": "readability-function-cognitive-complexity",
              "shortDescription": {
                "text": "function-cognitive-complexity"
              },
              "fullDescription": {
                "text": "function-cognitive-complexity"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-avoid-c-arrays",
              "name": "modernize-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-qualified-auto",
              "name": "readability-qualified-auto",
              "shortDescription": {
                "text": "qualified-auto"
              },
              "fullDescription": {
                "text": "qualified-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misplaced-const",
              "name": "misc-misplaced-const",
              "shortDescription": {
                "text": "misplaced-const"
              },
              "fullDescription": {
                "text": "misplaced-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-parent-virtual-call",
              "name": "bugprone-parent-virtual-call",
              "shortDescription": {
                "text": "parent-virtual-call"
              },
              "fullDescription": {
                "text": "parent-virtual-call"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-multiple-inheritance",
              "name": "fuchsia-multiple-inheritance",
              "shortDescription": {
                "text": "multiple-inheritance"
              },
              "fullDescription": {
                "text": "multiple-inheritance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-9",
              "name": "clion-misra-cpp2008-5-2-9",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-9"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-4-3",
              "name": "clion-misra-cpp2008-7-4-3",
              "shortDescription": {
                "text": "misra-cpp2008-7-4-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-4-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-return-with-void-value",
              "name": "readability-avoid-return-with-void-value",
              "shortDescription": {
                "text": "avoid-return-with-void-value"
              },
              "fullDescription": {
                "text": "avoid-return-with-void-value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.MIG",
              "name": "clang-analyzer-osx.MIG",
              "shortDescription": {
                "text": "MIG"
              },
              "fullDescription": {
                "text": "MIG"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.performance.Padding",
              "name": "clang-analyzer-optin.performance.Padding",
              "shortDescription": {
                "text": "Padding"
              },
              "fullDescription": {
                "text": "Padding"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "index": 47,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-missing-comma",
              "name": "bugprone-suspicious-missing-comma",
              "shortDescription": {
                "text": "suspicious-missing-comma"
              },
              "fullDescription": {
                "text": "suspicious-missing-comma"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-array-decay",
              "name": "hicpp-no-array-decay",
              "shortDescription": {
                "text": "no-array-decay"
              },
              "fullDescription": {
                "text": "no-array-decay"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-8",
              "name": "clion-misra-cpp2008-5-2-8",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-8"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Vfork",
              "name": "clang-analyzer-unix.Vfork",
              "shortDescription": {
                "text": "Vfork"
              },
              "fullDescription": {
                "text": "Vfork"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-2",
              "name": "clion-misra-cpp2008-5-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-prefer-register-over-unsigned",
              "name": "llvm-prefer-register-over-unsigned",
              "shortDescription": {
                "text": "prefer-register-over-unsigned"
              },
              "fullDescription": {
                "text": "prefer-register-over-unsigned"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-assert-equals",
              "name": "objc-assert-equals",
              "shortDescription": {
                "text": "assert-equals"
              },
              "fullDescription": {
                "text": "assert-equals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.SizeofPtr",
              "name": "clang-analyzer-alpha.core.SizeofPtr",
              "shortDescription": {
                "text": "SizeofPtr"
              },
              "fullDescription": {
                "text": "SizeofPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.Dealloc",
              "name": "clang-analyzer-osx.cocoa.Dealloc",
              "shortDescription": {
                "text": "Dealloc"
              },
              "fullDescription": {
                "text": "Dealloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-2",
              "name": "clion-misra-cpp2008-6-6-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-exception-baseclass",
              "name": "hicpp-exception-baseclass",
              "shortDescription": {
                "text": "exception-baseclass"
              },
              "fullDescription": {
                "text": "exception-baseclass"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-multiway-paths-covered",
              "name": "hicpp-multiway-paths-covered",
              "shortDescription": {
                "text": "multiway-paths-covered"
              },
              "fullDescription": {
                "text": "multiway-paths-covered"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-4",
              "name": "clion-misra-cpp2008-6-5-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-confusable-identifiers",
              "name": "misc-confusable-identifiers",
              "shortDescription": {
                "text": "confusable-identifiers"
              },
              "fullDescription": {
                "text": "confusable-identifiers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.fuchsia.Lock",
              "name": "clang-analyzer-alpha.fuchsia.Lock",
              "shortDescription": {
                "text": "Lock"
              },
              "fullDescription": {
                "text": "Lock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.fuchsia",
                    "index": 66,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bcopy",
              "name": "clang-analyzer-security.insecureAPI.bcopy",
              "shortDescription": {
                "text": "bcopy"
              },
              "fullDescription": {
                "text": "bcopy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-14-4",
              "name": "clion-misra-c2012-14-4",
              "shortDescription": {
                "text": "misra-c2012-14-4"
              },
              "fullDescription": {
                "text": "misra-c2012-14-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-unnecessary-conversion",
              "name": "abseil-duration-unnecessary-conversion",
              "shortDescription": {
                "text": "duration-unnecessary-conversion"
              },
              "fullDescription": {
                "text": "duration-unnecessary-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-unconstrained-variable-type",
              "name": "clion-unconstrained-variable-type",
              "shortDescription": {
                "text": "unconstrained-variable-type"
              },
              "fullDescription": {
                "text": "unconstrained-variable-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.MismatchedDeallocator",
              "name": "clang-analyzer-unix.MismatchedDeallocator",
              "shortDescription": {
                "text": "MismatchedDeallocator"
              },
              "fullDescription": {
                "text": "MismatchedDeallocator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-no-suspend-with-lock",
              "name": "cppcoreguidelines-no-suspend-with-lock",
              "shortDescription": {
                "text": "no-suspend-with-lock"
              },
              "fullDescription": {
                "text": "no-suspend-with-lock"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-bad-signal-to-kill-thread",
              "name": "bugprone-bad-signal-to-kill-thread",
              "shortDescription": {
                "text": "bad-signal-to-kill-thread"
              },
              "fullDescription": {
                "text": "bad-signal-to-kill-thread"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.VLASize",
              "name": "clang-analyzer-core.VLASize",
              "shortDescription": {
                "text": "VLASize"
              },
              "fullDescription": {
                "text": "VLASize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-constant-array-index",
              "name": "cppcoreguidelines-pro-bounds-constant-array-index",
              "shortDescription": {
                "text": "pro-bounds-constant-array-index"
              },
              "fullDescription": {
                "text": "pro-bounds-constant-array-index"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-qualified-auto",
              "name": "llvm-qualified-auto",
              "shortDescription": {
                "text": "qualified-auto"
              },
              "fullDescription": {
                "text": "qualified-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-empty-decl-or-stmt",
              "name": "clion-empty-decl-or-stmt",
              "shortDescription": {
                "text": "empty-decl-or-stmt"
              },
              "fullDescription": {
                "text": "empty-decl-or-stmt"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
              "name": "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
              "shortDescription": {
                "text": "RunLoopAutoreleaseLeak"
              },
              "fullDescription": {
                "text": "RunLoopAutoreleaseLeak"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-auto",
              "name": "modernize-use-auto",
              "shortDescription": {
                "text": "use-auto"
              },
              "fullDescription": {
                "text": "use-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.CallAndMessage",
              "name": "clang-analyzer-core.CallAndMessage",
              "shortDescription": {
                "text": "CallAndMessage"
              },
              "fullDescription": {
                "text": "CallAndMessage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err58-cpp",
              "name": "cert-err58-cpp",
              "shortDescription": {
                "text": "err58-cpp"
              },
              "fullDescription": {
                "text": "err58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.taint.TaintPropagation",
              "name": "clang-analyzer-alpha.security.taint.TaintPropagation",
              "shortDescription": {
                "text": "TaintPropagation"
              },
              "fullDescription": {
                "text": "TaintPropagation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.taint",
                    "index": 67,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.SuperDealloc",
              "name": "clang-analyzer-osx.cocoa.SuperDealloc",
              "shortDescription": {
                "text": "SuperDealloc"
              },
              "fullDescription": {
                "text": "SuperDealloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err61-cpp",
              "name": "cert-err61-cpp",
              "shortDescription": {
                "text": "err61-cpp"
              },
              "fullDescription": {
                "text": "err61-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-throw-by-value-catch-by-reference",
              "name": "misc-throw-by-value-catch-by-reference",
              "shortDescription": {
                "text": "throw-by-value-catch-by-reference"
              },
              "fullDescription": {
                "text": "throw-by-value-catch-by-reference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "taxa": [
            {
              "id": "C",
              "name": "C"
            },
            {
              "id": "cplusplus",
              "name": "cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security",
              "name": "alpha.security",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion",
              "name": "clion",
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.core",
              "name": "alpha.core",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google",
              "name": "google",
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines",
              "name": "cppcoreguidelines",
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.cplusplus",
              "name": "alpha.cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc",
              "name": "llvmlibc",
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance",
              "name": "performance",
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone",
              "name": "bugprone",
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize",
              "name": "modernize",
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability",
              "name": "readability",
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia",
              "name": "fuchsia",
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security.insecureAPI",
              "name": "security.insecureAPI",
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp",
              "name": "hicpp",
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert",
              "name": "cert",
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.cocoa",
              "name": "osx.cocoa",
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm",
              "name": "llvm",
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.osx.cocoa.localizability",
              "name": "alpha.osx.cocoa.localizability",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa.localizability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "zircon",
              "name": "zircon",
              "relationships": [
                {
                  "target": {
                    "id": "zircon",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "boost",
              "name": "boost",
              "relationships": [
                {
                  "target": {
                    "id": "boost",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil",
              "name": "abseil",
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.unix",
              "name": "alpha.unix",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.osx.cocoa",
              "name": "alpha.osx.cocoa",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx",
              "name": "osx",
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.mpi",
              "name": "optin.mpi",
              "relationships": [
                {
                  "target": {
                    "id": "optin.mpi",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "unix",
              "name": "unix",
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc",
              "name": "misc",
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android",
              "name": "android",
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.coreFoundation",
              "name": "osx.coreFoundation",
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "unix.cstring",
              "name": "unix.cstring",
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling.llvm",
              "name": "apiModeling.llvm",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera",
              "name": "altera",
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi",
              "name": "mpi",
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core.uninitialized",
              "name": "core.uninitialized",
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core.builtin",
              "name": "core.builtin",
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core",
              "name": "core",
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "valist",
              "name": "valist",
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "webkit",
              "name": "webkit",
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc",
              "name": "objc",
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.llvm",
              "name": "alpha.llvm",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "nullability",
              "name": "nullability",
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency",
              "name": "concurrency",
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin",
              "name": "darwin",
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "deadcode",
              "name": "deadcode",
              "relationships": [
                {
                  "target": {
                    "id": "deadcode",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.webkit",
              "name": "alpha.webkit",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.performance",
              "name": "optin.performance",
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.core",
              "name": "optin.core",
              "relationships": [
                {
                  "target": {
                    "id": "optin.core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability",
              "name": "portability",
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security",
              "name": "security",
              "relationships": [
                {
                  "target": {
                    "id": "security",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling.google",
              "name": "apiModeling.google",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.google",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security.cert.env",
              "name": "security.cert.env",
              "relationships": [
                {
                  "target": {
                    "id": "security.cert.env",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.clone",
              "name": "alpha.clone",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.clone",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.nondeterminism",
              "name": "alpha.nondeterminism",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.osx.cocoa.localizability",
              "name": "optin.osx.cocoa.localizability",
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.portability",
              "name": "optin.portability",
              "relationships": [
                {
                  "target": {
                    "id": "optin.portability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp",
              "name": "openmp",
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.unix.cstring",
              "name": "alpha.unix.cstring",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.coreFoundation.containers",
              "name": "osx.coreFoundation.containers",
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.deadcode",
              "name": "alpha.deadcode",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.deadcode",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.osx",
              "name": "optin.osx",
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security.cert.pos",
              "name": "alpha.security.cert.pos",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.cert.pos",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.cplusplus",
              "name": "optin.cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling",
              "name": "apiModeling",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "linuxkernel",
              "name": "linuxkernel",
              "relationships": [
                {
                  "target": {
                    "id": "linuxkernel",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.fuchsia",
              "name": "alpha.fuchsia",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.fuchsia",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security.taint",
              "name": "alpha.security.taint",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.taint",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/LandryNorris/os.git",
          "revisionId": "91f786e2b365c0f1ef78c2852f8f98e57ee4fa11",
          "branch": "main",
          "properties": {
            "repoUrl": "https://github.com/LandryNorris/os.git",
            "lastAuthorName": "Landry Norris",
            "vcsType": "Git",
            "lastAuthorEmail": "landry.norris@live.com"
          }
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "libc/src/c/stdio/printf.c"
          },
          "length": 5871,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libk/src/c/file/buffer.c"
          },
          "length": 2208,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/stdio/puts.c"
          },
          "length": 129,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/stdio/stdbuf.c"
          },
          "length": 164,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/memutils.c"
          },
          "length": 1301,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strcat.c"
          },
          "length": 218,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strcmp.c"
          },
          "length": 229,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strlen.c"
          },
          "length": 153,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/test/src/stdio_tests.cpp"
          },
          "length": 3668,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/test/src/string_tests.cpp"
          },
          "length": 1213,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libk/test/src/buffer_test.cpp"
          },
          "length": 2688,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/acpi/rsdp.c"
          },
          "length": 847,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/cpuid/cpuid.c"
          },
          "length": 766,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/font/psf/defaultfont.c"
          },
          "length": 59434,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/fs/ext2/ext2.c"
          },
          "length": 8187,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/fs/vfs/vfs.c"
          },
          "length": 1725,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/gdt/gdt.c"
          },
          "length": 2417,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/graphics/canvas.c"
          },
          "length": 2369,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/include/idt.h"
          },
          "length": 520,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/idt/idt.c"
          },
          "length": 3334,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/interrupts/keyboard.c"
          },
          "length": 1783,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/isr/exception.c"
          },
          "length": 1319,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/isr/interrupt.c"
          },
          "length": 581,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/kernel.c"
          },
          "length": 2627,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/malloc.c"
          },
          "length": 1248,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/page.c"
          },
          "length": 8017,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/pmm.c"
          },
          "length": 1351,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/multiboot2/multiboot2.c"
          },
          "length": 1597,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/initialize.c"
          },
          "length": 3588,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/read.c"
          },
          "length": 1526,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/write.c"
          },
          "length": 1626,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/read.c"
          },
          "length": 1739,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/scan.c"
          },
          "length": 2296,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/portio/portio.c"
          },
          "length": 816,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/serial/serial.c"
          },
          "length": 1978,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/terminal/terminal_state.c"
          },
          "length": 211,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/terminal/write.c"
          },
          "length": 2099,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/cpuid_mock.cpp"
          },
          "length": 1005,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/cpuid_test.cpp"
          },
          "length": 990,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/idt_test.cpp"
          },
          "length": 1792,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/portio_mock.cpp"
          },
          "length": 1390,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/rsdp.cpp"
          },
          "length": 1510,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/serial_test.cpp"
          },
          "length": 2971,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
          },
          "length": 2107,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
          },
          "length": 2201,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        }
      ],
      "results": [
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/puts.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 92,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 46,
                  "charLength": 7,
                  "snippet": {
                    "text": "    int i = 0;\n    for(; s[i]; i++) {\n        putchar(s[i]);\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c03ece3d341a845ffd025143086ab966131eb9e96b556345ead08b02073ae34f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e43ebef7d8ee8e647f429d125cd244640e5f3d487de0d37b24ba4521aa1beb6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82f3d844c017c0ccecd9f1edd909bd3cc696f3db88ac997764dc38f88c7e3baf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31de782a01735d592d30a0e0ddbc2d5e57c90e961478e57d550f156b3b517bb5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dd8b3d9c0ded2acb9169d45851bfa810ae37f170b9cfa813b9136d3db604e60"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f250b5271345debe634c64f42c95b9a053fa022a8ee2a9a9431e1bb017a5e2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49596ca335f451153b4932f904891e79e0a0cbe94c2f88d7ebb0011885e89204"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea5a09c2a5b446e19d55c53a6b61dc1d86aaf08a192a86ec53d08861856096ca"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d63a7de04ffc7a9bac60f2d1a61510241217fa298136ac0faec5161e7e241d9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 23,
                  "charOffset": 360,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 23,
                  "charOffset": 305,
                  "snippet": {
                    "text": "        int diff = a[i] - b[i];\n\n        if (diff != 0) return diff;\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f390ff12666a4f6de7dc657c358c28d61a302dd9d0bba2d4cf52a405926c453"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 42,
                  "charOffset": 937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 42,
                  "charOffset": 817,
                  "snippet": {
                    "text": "    const unsigned char* src = (const unsigned char*) p2;\n    if (dst < src) {\n        for (size_t i = 0; i < size; i++)\n            dst[i] = src[i];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66c828df062eac1f37516985f9196cff86b98622d56250d1d1f87e9647753951"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "charOffset": 1022,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 43,
                  "charOffset": 938,
                  "snippet": {
                    "text": "            dst[i] = src[i];\n    } else {\n        for (size_t i = size; i != 0; i--)\n            dst[i - 1] = src[i - 1];\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec52af0d54aea32ee6def231ed55f1448a5186dc0f245f2de5b7ad6255cecbf6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "charOffset": 1242,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 38,
                  "charOffset": 1084,
                  "snippet": {
                    "text": "__attribute__((unused)) void* memset(void* ptr, int value, size_t size) {\n    unsigned char* dst = (unsigned char*) ptr;\n    for (size_t i = 0; i < size; i++)\n        dst[i] = (unsigned char) value;\n    return ptr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "829ecafd69f47d65a777776dc4bf754cf8e4fb700d72cd964001ea379f34e301"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcat.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "charOffset": 116,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 20,
                  "charOffset": 59,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char* s = src;\n    char* d = dst;\n    for (; *d; d++);\n\n    for (char c = *s; c != '\\0'; c = *++s) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73fae25e621de58c83561c57cfe63a5293e58b1144d674b9949b74e6c8e83255"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcmp.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 22,
                  "charOffset": 184,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 22,
                  "charOffset": 105,
                  "snippet": {
                    "text": "    while(*p1 && *p2) {\n        int diff = *p1++ - *p2++;\n        if(diff != 0) return diff;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e15377698c0b391499b890b8236a4ac361cf8470cc598c1d65709f80b71e72"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/puts.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 92,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 46,
                  "charLength": 7,
                  "snippet": {
                    "text": "    int i = 0;\n    for(; s[i]; i++) {\n        putchar(s[i]);\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c03ece3d341a845ffd025143086ab966131eb9e96b556345ead08b02073ae34f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strlen.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "charOffset": 119,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 21,
                  "charOffset": 22,
                  "snippet": {
                    "text": "__attribute__((unused)) size_t strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fef9f9ddc0f2b75bed099b8facfddb13964940ae031916f4d3292d6131532421"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "charOffset": 456,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 10,
                  "charOffset": 418,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PutChar) {\n    char c;\n\n    FileBuffer* buffer = allocateBuffer(5);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9d3ef6d3d3880753665d30c071640f56c68a13e45d0d002365015707060f0be"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 41,
                  "charOffset": 500,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 41,
                  "charOffset": 447,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char c;\n\n    FileBuffer* buffer = allocateBuffer(5);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b2ef133ce2fb77f77fe3b53a215d2f740ce4b241eac4a0fae8dc81996f10c67"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 41,
                  "charOffset": 796,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 41,
                  "charOffset": 717,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfLiteralTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6271fbc9b92be366ee74875f679d290ec78c301bb63c404759e5a266e830a6af"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 16,
                  "charOffset": 906,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 16,
                  "charOffset": 843,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Printing literal string\");\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7eab6aff3e51bb78619b63f500224f8852e20c620e70fe034b5910bab370c019"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "charOffset": 928,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 10,
                  "charOffset": 891,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0767605ddbaacf31d354915e98ebe04775596aeb93e5ad5c80402c9b827ce9eb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 20,
                  "charOffset": 950,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 20,
                  "charOffset": 918,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27021455edfb2525dfabc39aac2a5316206b20b6fe3df29ba82841335926bca8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1166,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 41,
                  "charOffset": 1081,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfIntConversionTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de91793fcc96b9469a06a217a50e81612284e2a5886979b77522a91c1bced9e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'x' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1217,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1172,
                  "charLength": 3,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90d11a04c5f7540467042eb29f8a9cd8d79710c33fdfe2fbedecce6748ed150d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1232,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1212,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91c18a19ed6a1549cbee92d09f21f8ca9d0e47d6a0195dc225b5a2c46f2b2778"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'negativeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 1269,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1213,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;\n    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "502cfb797d2e55c7caf7c0ac2b24e78b3789262d472158c93b717f06432e3554"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNegativeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "charOffset": 1298,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1228,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;\n    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1885697bbf8acfec56526be6fa7812bd4e4691372bff65ee8da2cee35cab9458"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "charOffset": 1454,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 16,
                  "charOffset": 1335,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "000b2c46f60220a4a286a179f0ccc1491dc7d95e1f9418976bf265442d2223c6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "charOffset": 1476,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 10,
                  "charOffset": 1439,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e554c87fb1fef9f04f18cfa7657b79c282135b35f6efbf7489136ecc33d99c2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 20,
                  "charOffset": 1498,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 20,
                  "charOffset": 1466,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "734e767bf8b1986547de6bcf4b60dbb4efd61e2b5eb79f34c01b30eabaec4b7a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 41,
                  "charOffset": 1731,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 41,
                  "charOffset": 1644,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfFloatConversionTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2addb86d754283b1ee087510fca41dff853ae970fd00cb2668745eb5b2554cb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'f' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1782,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 1737,
                  "charLength": 5,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb1732028716ec84a4f56362fb82b101dea7264ef63be50b2a80fe48cc49e8d9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1801,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 5,
                  "charOffset": 1777,
                  "charLength": 5,
                  "snippet": {
                    "text": "\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c783f961c37fe6cb2d7c4215062668be2b9dca1b9ba3f822b94d8972e054c2d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1234567890.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 24,
                  "charOffset": 1820,
                  "charLength": 12,
                  "snippet": {
                    "text": "1234567890.0"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 24,
                  "charOffset": 1777,
                  "charLength": 12,
                  "snippet": {
                    "text": "\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0be7927d9de1780c364c99967661e21733a12516737144b28511ecbfc4fd5e56"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'negativeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 5,
                  "charOffset": 1838,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1778,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3385db22a01858c2ea30f2399c8ceea51534d6dc030b4ba1e78bf81fb78e0b23"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 28,
                  "charOffset": 1861,
                  "charLength": 3,
                  "snippet": {
                    "text": "2.0"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 28,
                  "charOffset": 1778,
                  "charLength": 3,
                  "snippet": {
                    "text": "    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fc3e44fcf61286de3199a3b85a14209f7c9974e44df7b107817e691a5736a84"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNegativeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 1870,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1797,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5176b39ed339c71aaba5489ca0b5eb1a7aefc6e26e4117c96243ead2da660e26"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'fractionalFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "charOffset": 1914,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 5,
                  "charOffset": 1834,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "194eaaa7ccf2537cf4b2f47d3a45851d18201d24dd7cddac5ddaec03ca955e58"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "123.45678 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 29,
                  "charOffset": 1938,
                  "charLength": 9,
                  "snippet": {
                    "text": "123.45678"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 29,
                  "charOffset": 1834,
                  "charLength": 9,
                  "snippet": {
                    "text": "    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b949c7ec7c32cb485501963df4b469237da9a89b1ed747e786229fa694a294f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 16,
                  "charOffset": 2087,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 16,
                  "charOffset": 1949,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a1b49a85226f46af08bfebbc17083182329b7239707b87dd408352afe73ac22"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 10,
                  "charOffset": 2109,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 10,
                  "charOffset": 2072,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b2d3144ca7891852b45103a012bf13a55c90bcd5aa774c19140efc9b64a63e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "charOffset": 2131,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 20,
                  "charOffset": 2099,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9a2c7bda5ab4b04cf0e57a42be8ffd585a702b1f2816cf95a73b9788abab662"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 41,
                  "charOffset": 2392,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 41,
                  "charOffset": 2316,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfHexTests) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eccf955a19913a4338cab365bd8819c8c2fe8816e15c8d29e879174a5a731485"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value1' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "charOffset": 2443,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2398,
                  "charLength": 3,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "808006fa0d26404b31c3330702c5dd9b368f7bb658b89406cbd95bbb20f2a32a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value2' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "charOffset": 2463,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2438,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0a6090746c536cbc9355659a4f3e663f17cad4b32b2734f4152812e7c79c711"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123ABC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2476,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123ABC"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 18,
                  "charOffset": 2438,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3a53e8a19061a07509cee3bc444ab75961519badf582c5d1487dd220e40a89"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value3' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "charOffset": 2490,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 5,
                  "charOffset": 2439,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4ac132aba9decf8b747ce2ef611b5b0e5a653a0c0ff4d3faf54884620e5215e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xABC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 18,
                  "charOffset": 2503,
                  "charLength": 5,
                  "snippet": {
                    "text": "0xABC"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 18,
                  "charOffset": 2439,
                  "charLength": 5,
                  "snippet": {
                    "text": "    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa02a6224a7b7d0d9930bd0d5ea73ccd8bbc8c930270c4f80dbc4e404b5a4904"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value4' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "charOffset": 2514,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 5,
                  "charOffset": 2459,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "875768a90ebbcd18421b6c2e5f144c3a739afa12dbe0cd2681ae804214c4e4ee"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xDEF1 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 18,
                  "charOffset": 2527,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xDEF1"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2459,
                  "charLength": 6,
                  "snippet": {
                    "text": "    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e94fb5054207b39423c48076681ee5e2dc26c19e5b65082d7989e5837aa092d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 16,
                  "charOffset": 2627,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 16,
                  "charOffset": 2535,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d05e00d2cf89c41cb7a612a2927945ad18fc05fbec7e550d545574e345166c9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 10,
                  "charOffset": 2649,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 10,
                  "charOffset": 2612,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7be4e277068dd1d54c46147b75d32914785be694e6682e07fb8529b10ffbec21"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 20,
                  "charOffset": 2671,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 20,
                  "charOffset": 2639,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14ff1fc83506776df7ca5fa6cb5f35eb2c650b46f48c68fd817af0eacac1735a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 41,
                  "charOffset": 2900,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 41,
                  "charOffset": 2823,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfMultiLine) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7831491c121dc48bc2f59416426961a199a0a8a6d8d03093e5c91e6bc0d28933"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 16,
                  "charOffset": 3026,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 16,
                  "charOffset": 2947,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\nString\\nWith\\nSeveral\\nLines\");\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "584d40c0aad4773003b981fdaceb293bb1fcd88fdb09a729f966f54bb04c68d6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 10,
                  "charOffset": 3048,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 10,
                  "charOffset": 3011,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee7f96b14e162bf7d4e3fbeeb0318bff86b841b5d64524802e9bcb64c68ae4d8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 20,
                  "charOffset": 3070,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 20,
                  "charOffset": 3038,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60835cc45e227a5329327772a3854ab1b416eeb874f1d17b02b6ccef1060ab06"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 41,
                  "charOffset": 3294,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 41,
                  "charOffset": 3217,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfMultiCall) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfa8363661e40281ad8f6d14636c003ce64756569bcfc249fb4c72d83504a97f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 38,
                  "charOffset": 3445,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 38,
                  "charOffset": 3341,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\n\");\n    os_libc_printf(\"String\\n\");\n    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de148718246dfb35328f8e6d42782f804d64e260b8dbed8de654987dda444959"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 44,
                  "charOffset": 3451,
                  "charLength": 4,
                  "snippet": {
                    "text": "30.0"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 44,
                  "charOffset": 3341,
                  "charLength": 4,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\n\");\n    os_libc_printf(\"String\\n\");\n    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fcfa8f987c36fd60df0df6cabb71c18cc27100f56918a330a52d72ee6eb7f1f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "charOffset": 3474,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 16,
                  "charOffset": 3408,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4f8d4a97183680db58c8e9a878b961d5571dc236b7127a8f370245a22995a8d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 10,
                  "charOffset": 3496,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 10,
                  "charOffset": 3459,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "175aefd155c1700024d4fb785d21361fa05dad841ec8c9be144699bd6b68ebfe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 20,
                  "charOffset": 3518,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 20,
                  "charOffset": 3486,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fdc0a7dc0bb1c55c97ccee4de8c9a37809106c13e1d11c149a6168f8f49e87e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/string_tests.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 15,
                  "charOffset": 324,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 15,
                  "charOffset": 229,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(StringTests, StringCopyTest) {\n    char* str1 = (char*)\"some text to copy\";\n    char str2[50] = {0};\n\n    ASSERT_STRNE(str1, str2);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa62b537b0ddc0fe187e3364b815fdf9a6f8959d80dae7025263d6a4a06b3f59"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/string_tests.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 15,
                  "charOffset": 490,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 15,
                  "charOffset": 432,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(StringTests, StringConcatenateTest) {\n    char str1[50] = {0};\n    char* str2 = (char*) \"World\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7d032e7c47cc7f2808dd6f1dcba99c810c863e7798f9ae411d12c7aa734fbcb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 41,
                  "charOffset": 467,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 41,
                  "charOffset": 394,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, emptyBuffer) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    ASSERT_EQ(0, bufferAvailable(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1a0c4b0d48bdac4c3fa18e1757ebd43598d68c5da62dfcf15e2cccde07eb74a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 41,
                  "charOffset": 648,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 41,
                  "charOffset": 581,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, write) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb1c15c545232504c345a84ba8c403b7c3b5671a7b7b65f6ee043819e1ddd8f2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 24,
                  "charOffset": 677,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 24,
                  "charOffset": 608,
                  "charLength": 2,
                  "snippet": {
                    "text": "    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {\n        ASSERT_EQ(1, writeByte(buffer, i));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eb355ccfa6b652189cb09370f3394ef8fcacd65042bd74b637decc112870036"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 41,
                  "charOffset": 1005,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 41,
                  "charOffset": 939,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, read) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bc2c4d23670a5c12d602b375fb59908165d681e884711f6467fb0f19fac0b42"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 1034,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 24,
                  "charOffset": 965,
                  "charLength": 2,
                  "snippet": {
                    "text": "    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {\n        writeByte(buffer, i*2);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a00a09156fbca6161ea1666266850c01b168bce391354637d2fee2e0aee7c818"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "charOffset": 1107,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 24,
                  "charOffset": 1077,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for(int i = 0; i < 10; i++) {\n        uint8_t result;\n        ASSERT_EQ(1, readByte(buffer, &result));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00a746868f2db6563b4d85f4d03c30c679d79673d0231617a55ff908cdc11a75"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 1134,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 1083,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < 10; i++) {\n        uint8_t result;\n        ASSERT_EQ(1, readByte(buffer, &result));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147bc1d308566774c2b4dba1656ef27ffb4f9d5e8bc6024faaad151a04dcef5a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "charOffset": 1341,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1322,
                  "charLength": 6,
                  "snippet": {
                    "text": "    }\n\n    uint8_t result;\n    ASSERT_EQ(0, readByte(buffer, &result));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbba76b814968685fab4b94230f0b30727e3bd88e037e8d16570cbb2acabf6f9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 41,
                  "charOffset": 1489,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 41,
                  "charOffset": 1415,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a9d9498f0e4dcdfcdd7f06e79216f9f7d9e6eb0195598c11a04641b34d3b501"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 24,
                  "charOffset": 1517,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 24,
                  "charOffset": 1416,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2918ecbdf5000aec782e0c2f592d107c02dfbb00966283ae15ccfbf8c077d111"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 21,
                  "charOffset": 1572,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 21,
                  "charOffset": 1494,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "805f40d887f84b50baf1a71b08dbfe50992ba3ef22d9594559f9c82350808cfe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 24,
                  "charOffset": 1575,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 24,
                  "charOffset": 1494,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73d96d66f14a749f9ea0dd17349cf26dc56ec1130e37e00d85c1b53b77759ea4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 34,
                  "charOffset": 1585,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 34,
                  "charOffset": 1494,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90b889011f15974668834c2d5ea2e014f4173b06eb16f6860dfe310cba81d8b0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 18,
                  "charOffset": 1751,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 18,
                  "charOffset": 1691,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n        for(int j = 0; j < length; j++) {\n            char result;\n            ASSERT_EQ(1, readChar(buffer, &result));\n            ASSERT_EQ(j*3, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79fae429adfbf684d7cf5ba0ea1ba4138502aab31f74f52592db725d266ea28d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'notInTest' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "charOffset": 1861,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 13,
                  "charOffset": 1812,
                  "charLength": 3,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c51ce50335e60a7d2662127bdac85298ca70c4c69d8a1aea09e80a2ba77a53f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 29,
                  "charOffset": 1877,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 29,
                  "charOffset": 1812,
                  "charLength": 2,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eabd669dbe8c0880cd6db8395f21c685df3678ecad6e5272f3b9317fc7201a66"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 41,
                  "charOffset": 2124,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 41,
                  "charOffset": 2050,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "610f6b7742167ccadbf86ab732a18e9a1610bb373036f8bcc3f8ab375407c9d5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "charOffset": 2152,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 24,
                  "charOffset": 2051,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3940a67a07c90b904a33bb1e717f271c519c2858942aff6f7a58a39c8f8f290"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 21,
                  "charOffset": 2207,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 21,
                  "charOffset": 2129,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5f00c5669dee94170863f6881c5b16f10d582fd0f7991e472aa99b8847af962"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 24,
                  "charOffset": 2210,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 24,
                  "charOffset": 2129,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be945ae5048a7ffd6c4bcf4ac5f8312c149954710c06e4afea1c1f015906d85f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 34,
                  "charOffset": 2220,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 34,
                  "charOffset": 2129,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b83a97a158354e46715228e1aa1887a48872b4277112e41648832537d0ee350b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 21,
                  "charOffset": 2389,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 21,
                  "charOffset": 2326,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n        for(int j = 0; j < length; j++) {\n            uint8_t result;\n            ASSERT_EQ(1, readByte(buffer, &result));\n            ASSERT_EQ(j*3, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bd2e4ae532519f3cfb82392c3e4264f3a8822dbbd4990b6efbc1c7317e535b0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'notInTest' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 13,
                  "charOffset": 2499,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 13,
                  "charOffset": 2450,
                  "charLength": 3,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca5064f5d3c7f69d435deb35dda8a7af098a125881e1fb7478483268af542435"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 29,
                  "charOffset": 2515,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 29,
                  "charOffset": 2450,
                  "charLength": 2,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1a0c4b0d48bdac4c3fa18e1757ebd43598d68c5da62dfcf15e2cccde07eb74a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "charOffset": 102,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 51,
                  "charOffset": 18,
                  "snippet": {
                    "text": "\nint getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24eb28dfdefb158108833546499805fef3efc10c3343108295c03cb4733583d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 117,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 19,
                  "charLength": 4,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d565aff294ff630a2329db27b87d9dc516a09f9fc008e076574a294276a5edaa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 33,
                  "charOffset": 145,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 33,
                  "charOffset": 19,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b9c151fa53ad1bb849f88cb972cc50391c14a3f2c07be681152a1a716f68cfd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 164,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 52,
                  "snippet": {
                    "text": "    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ed36e02c74363c13182d5f4dddfc12635e1a488f87c29fe937a3b06de844810"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 29,
                  "charOffset": 358,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[3] == ' ' &&\n            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a981ce6d2213aee8743abda02e02174204dba7d435bc236c71651e497c9f407e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 399,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a1696312402099c2960a31324073d157821d811a149454115c34018c6c69b19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 95,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 39,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2523a4fb695964680fdd0eef7b9be66c51a6d9e8aac671b49223236994d8ba49"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ebx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "charOffset": 104,
                  "charLength": 3,
                  "snippet": {
                    "text": "ebx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 14,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90829785eb9953e384e811abc1f38b87d57c199829e61eb8858636b679e165bb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 109,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 19,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89a4763f6cd6b0622af6085ab7e76e2af7dfc3b48220ff777e59eb92ec1102c7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 114,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 24,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9f64c03a035eaeeffa626745fc0be71052f78fc329c480f2a5b294ce312c7a7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17,
                  "charOffset": 247,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 17,
                  "charOffset": 157,
                  "charLength": 1,
                  "snippet": {
                    "text": "    // write 4 characters at a time, only if the provided length allows.\n\n    if(length < 5) {\n        string[0] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f043a330dc90bfe07bb63f2bd4141ec88c01245c93371aa21bf5b8526912bc54"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 17,
                  "charOffset": 351,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 17,
                  "charOffset": 301,
                  "charLength": 1,
                  "snippet": {
                    "text": "    *((uint32_t*) string) = ebx;\n\n    if(length < 9) {\n        string[4] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80cfbc1c1317d84e75dcf22931ec587f437a8f8b082761d7c411647b82f9fb4f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 461,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 405,
                  "charLength": 2,
                  "snippet": {
                    "text": "    *((uint32_t*) (string + 4)) = edx;\n\n    if(length < 13) {\n        string[8] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f887089b723ce25dcf8e89df256ffa1ddd1f8115368929fb9fa12ebd358564"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "charOffset": 566,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 12,
                  "charOffset": 515,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a06943203d5c9ffd0482a76fb00c52472e0b8e9a1923a77a5bb7559001d53d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 630,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 5,
                  "charOffset": 580,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2ade6cbc07cea5b6eb11688b49cad453cca8dc5e0a9721f5a236227a29a5dfe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "charOffset": 639,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 14,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fb3d0a7055ea31944325f253c3a2c6882a3b331f08c2b982cc2ba981473c8b5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 644,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc74a75ae735f4f5d89878b330f95c0023dd233f7570f65d821bfbd402c05a74"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e43ebef7d8ee8e647f429d125cd244640e5f3d487de0d37b24ba4521aa1beb6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82f3d844c017c0ccecd9f1edd909bd3cc696f3db88ac997764dc38f88c7e3baf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31de782a01735d592d30a0e0ddbc2d5e57c90e961478e57d550f156b3b517bb5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dd8b3d9c0ded2acb9169d45851bfa810ae37f170b9cfa813b9136d3db604e60"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f250b5271345debe634c64f42c95b9a053fa022a8ee2a9a9431e1bb017a5e2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49596ca335f451153b4932f904891e79e0a0cbe94c2f88d7ebb0011885e89204"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea5a09c2a5b446e19d55c53a6b61dc1d86aaf08a192a86ec53d08861856096ca"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d63a7de04ffc7a9bac60f2d1a61510241217fa298136ac0faec5161e7e241d9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'defaultFont' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/font/psf/defaultfont.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 27,
                  "charLength": 11,
                  "snippet": {
                    "text": "defaultFont"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 9,
                  "charOffset": 1,
                  "charLength": 11,
                  "snippet": {
                    "text": "#include \"psf.h\"\n\nPsfFont defaultFont = {\n        .characterTable = {\n                PCF_CHAR( //"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2318311081ca0756ab2bf2f43b9c753c9911af84760ba2f989ddbb28c3f6ecd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include <mem.h>\n#include <string.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35ec52e51dd1cc984cf028b40c3d435afc5b4eaa0dbcb7ff66d9c706b09cb7e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 22,
                  "charOffset": 337,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 22,
                  "charOffset": 252,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint16_t numUnallocatedInodes;\n    uint16_t numDirectories;\n    uint8_t reserved[14];\n} __attribute__((packed)) Ext2RawBlockDescriptor;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a745ebda7ceacb979d0d7d2a7d9fd12bc5aaebd6294edc21fadffdcb6ccd92fe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 52,
                  "charOffset": 1022,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 52,
                  "charOffset": 838,
                  "charLength": 3,
                  "snippet": {
                    "text": "void readBlock(IdeDevice* device, Ext2Fs* fs, int block, uint8_t* buffer) {\n    uint32_t address = fs->superBlock.blockSize * block;\n    uint32_t numSectors = fs->superBlock.blockSize/512;\n\n    for(uint32_t sector = 0; sector < numSectors; sector++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b108a276016e674dd66ca24a0230f1ed77c28aac1a57178061e2779ee7f9447"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1098,
                  "charLength": 50,
                  "snippet": {
                    "text": "// TODO: Figure out why we need to call this twice"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1027,
                  "charLength": 50,
                  "snippet": {
                    "text": "\n    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59f987313a237ca4c4565295d639258f859b93e6ab2a9aa407362266e13cf3a2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 40,
                  "charOffset": 1188,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 40,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e32c21d5f58bebe076bc49dfb783261225c4327d44775d981b43b17bd9f600f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 70,
                  "charOffset": 1218,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 70,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf1f04ff6f3a334d09293725d132c78f915f9db92523971802664f9996868624"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 75,
                  "charOffset": 1223,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 75,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0c62c83899bf59c51b342d76fa3547b8e016b3f50e166d42fae1a416371c3c4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 40,
                  "charOffset": 1268,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 40,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c9bda2f85686ffb79bb49dbeda0c1505ca16cb8562197197647d9cfa86ca589"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 70,
                  "charOffset": 1298,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 70,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b585f520a456783a5b0ceeb6df7757ba39f029e1d728933e94a7dc6cbe254faf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 75,
                  "charOffset": 1303,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 75,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7abf46b1ade16199ba1cb900fb1989da4a4eb8a8ac84c9fdc1c980a5e86d295"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 18,
                  "charOffset": 1429,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 18,
                  "charOffset": 1370,
                  "charLength": 4,
                  "snippet": {
                    "text": "    printf(\"Initializing ext2 drive\\n\");\n\n    uint8_t data[1024];\n    ataReadSectors(device, 2, data, 1024);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "adf4c7636ba20bcb4eb36a34cc73f993a6159e4bc2c96778dba94139b99958cd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 37,
                  "charOffset": 1472,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 37,
                  "charOffset": 1411,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint8_t data[1024];\n    ataReadSectors(device, 2, data, 1024);\n\n    uint16_t signature = readUint16(data, 56);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23781e269b8a5e3b490ef8d8d428613b80644d6cfa07cc3f540b4138fead2d5d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "56 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 43,
                  "charOffset": 1522,
                  "charLength": 2,
                  "snippet": {
                    "text": "56"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1436,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataReadSectors(device, 2, data, 1024);\n\n    uint16_t signature = readUint16(data, 56);\n\n    if(signature != 0xef53) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71cb68d779edf71a8596e74f3fde8523c8ca5b55c1aa4814bf08db24add0dbde"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xef53 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "charOffset": 1548,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xef53"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 21,
                  "charOffset": 1480,
                  "charLength": 6,
                  "snippet": {
                    "text": "    uint16_t signature = readUint16(data, 56);\n\n    if(signature != 0xef53) {\n        printf(\"Signature does not match! this is not an ext2 drive\\n\");\n        printf(\"Signature is %x\\n\", signature);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21710d6d9e6ca71262e35993af5d3506db50afada8dcd0dd9d844d4b00d39401"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "charOffset": 1841,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 32,
                  "charOffset": 1704,
                  "charLength": 4,
                  "snippet": {
                    "text": "    fs->superBlock.inodeCount = readUint32(data, 0);\n    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3bd9b475668952652a220da90ed945f293a4a7a96293fa3ffa10b0e5ed8b744"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 58,
                  "charOffset": 1867,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 58,
                  "charOffset": 1704,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.inodeCount = readUint32(data, 0);\n    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c5ffcc2672baba76ca99a35659dfcf28258d51248476d64f6150cd2f24fb227"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 56,
                  "charOffset": 1928,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 56,
                  "charOffset": 1757,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1d9d3caccc9c4d33a888b8b76d6ee3abee274315d15633a51a442214ff5e5a2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 56,
                  "charOffset": 1988,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 56,
                  "charOffset": 1810,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n\n    uint32_t major = readUint32(data, 76);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebeef769258ddc7c7e688f52dceb4f5c7c98831de86d22cb96c00df08d9b960"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "76 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 39,
                  "charOffset": 2032,
                  "charLength": 2,
                  "snippet": {
                    "text": "76"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 39,
                  "charOffset": 1933,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n\n    uint32_t major = readUint32(data, 76);\n\n    //TODO: read extended fields"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "677d660e3e8d312e10f56e01f136ff953799612dc8c6e0d2050d2fb8c615e33f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 5,
                  "charOffset": 2042,
                  "charLength": 28,
                  "snippet": {
                    "text": "//TODO: read extended fields"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 5,
                  "charOffset": 1994,
                  "charLength": 28,
                  "snippet": {
                    "text": "    uint32_t major = readUint32(data, 76);\n\n    //TODO: read extended fields\n    if(major >= 1) {\n        fs->superBlock.inodeSize = readUint16(data, 88);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "584e83efb26f68671acbf2bc796dd303934a3625f3e300a38ff824b3fb9cf2b1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "88 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 53,
                  "charOffset": 2144,
                  "charLength": 2,
                  "snippet": {
                    "text": "88"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 53,
                  "charOffset": 2038,
                  "charLength": 2,
                  "snippet": {
                    "text": "    //TODO: read extended fields\n    if(major >= 1) {\n        fs->superBlock.inodeSize = readUint16(data, 88);\n    } else {\n        fs->superBlock.inodeSize = 128;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6969bdbb08d07483cb971ed7aec7e8ea9ce4a5e0e57dce82be77ae5c6311aea"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 36,
                  "charOffset": 2197,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 36,
                  "charOffset": 2092,
                  "charLength": 3,
                  "snippet": {
                    "text": "        fs->superBlock.inodeSize = readUint16(data, 88);\n    } else {\n        fs->superBlock.inodeSize = 128;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a62ff1b987b3e3c460df899034635116ddddc7fbd4193f4b4e216d6f216f4eb6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'readBlockGroupDescriptor' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 6,
                  "charOffset": 2231,
                  "charLength": 24,
                  "snippet": {
                    "text": "readBlockGroupDescriptor"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 6,
                  "charOffset": 2223,
                  "charLength": 24,
                  "snippet": {
                    "text": "}\n\nvoid readBlockGroupDescriptor(IdeDevice* device, Ext2Fs* fs) {\n    fs->numGroups = fs->superBlock.blockCount / fs->superBlock.numBlocksInGroup;\n    if(fs->superBlock.numBlocksInGroup*fs->superBlock.blockCount < fs->numGroups) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "865152b9fbcc31d33b47557fd517e1095e8e0d9741760e97ec0401e866b9de58"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 31,
                  "charOffset": 2680,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 31,
                  "charOffset": 2486,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->blockDescriptors = malloc(fs->numGroups * sizeof(Ext2BlockDescriptor));\n    // SuperBlock starts at 1024, and the block group descriptor is the block after\n    int blockDescriptorSize = 32;\n\n    uint32_t blockTableSize = (blockDescriptorSize*fs->numGroups);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d70fe73d1955085314d2bbb88cc48498c39a1274855992f6e3f3236e809ca2a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 31,
                  "charOffset": 3161,
                  "charLength": 1,
                  "snippet": {
                    "text": "1"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 31,
                  "charOffset": 2993,
                  "charLength": 1,
                  "snippet": {
                    "text": "    Ext2RawBlockDescriptor* rawDescriptors = (Ext2RawBlockDescriptor*) descriptorData;\n    for(uint32_t j = 0; j < numBlocksTaken; j++) {\n        readBlock(device, fs, 1+j, (uint8_t*) rawDescriptors + j*fs->superBlock.blockSize);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3ef50cc76f3e41cc59e4af0674a2c99a249290ca631dee7419043583c6134e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'gdt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "charOffset": 27,
                  "charLength": 3,
                  "snippet": {
                    "text": "gdt"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 10,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include <gdt.h>\n\nGdtEntry gdt[DESCRIPTOR_COUNT];\nGdtPtr gdtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "540f5dbd9c1117e17d34c3594983225fec5d5929bea2a35d33dd1f2b5258bcff"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'gdtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 8,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "gdtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 8,
                  "charOffset": 17,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nGdtEntry gdt[DESCRIPTOR_COUNT];\nGdtPtr gdtPtr;\n\nvoid initializeGdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "695cb9abb8f9e806196e91d47188daf5a68cecc92d3a7f292f643cfd6c05e07e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeGdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "charOffset": 71,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeGdt"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 6,
                  "charOffset": 50,
                  "charLength": 13,
                  "snippet": {
                    "text": "GdtPtr gdtPtr;\n\nvoid initializeGdt() {\n    gdtPtr.limit = sizeof(gdt)-1;\n    gdtPtr.base = (uint32_t) gdt;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "113a8dda487d538d6b1f71382255452eb8b5b69b0e577f944c829636c7d0abb4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 23,
                  "charOffset": 549,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 23,
                  "charOffset": 443,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1a9f36c3e3c0ce2547f5cbe6289501f68c0b4ae35cd90f5a8b9b642e96444fc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x9A is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 35,
                  "charOffset": 561,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x9A"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 35,
                  "charOffset": 443,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "410616308634af53e00cc8783da52c42c2bb28484f5ea93c48148afc3ccecb6c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 41,
                  "charOffset": 567,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 41,
                  "charOffset": 443,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d55cd187703bde99007814277055bcf7d4d8b8330f531e648288e6c429d1a8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 23,
                  "charOffset": 866,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 23,
                  "charOffset": 760,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0165165ad22c6c975d06b37d145a1f1334034e7d981414b48ec92d4db247ce5f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x92 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 35,
                  "charOffset": 878,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x92"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 35,
                  "charOffset": 760,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a70d5f6386816b15f4f222d9ec0774e97d54f3bb2f4ac561d7320007c93ad60"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 41,
                  "charOffset": 884,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 41,
                  "charOffset": 760,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74aad77d7794f4726ccecb18ff9fdd32f83134f24fc75751e5d3d7f58870b105"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 23,
                  "charOffset": 1235,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 23,
                  "charOffset": 1129,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6951a2ab60090763612a402c4ac3c588a6454ed305c34eda89e8f06036e320f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFA is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "charOffset": 1247,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFA"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 35,
                  "charOffset": 1129,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3650724e0008c0da43f5a126901f241ed4aa75244f6ff4944fdb8227a54c1b5b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 41,
                  "charOffset": 1253,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 41,
                  "charOffset": 1129,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31af49bd2ac8e1cd3dd320361a082813fc71abdfddf16f8cc081ab1bc857de9c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 23,
                  "charOffset": 1552,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 23,
                  "charOffset": 1446,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f67ead6ced8cc8392524af1a0dc66c20b7f3cb76925703a23170940e619d5cf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF2 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 35,
                  "charOffset": 1564,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xF2"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 35,
                  "charOffset": 1446,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e5738f0307a9a5a6cb166d171dca0965b8ad611fe63b22c8fd1cfdae474e2c6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 41,
                  "charOffset": 1570,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 41,
                  "charOffset": 1446,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc5fe77c6c2a9022f4b6d76ce9c62bb17ce6fd4cd46695d2e85fd8cd34988204"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 40,
                  "charOffset": 1839,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 40,
                  "charOffset": 1741,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b8b5ec996f01f2c428281cb9f5d5c2069cfd9633d49b7ff2daf41c4ba15e992"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "charOffset": 1888,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 42,
                  "charOffset": 1742,
                  "charLength": 2,
                  "snippet": {
                    "text": "    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6b8e1c0da7aff52433684dbdf3ca6aa39fb7f10421193d66529d8f566ed7075"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "charOffset": 1894,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 48,
                  "charOffset": 1742,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51de87223049b8a7ae3b1a66573cbc180c2e061155d4ea416140f6db973a66eb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 43,
                  "charOffset": 1942,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 43,
                  "charOffset": 1800,
                  "charLength": 2,
                  "snippet": {
                    "text": "    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147412d4f0009179b389b5245d16a8c04e0863fcb9d43a7e091d46cb477e8291"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 48,
                  "charOffset": 1947,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 48,
                  "charOffset": 1800,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "081ecc3eb28c619357630ea3fb0f0a603f3629763f121feb974ec57ab8825394"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 35,
                  "charOffset": 2244,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 35,
                  "charOffset": 2185,
                  "charLength": 6,
                  "snippet": {
                    "text": "     * of limit.\n     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dc53345362b67e4e3c2eca1f786947570478ca150320569614e14c660734d4a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 30,
                  "charOffset": 2281,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 30,
                  "charOffset": 2202,
                  "charLength": 2,
                  "snippet": {
                    "text": "     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n\n    entry->access = access;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36977ad52d2c619b8f8eb6d6b27b57f910e28665331f195be618b69be5f68516"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 36,
                  "charOffset": 2287,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 36,
                  "charOffset": 2202,
                  "charLength": 4,
                  "snippet": {
                    "text": "     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n\n    entry->access = access;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2faae89574ba51e116297b8c453d7520327cc59c90d19aad63fcad622c37bcb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 44,
                  "charOffset": 2408,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xF0"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 44,
                  "charOffset": 2322,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Only need the high 4 bits of flags\n    entry->flags = entry->flags | (flags & 0xF0);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "626b9a67333e3fca36972e5ef60baf46313c33649c2c679e5cb9d710664b9aa2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 384,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 292,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->buffer = buffer;\n    canvas->colorSpace = colorSpace;\n    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2920aef57038417c491d8f583bcee735d97a078f6b4f837ed8cde2d24eefbb0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 415,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 321,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->colorSpace = colorSpace;\n    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec2ff26ab30c0cf9ddc1d79e3901edc5e151ee75d53ed088a1e5598584583099"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "charOffset": 446,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 358,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8168fdd204505e803c56a6c74c663b2ec5a1f0c6c378cb4f0ac520bfc5aa912f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'drawCharacter' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 847,
                  "charLength": 13,
                  "snippet": {
                    "text": "drawCharacter"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 6,
                  "charOffset": 839,
                  "charLength": 13,
                  "snippet": {
                    "text": "}\n\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d33e2b2eba26eb628408239cbc0264927064300a36aeb29f15096eb89fe5ca9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "charOffset": 912,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 12,
                  "charOffset": 841,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7487c0d790fdbc75364fca3d922f1ac6123908e879a697f85f6f5b6a9e71dc86"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "127 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 22,
                  "charOffset": 922,
                  "charLength": 3,
                  "snippet": {
                    "text": "127"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 22,
                  "charOffset": 841,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5173c6dfde202922c4481d6058044ae944264d21aff7c8d7b2023d010f3338ee"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "charOffset": 926,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 26,
                  "charOffset": 841,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dc6b6617442a159216744d32492c2630c28bc160039906e290a1293dec1c993"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 52,
                  "charOffset": 1184,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 52,
                  "charOffset": 1026,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint32_t fontHeight = canvas->fontHeight;\n    PsfFont font = defaultFont; //Todo: store font in canvas\n    PsfCharacter character = font.characterTable[c-32];\n    int bytesPerPixel = canvas->bpp/8;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3546c6d140835cf72050860d45d4165e0d575d5e0590a864b1465ff4d730eac1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 36,
                  "charOffset": 1433,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 36,
                  "charOffset": 1288,
                  "charLength": 2,
                  "snippet": {
                    "text": "        for(uint32_t drawX = 0; drawX < fontWidth; drawX++) {\n            uint32_t fontX = drawX*8/fontWidth;\n            uint32_t fontY = drawY*16/fontHeight;\n\n            if((drawX + x) >= canvas->width || (drawY + y) >= canvas->height) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db3cf7c0d4ba560a1d8cec6142b0b9167b5dc2ff556cbb06fc81fc2b08daab6e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 29,
                  "charOffset": 1745,
                  "charLength": 13,
                  "snippet": {
                    "text": "bytesPerPixel"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 29,
                  "charOffset": 1613,
                  "charLength": 13,
                  "snippet": {
                    "text": "            uint8_t isColored = character.bitmap[fontY] & (1 << (7-fontX));\n            if(isColored) {\n                int index = bytesPerPixel*(drawX + x) + (drawY + y)*canvas->pitch;\n                RgbColor color = canvas->textColor;\n                canvas->buffer[index+2] = color.r;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ffdf7747e58f050a139c73fa9411fe4ca0dc618bddf82a562b1f6a3766ea730"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 21,
                  "charOffset": 2169,
                  "charLength": 6,
                  "snippet": {
                    "text": "canvas"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 21,
                  "charOffset": 2099,
                  "charLength": 6,
                  "snippet": {
                    "text": "    const char* sPtr = s;\n    int characterX = x;\n    int fontWidth = canvas->fontWidth;\n    int characterSpacing = 2;\n    for(char c = *sPtr; c; c = *++sPtr) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9be071f0e13094bf9daa91b40cc2645cd86ee1a2050b3709e455d2ee8f65fe8d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-inconsistent-declaration-parameter-name",
          "ruleIndex": 709,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'setIdtEntry' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/include/idt.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "charOffset": 434,
                  "charLength": 11,
                  "snippet": {
                    "text": "setIdtEntry"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 406,
                  "charLength": 11,
                  "snippet": {
                    "text": "\nvoid initializeIdt();\nvoid setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t ring);\n\n#endif //OS_IDT_H"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5412bec782d5e000df2097fc2465590c988a1a044e94c6ee26374240a5c423bf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 406,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 49,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bcf5e4affb3aa925eb478988381d379211cb11ad8dbcbdd110e48c4a9efee48"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 49,
                  "charOffset": 791,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 633,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d25cff40534c7134e6719f72d95675348b29b7eb3ffb42b10ee3ba2c223145"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0e8d30f0083da69ff0a53116d6dc7ba2e43c8ae617d3fc5fbc33e45352796c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1473,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1309,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1530,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238109d015d441b8ba45b6ddd2ebc7b8d3b42ff2675cfc66dda4f4f4129b733a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1587,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0d5b8259a80a32383b531c86d185e876a013efdd7d972721780fa53deeb374"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1644,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb9f574b671be9cb1b3a09d6b23413a98ffd04d746f560cdd7b2133085491812"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1be7594d079553ece2e8f1a832f2fec44f5dc9db4d39751d0a05014ee8620f62"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1758,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d065df231c449150dfd0ae2d29ceb68ce44dcf9f3f4bb93ed4060dc1ae93f3c6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1815,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1651,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "754dbfb9b20aa4bde4c0078283122d200a35272432ead4f40435eb12f85fd4b3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1929,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35136b4141054908251da635b77db18b1a996b7a0cd4a23510e428dc284c9884"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1986,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 2043,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46491eb6d71f047310a6306dff66e4b4a21c76c0a9848a0c770b18318ba0ac63"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "charOffset": 2100,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a60c02846044612ad6fc0b90c22c6958d320fff89cdb063d08cbd2acfb8eee79"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2300,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e493f580fe27eeb09e75a9a21ab071090dbaf66edeed5917821a4b70de5bb3b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9532a47803da554826499e9fc0b54ef96ac21b2b700664587c460fa5e501b01e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d1e48ae87568fb27671cb9ce8846d445de4dfdc975f11ff3db2bc3858f24649"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2651,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 45,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f9cb64081b4f443bd36dfc13cded13f5620ac61e8d2d2b10863435f29494f6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2753,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2607,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'exceptionMessages' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 7,
                  "charOffset": 64,
                  "charLength": 17,
                  "snippet": {
                    "text": "exceptionMessages"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 7,
                  "charOffset": 40,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\nchar* exceptionMessages[32] = {\n        \"Divide By Zero\",\n        \"Debug\","
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "408701b7c879e30750c00c0dfa3dd79df18ee41102067a0bb6b3c9c37df907c4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 25,
                  "charOffset": 82,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 25,
                  "charOffset": 40,
                  "charLength": 2,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\nchar* exceptionMessages[32] = {\n        \"Divide By Zero\",\n        \"Debug\","
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb417f26fa5ff8a26a4050bb620ee0a91ccfe3bfffc57c79bb1d7414eaa4906"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 31,
                  "charOffset": 940,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 31,
                  "charOffset": 866,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid finalExceptionHandler(Register reg) {\n    if (reg.interruptNumber < 32) {\n        printf(\"EXCEPTION: %s (err code is %d)\\n\", exceptionMessages[reg.interruptNumber], reg.errno);\n        isr handler = interruptHandlers[reg.interruptNumber];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a612149b4617b942b4f7160771d0f112abc0c17b06d55b2cb372016b27e353d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21,
                  "charOffset": 1131,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 21,
                  "charOffset": 946,
                  "snippet": {
                    "text": "        printf(\"EXCEPTION: %s (err code is %d)\\n\", exceptionMessages[reg.interruptNumber], reg.errno);\n        isr handler = interruptHandlers[reg.interruptNumber];\n        if (handler) handler(&reg);\n        for (;;);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58f10c246cb90fc0ee6e6fe47951270adeb6ad31502af30d7b807b04056cdd4e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1163,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1049,
                  "charLength": 1,
                  "snippet": {
                    "text": "        isr handler = interruptHandlers[reg.interruptNumber];\n        if (handler) handler(&reg);\n        for (;;);\n    }\n    if (interruptHandlers[reg.interruptNumber] != 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8648f2fa839be5db9cdc1da60461ecc593bb31e97e8f8b4d1f9b852e81bbee0b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'interruptHandlers' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 59,
                  "charLength": 17,
                  "snippet": {
                    "text": "interruptHandlers"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 37,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include \"pic.h\"\n\nisr interruptHandlers[256];\n\n/*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d44b4b87873d6d15e68e4a93123d7c37821c2d23f28e4db7df6d54ada834fa3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "charOffset": 77,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 23,
                  "charOffset": 37,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"pic.h\"\n\nisr interruptHandlers[256];\n\n/*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09fa8a819d2cd16266d0bdad8a964572258052acb4e88ac6681a70c86eb60886"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "charOffset": 309,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 15,
                  "charOffset": 235,
                  "charLength": 3,
                  "snippet": {
                    "text": " * */\nvoid registerInterruptHandler(int num, isr handler) {\n    if (num < 256)\n        interruptHandlers[num] = handler;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e39491e43be3b8dca6903badccc0ce0e26b9dbf87a66025f9119632889980d1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 19,
                  "charOffset": 313,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 19,
                  "charOffset": 235,
                  "snippet": {
                    "text": " * */\nvoid registerInterruptHandler(int num, isr handler) {\n    if (num < 256)\n        interruptHandlers[num] = handler;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62ddcf9f73f56564f8ecee981db614a6f23598bf2deaac6e8b52923db6ab5bb0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 23,
                  "charOffset": 360,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 23,
                  "charOffset": 305,
                  "snippet": {
                    "text": "        int diff = a[i] - b[i];\n\n        if (diff != 0) return diff;\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f390ff12666a4f6de7dc657c358c28d61a302dd9d0bba2d4cf52a405926c453"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 42,
                  "charOffset": 937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 42,
                  "charOffset": 817,
                  "snippet": {
                    "text": "    const unsigned char* src = (const unsigned char*) p2;\n    if (dst < src) {\n        for (size_t i = 0; i < size; i++)\n            dst[i] = src[i];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66c828df062eac1f37516985f9196cff86b98622d56250d1d1f87e9647753951"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "charOffset": 1022,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 43,
                  "charOffset": 938,
                  "snippet": {
                    "text": "            dst[i] = src[i];\n    } else {\n        for (size_t i = size; i != 0; i--)\n            dst[i - 1] = src[i - 1];\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec52af0d54aea32ee6def231ed55f1448a5186dc0f245f2de5b7ad6255cecbf6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "charOffset": 1242,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 38,
                  "charOffset": 1084,
                  "snippet": {
                    "text": "__attribute__((unused)) void* memset(void* ptr, int value, size_t size) {\n    unsigned char* dst = (unsigned char*) ptr;\n    for (size_t i = 0; i < size; i++)\n        dst[i] = (unsigned char) value;\n    return ptr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "829ecafd69f47d65a777776dc4bf754cf8e4fb700d72cd964001ea379f34e301"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'tableAllocatorPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 17,
                  "snippet": {
                    "text": "tableAllocatorPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 7,
                  "charOffset": 495,
                  "charLength": 17,
                  "snippet": {
                    "text": " */\n\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03c5ad5090ea93af872a64132ba816f9e11d351b8e9466baba7425c1e5ee420a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'tableAllocatorPtr' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 17,
                  "snippet": {
                    "text": "tableAllocatorPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 7,
                  "charOffset": 495,
                  "charLength": 17,
                  "snippet": {
                    "text": " */\n\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe42d1ece49c96c94075d9f5b2ee2034fad5eb9fabf297f188c7d184af68a554"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'isPagingEnabled' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "charOffset": 529,
                  "charLength": 15,
                  "snippet": {
                    "text": "isPagingEnabled"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 5,
                  "charOffset": 499,
                  "charLength": 15,
                  "snippet": {
                    "text": "\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147c311fdcd4ed2c968500a7603898c7a4595c6a8779b69f0f3e14d9f0854b81"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageDirectory' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "charOffset": 566,
                  "charLength": 13,
                  "snippet": {
                    "text": "pageDirectory"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 525,
                  "charLength": 13,
                  "snippet": {
                    "text": "int isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;\n\n/**"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8177b7123e15ad5bb4a5a3bff39c042a8422814145dd71c7182cbeb5a95636c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageDirectory' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "charOffset": 566,
                  "charLength": 13,
                  "snippet": {
                    "text": "pageDirectory"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 525,
                  "charLength": 13,
                  "snippet": {
                    "text": "int isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;\n\n/**"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ebe94c9b49d29058cb1120abd8933312898ffbbe29a281edec33781c52d7e5d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "charOffset": 1182,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 25,
                  "charOffset": 989,
                  "snippet": {
                    "text": "void* convertVirtualToPhysical(PageDirectory* dir, uint32_t virtualAddress) {\n    // if we haven't set up the page directory, we just need to subtract the load address.\n    if(!isPagingEnabled) return (void*) (virtualAddress - LOAD_MEMORY_ADDRESS);\n\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9841b3f0053fab3da5df66f63184e31b5afa9aa6895010126df9021f981f3380"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 33,
                  "charOffset": 1190,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 33,
                  "charOffset": 989,
                  "charLength": 1,
                  "snippet": {
                    "text": "void* convertVirtualToPhysical(PageDirectory* dir, uint32_t virtualAddress) {\n    // if we haven't set up the page directory, we just need to subtract the load address.\n    if(!isPagingEnabled) return (void*) (virtualAddress - LOAD_MEMORY_ADDRESS);\n\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a043fe6f160c597dca940497caeec8cd4f735508b1b4bf085356401b9ade90a4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-core.NullDereference",
          "ruleIndex": 225,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Array access (via field 'pages') results in a null pointer dereference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 28,
                  "charOffset": 1562,
                  "charLength": 5,
                  "snippet": {
                    "text": "table"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 28,
                  "charOffset": 1528,
                  "charLength": 5,
                  "snippet": {
                    "text": "    }\n\n    PageTableEntry entry = table->pages[tableIndex];\n    if (!entry.present) {\n        printf(\"Page table entry at %d does not exist\", dirIndex);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "217d40a5de27f5ed46492bfe8485e5211c2e6bf0cb06324454ad6fa00443c579"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 23,
                  "charOffset": 1744,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 23,
                  "charOffset": 1687,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint32_t frame = entry.frame;\n\n    frame = (frame << 12) + pageIndex;\n\n    return (void*) frame;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e03a84b341b6a6384c05fd42c39fe993317b9f9b8c53597daf41b54090fc2656"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 12,
                  "charOffset": 1773,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 12,
                  "charOffset": 1722,
                  "charLength": 1,
                  "snippet": {
                    "text": "    frame = (frame << 12) + pageIndex;\n\n    return (void*) frame;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6024ee1e1408ec11e611247bd7499577214f68a9be008a59d31db4c5ce43cd85"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "charOffset": 2246,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 16,
                  "charOffset": 2184,
                  "snippet": {
                    "text": "\n    PageTable* table = dir->tables[dirIndex];\n    if (!table) return 0;\n\n    PageTableEntry entry = table->pages[tableIndex];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf175026b748d14f86f7fcee585821ac14e7b57d34089b3086e5bcab1cebd5a1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'allocatePhysicalPage' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "charOffset": 2345,
                  "charLength": 20,
                  "snippet": {
                    "text": "allocatePhysicalPage"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 6,
                  "charOffset": 2337,
                  "charLength": 20,
                  "snippet": {
                    "text": "}\n\nvoid allocatePhysicalPage(PageDirectory* dir, uint32_t virtualAddress, uint32_t physicalAddress) {\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);\n    uint32_t tableIndex = getTableIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4c58f4519ab030d8111c4497f556a59b3ac00ceaac7989148dc9bdfeff14094"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "charOffset": 2726,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 9,
                  "charOffset": 2657,
                  "charLength": 6,
                  "snippet": {
                    "text": "    if (!table) {\n        table = malloc(sizeof(PageTable));\n        memset(table, 0, sizeof(PageTable));\n\n        //We need a physical address."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78bd12afccdee3344bb11d6462f77ceaf684425a2171c992baa42c41314d05ad"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 35,
                  "charOffset": 2983,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 35,
                  "charOffset": 2887,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        PageDirectoryEntry* entry = &dir->entries[dirIndex];\n        entry->frame = address >> 12;\n        entry->present = 1;\n        entry->writable = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95c5046fbf393ca7e2609affeff52ed65f42b84f6f1767ccc5f0d21e922cc2ec"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'allocatePage' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 6,
                  "charOffset": 3480,
                  "charLength": 12,
                  "snippet": {
                    "text": "allocatePage"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 6,
                  "charOffset": 3472,
                  "charLength": 12,
                  "snippet": {
                    "text": "}\n\nvoid allocatePage(PageDirectory* dir, uint32_t virtualAddress) {\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);\n    uint32_t tableIndex = getTableIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8f13cc85e5eab59129c036c7d9a570f05a3e41b2e7fee2c3966d9b6f07ce0ee"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 9,
                  "charOffset": 3827,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 3758,
                  "charLength": 6,
                  "snippet": {
                    "text": "    if (!table) {\n        table = malloc(sizeof(PageTable));\n        memset(table, 0, sizeof(PageTable));\n\n        //We need a physical address."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc6cca757b543ac9eb5af5461d5212822733b11a383d6bfaea4a7518f8777a5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 35,
                  "charOffset": 4084,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 35,
                  "charOffset": 3988,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        PageDirectoryEntry* entry = &dir->entries[dirIndex];\n        entry->frame = address >> 12;\n        entry->present = 1;\n        entry->writable = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0de5ba5bdd96409cf60bb60ff1f21f1a3d411cd9eaa5999bec41d53c84f8448"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 45,
                  "charOffset": 4879,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 45,
                  "charOffset": 4757,
                  "charLength": 4,
                  "snippet": {
                    "text": "    uint32_t rw = errorCode & 0x02;\n    uint32_t reserved = errorCode & 0x08;\n    uint32_t instructionFetch = errorCode & 0x10;\n\n    printf(\"Possible causes:\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "321e446285b9ca73a36f3a2c7809207432927b53a8696db3c9fe0b03b86a2b2a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 18,
                  "charOffset": 4937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 18,
                  "charOffset": 4885,
                  "snippet": {
                    "text": "\n    printf(\"Possible causes:\\n\");\n    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dd30ce330f5aa80528382e942ede1d30495974b948b813df52d0a4a27cf2190"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 12,
                  "charOffset": 4982,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 12,
                  "charOffset": 4886,
                  "snippet": {
                    "text": "    printf(\"Possible causes:\\n\");\n    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b60eaacf7e5442c9a7044f1009e7f23265076ab3ed0ad6d38f3e1132a36799ba"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 18,
                  "charOffset": 5031,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 18,
                  "charOffset": 4920,
                  "snippet": {
                    "text": "    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");\n    printf(\"\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cdf65e248496d1b5173f47befc687dede45568ca4ed903f026e770915a20c44d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 26,
                  "charOffset": 5093,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 26,
                  "charOffset": 4971,
                  "snippet": {
                    "text": "    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");\n    printf(\"\\n\");\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4970f73e127840533098539e2bb49508334a1038d6c5f62cf60ac30826d1dc9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 5,
                  "charOffset": 5181,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 5,
                  "charOffset": 5154,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faac0a188eff621f69d8a3df00929a806b354277646d3f5faa2eee15ae2c5a7c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cr0' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 14,
                  "charOffset": 5190,
                  "charLength": 3,
                  "snippet": {
                    "text": "cr0"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 14,
                  "charOffset": 5154,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a339f475a299e433cdf3a641e377b6f145057909b0ae76415f542b4874deea28"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cr4' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 19,
                  "charOffset": 5195,
                  "charLength": 3,
                  "snippet": {
                    "text": "cr4"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 19,
                  "charOffset": 5154,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f801ad5aad3c020f5f5efa4379daf1774705daabdddc255e3e28b0c598468bd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 5264,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 13,
                  "charOffset": 5200,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));\n    cr4 &= ~0x10;\n    __asm__ volatile(\"mov %0, %%cr4\"::\"r\"(cr4));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "035a29e2628470f24d00b02a8726d9a475b4efd6d9df36be54f7b30ccb8269f5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 12,
                  "charOffset": 5382,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x80000000"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 12,
                  "charOffset": 5319,
                  "charLength": 10,
                  "snippet": {
                    "text": "\n    __asm__ volatile(\"mov %%cr0, %0\" : \"=r\"(cr0));\n    cr0 |= 0x80000000;\n    __asm__ volatile(\"mov %0, %%cr0\"::\"r\"(cr0));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "763d6399cf7034e0d782b010692ef930f8a71ae6d3d377d4efbc30f4f1fb316b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 16,
                  "charOffset": 5813,
                  "charLength": 9,
                  "snippet": {
                    "text": "0x0000FFF"
                  }
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 16,
                  "charOffset": 5743,
                  "charLength": 9,
                  "snippet": {
                    "text": " */\nstatic inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "538d796be2e5c56820bca9c098320ba4f05f9c9a4dae677e91d4a1dd5f745974"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 32,
                  "charOffset": 5829,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 32,
                  "charOffset": 5743,
                  "snippet": {
                    "text": " */\nstatic inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87f1737c0009b2065286b067734e265a090dff92bb14c7417285c90c138e4693"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFF000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "charOffset": 5860,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFF000"
                  }
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 19,
                  "charOffset": 5747,
                  "charLength": 10,
                  "snippet": {
                    "text": "static inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aaeb95bb098d512c5ce75a11f1fdb7507f753307fad207a167283d5376ae69cd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 33,
                  "charOffset": 5874,
                  "charLength": 6,
                  "snippet": {
                    "text": "0x1000"
                  }
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 33,
                  "charOffset": 5747,
                  "charLength": 6,
                  "snippet": {
                    "text": "static inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "879e7f8984245b097db638a6fac63db0ba62ba582d495da6caad370bdda49bc7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 12,
                  "charOffset": 6430,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 12,
                  "charOffset": 6412,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return (void*) alignedAddress;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "056f8db3e42e726803ad37e78d75bab82f9fa1d9e55d4a2f72129d5e7f8d61d7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'alignedAddress' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 14,
                  "charOffset": 6555,
                  "charLength": 14,
                  "snippet": {
                    "text": "alignedAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 14,
                  "charOffset": 6457,
                  "charLength": 14,
                  "snippet": {
                    "text": "void* mmap(void* address, size_t length) {\n    size_t numPages = length / PAGE_SIZE;\n    uint32_t alignedAddress;\n    if (address == NULL) {\n        //find some unallocated pages after our kernel."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3ea1d6474f746710d29aeff03b398f72b7a7c9c26fa6a9ed9402266221c59cc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 61,
                  "charOffset": 6714,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 61,
                  "charOffset": 6571,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (address == NULL) {\n        //find some unallocated pages after our kernel.\n        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e71318ecce1a911cc4cecc96dbf1b1e07a4af97cd799cf2950ba599e129e69b0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 68,
                  "charOffset": 6721,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 68,
                  "charOffset": 6571,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (address == NULL) {\n        //find some unallocated pages after our kernel.\n        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1d06f82781fa8f98850fb35c58ec624bd54856a5c88e4ced112c43229926db6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 35,
                  "charOffset": 6826,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 35,
                  "charOffset": 6654,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;\n        }\n        alignedAddress = alignToPage(addressToCheck);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b08eeaf031627baec72eff6f398db567fa0caa298f0feb9ee87a5ecb29b40f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 12,
                  "charOffset": 7340,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 12,
                  "charOffset": 7322,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return (void*) alignedAddress;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fced6490cc4d449f2ff3c5b994a2010478ae09fafda1d5714f6991ee2066eb8c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "charOffset": 7470,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 17,
                  "charOffset": 7451,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21f00eb9532c3a0140f175f8c57e570a826761dfde079b22e35d97ead8c0f95f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "charOffset": 7470,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 17,
                  "charOffset": 7451,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48922313d3d0aa28b161112f025e8bec8130adfc8b41d5a2c34e9fe81bd1220e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmapSize' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 17,
                  "charOffset": 7494,
                  "charLength": 10,
                  "snippet": {
                    "text": "bitmapSize"
                  }
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 17,
                  "charOffset": 7453,
                  "charLength": 10,
                  "snippet": {
                    "text": "\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n\nvoid initPaging() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c87a53788d3d03d29754b26b2cf9c6ddca59ce0d90989bb4279119764d7214a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 5,
                  "charOffset": 7629,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 5,
                  "charOffset": 7573,
                  "charLength": 6,
                  "snippet": {
                    "text": "    pageDirectory = malloc(sizeof(PageDirectory));\n\n    memset(pageDirectory, 0, sizeof(PageDirectory));\n\n    registerInterruptHandler(14, pageFaultHandler);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be7eb8c3a36ea1fa752c0c82239014e07f286a695a7d9a6dae8c24b62010fd1f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 30,
                  "charOffset": 7708,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 263,
                  "startColumn": 30,
                  "charOffset": 7625,
                  "charLength": 2,
                  "snippet": {
                    "text": "    memset(pageDirectory, 0, sizeof(PageDirectory));\n\n    registerInterruptHandler(14, pageFaultHandler);\n\n    // Map the 4MiB from 0xC0000000 to 0xC0400000"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d11c712944a4eca6312d870d37f9c8985d8424f17b099aeb1bfc7bf06273aa34"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 46,
                  "charOffset": 7827,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 46,
                  "charOffset": 7731,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Map the 4MiB from 0xC0000000 to 0xC0400000\n    uint32_t end = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n    for (uint32_t i = LOAD_MEMORY_ADDRESS; i < end; i += PAGE_SIZE) {\n        allocatePage(pageDirectory, i);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd4c3e42f119399ad1af8afb5f681986998c45f8611ac3b07726571b7355474d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 53,
                  "charOffset": 7834,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 53,
                  "charOffset": 7731,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Map the 4MiB from 0xC0000000 to 0xC0400000\n    uint32_t end = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n    for (uint32_t i = LOAD_MEMORY_ADDRESS; i < end; i += PAGE_SIZE) {\n        allocatePage(pageDirectory, i);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbc7b4a3e26e92d92d4db28d05c7d3ebe987dbe69395fd67a31e70d1abf1e3bc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 125,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 42,
                  "charLength": 6,
                  "snippet": {
                    "text": " * This bitmap is used to determine which pages are currently in use.\n */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "884e955d8cb5cd8792ed6b6741b7bb2ce2f2628194499e10d8e85f68dd882ab6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 125,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 42,
                  "charLength": 6,
                  "snippet": {
                    "text": " * This bitmap is used to determine which pages are currently in use.\n */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a56bb146803d904691950cc4c254ee5629164a1890e9b2bde4f778180e6e6e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageCount' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "charOffset": 142,
                  "charLength": 9,
                  "snippet": {
                    "text": "pageCount"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 10,
                  "charOffset": 112,
                  "charLength": 9,
                  "snippet": {
                    "text": " */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af6f9f72bbdae92738d039938c9275d2c5f79c831f033d72267a6c29ae16d8b3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmapSize' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "charOffset": 162,
                  "charLength": 10,
                  "snippet": {
                    "text": "bitmapSize"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 116,
                  "charLength": 10,
                  "snippet": {
                    "text": "uint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;\n\nstatic inline void setBit(uint32_t i) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fac06561f7f5351389c426f2883c65cfebcaa77a66b4dec45ec56c6ad2b5fa8b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "charOffset": 1172,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 23,
                  "charOffset": 1076,
                  "snippet": {
                    "text": "uint32_t firstFreePage() {\n    for (uint32_t i = 0; i < pageCount; i++) {\n        if (!isSet(i)) return i;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b60e1acbd24676684c012138c7bd394138c87342c04e3f36ab33e95a53cea69"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcat.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "charOffset": 116,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 20,
                  "charOffset": 59,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char* s = src;\n    char* d = dst;\n    for (; *d; d++);\n\n    for (char c = *s; c != '\\0'; c = *++s) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73fae25e621de58c83561c57cfe63a5293e58b1144d674b9949b74e6c8e83255"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'pciScan' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "charOffset": 60,
                  "charLength": 7,
                  "snippet": {
                    "text": "pciScan"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 6,
                  "charOffset": 37,
                  "charLength": 7,
                  "snippet": {
                    "text": "#include \"pci.h\"\n\nvoid pciScan(PciBus* pciBus) {\n    printf(\"Scanning PCI pciBus...\\n\");\n    int index = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdc143173c2bce4ae0ab8fdfef0a738e8d7d60488500494226dd155cf8147b45"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 28,
                  "charOffset": 173,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 28,
                  "charOffset": 126,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int index = 0;\n\n    for(int bus = 0; bus < 256; bus++) {\n        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b973d9161198d6e867df2a08b9713621dcf566c4fe9709294376bf307f499fc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 38,
                  "charOffset": 224,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 38,
                  "charOffset": 145,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    for(int bus = 0; bus < 256; bus++) {\n        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);\n            if(vendor != 0xFFFF) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11988bdb2345b27214e66e4a68053bcb7962dcff442269657ffcd177108ac8e9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 26,
                  "charOffset": 326,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 26,
                  "charOffset": 187,
                  "charLength": 6,
                  "snippet": {
                    "text": "        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);\n            if(vendor != 0xFFFF) {\n                uint8_t headerType = pciReadHeaderType(bus, device, 0);\n                uint8_t multifunction = (headerType & 0x80) != 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46a44e54cc883c2b2006a5ab34f3814a9c139ab8a3022a1ee601eabfec563ffc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 55,
                  "charOffset": 462,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 55,
                  "charOffset": 301,
                  "charLength": 4,
                  "snippet": {
                    "text": "            if(vendor != 0xFFFF) {\n                uint8_t headerType = pciReadHeaderType(bus, device, 0);\n                uint8_t multifunction = (headerType & 0x80) != 0;\n\n                for(int function = 0; function < 8; function++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "982034ee42bc1b80ad5740ef6f8cb8def2746fb401b0167fa41ae6b10d064aca"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 64,
                  "charOffset": 674,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 64,
                  "charOffset": 475,
                  "charLength": 6,
                  "snippet": {
                    "text": "                for(int function = 0; function < 8; function++) {\n                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15fd4db79395d2e89f035783dcf60d7094361229e8884c9419e4831c3d069cd2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 71,
                  "charOffset": 681,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 71,
                  "charOffset": 475,
                  "snippet": {
                    "text": "                for(int function = 0; function < 8; function++) {\n                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ffdcf9fe2ed06e2fadcc283d6a62a2a72bc8be343e36a39053a10e3899efffe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 55,
                  "charOffset": 761,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 55,
                  "charOffset": 541,
                  "snippet": {
                    "text": "                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);\n                    pciDevice->deviceId = deviceId;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4094bac005fc7a928e8dc4e78fab05661146224519120914b3d683c8cce6534"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x7F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 58,
                  "charOffset": 1367,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x7F"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 58,
                  "charOffset": 1142,
                  "charLength": 4,
                  "snippet": {
                    "text": "                    pciDevice->programmingInterface = pciReadProgrammingInterface(bus, device, function);\n                    pciDevice->multiFunction = multifunction;\n                    pciDevice->headerType = headerType & 0x7F;\n\n                    pciDevice->bus = bus;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e41996ea0406e8be72e48b688a17ce337e2e0cdb498bd2bd9fbbee78af00aaf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'scanForDeviceClass' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "charOffset": 1953,
                  "charLength": 18,
                  "snippet": {
                    "text": "scanForDeviceClass"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 12,
                  "charOffset": 1939,
                  "charLength": 18,
                  "snippet": {
                    "text": "}\n\nPciDevice* scanForDeviceClass(PciBus* pciBus, uint8_t class, uint8_t subclass) {\n    for(int i = 0; i < 20; i++) {\n        PciDevice* pciDevice = pciBus->devices[i];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef19f719520befe078424ef5218d8f955b5f7fe8e2824915ff01a389cce86710"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 2046,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 24,
                  "charOffset": 1941,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nPciDevice* scanForDeviceClass(PciBus* pciBus, uint8_t class, uint8_t subclass) {\n    for(int i = 0; i < 20; i++) {\n        PciDevice* pciDevice = pciBus->devices[i];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "402254d61f1d253e0834c6b6c9bf8b1cf7e34c87d5cd2fa2d72bd40f0bad85a6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 69,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 20,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint8_t inportByte(uint16_t port) {\n    uint8_t result;\n    __asm__ volatile(\"inb %1, %0\" : \"=a\"(result) : \"Nd\"(port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9d586ffe711d93f29828671790a68e9bf4b8631d4e833e0f2790b9784a7b4b9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "charOffset": 328,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 14,
                  "charOffset": 276,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint16_t inportShort(uint16_t port) {\n    uint16_t result;\n    __asm__ volatile (\"inw %1, %0\" : \"=a\" (result) : \"dN\" (port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36dc011e33bd25cfc868c49e56ce733098efade9b26766e2ccf62b21297a99bc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "charOffset": 593,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 14,
                  "charOffset": 543,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint32_t inportInt(uint16_t port) {\n    uint32_t result;\n    __asm__ volatile (\"inl %%dx, %%eax\" : \"=a\" (result) : \"dN\" (port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6c223c18fba8b5e5502a4d1dcaa184e817e042a320b687826f3c00570652d6e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 27,
                  "charOffset": 220,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 27,
                  "charOffset": 90,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //https://wiki.osdev.org/Serial_Ports\n    outportByte(port + 1, 0x00);    // Disable all interrupts\n    outportByte(port + 3, 0x80);    // Enable DLAB (set baud rate divisor)\n    outportByte(port + 0, 0x03);    // Set divisor to 3 (lo byte) 38400 baud\n    outportByte(port + 1, 0x00);    //                  (hi byte)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4128e09f4395d27dc76787e8d2afc1d568a31062f5b161ce85090c121f9cabab"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xC7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 509,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xC7"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 27,
                  "charOffset": 346,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 1, 0x00);    //                  (hi byte)\n    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "415aea6d00a0d07843c400eafc6d42832dccc3becbadd0676b0d1cb573351450"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0B is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 596,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0B"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 27,
                  "charOffset": 412,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2ac17dbf737e59d3bbeb91eec126576e356dedd49dc473fef6e536f0cfad74d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 661,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x1E"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 483,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ed597847e358b1bedf969f93b0f7dc1d79b056524170290d87b27cf90befc30"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 721,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 570,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n\n    // Check if serial is faulty"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c04771480a97ad81891d9f1d2756e956db2d2b93309c8333b4ecb856099ad88f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "charOffset": 836,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 33,
                  "charOffset": 770,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Check if serial is faulty\n    if (inportByte(port + 0) != 0xAE) {\n        return 1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38c61763560ca09e73e0b36b5bb3166995a3703d663af51fbb770535254d5d3b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "charOffset": 1031,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 27,
                  "charOffset": 869,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // If serial is not faulty set it in normal operation mode\n    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)\n    outportByte(port + 4, 0x0F);\n    serial->port = port;\n    serial->isInitialized = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8a37d7c532d8c6fb400701b9d12e97e2893dfd505e157ee7d7aa66e5c2cc24f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "charOffset": 1237,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 46,
                  "charOffset": 1111,
                  "charLength": 1,
                  "snippet": {
                    "text": "int updateLineStatusRegister(Serial* serial) {\n    //Read 'Line status register'\n    uint8_t line = inportByte(serial->port + 5);\n    serial->lineRegister = line;\n    return line;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dec8cd45e3f4ede3e500a2dfc374a04e1092fb6c70df3a976d1e3033aefd5f1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "charOffset": 1363,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 32,
                  "charOffset": 1293,
                  "snippet": {
                    "text": "\nint serialAvailable(Serial* serial) {\n    if (!serial->isInitialized) return 0;\n\n    //Read the LSB of the status register to see if data is available"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b674b6fc6452845c6012b44a3c8353e49ded0cde99f5a10c782f335f58c605a8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "charOffset": 1570,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 37,
                  "charOffset": 1496,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nuint8_t serialRead(Serial* serial) {\n    while (!serialAvailable(serial));\n\n    return inportByte(serial->port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a6e048199067ace5348b1f225e2527dd4eba1e8ebf06f941472d8199931da9d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 47,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 47,
                  "charOffset": 1612,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nint isSerialReadyToSend(Serial* serial) {\n    return updateLineStatusRegister(serial) & 0x20;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e16e8c190b2b7963eeb53722083b8ec3f93db78ee08034979e4fe5f87599d30"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "charOffset": 1799,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1709,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid serialWrite(Serial* serial, uint8_t byte) {\n    while (!isSerialReadyToSend(serial));\n\n    outportByte(serial->port, byte);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57c51f6093c16b6aa4b57ca8a9aaff21bef0d99d46fbf6000c516dcbe935bf0f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColors' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "charOffset": 51,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalColors"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 10,
                  "charOffset": 22,
                  "charLength": 14,
                  "snippet": {
                    "text": "#include \"color.h\"\n\nRgbColor terminalColors[] = {\n        { //black\n            .r = 0,"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e248d1b8d8246171f5139a8c220a32b06c9d21798f5daca579084ec2c897e2ea"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 18,
                  "charOffset": 234,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 18,
                  "charOffset": 177,
                  "charLength": 3,
                  "snippet": {
                    "text": "            .r = 0,\n            .g = 0,\n            .b = 255\n        },\n        { //green"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c12a1b2a1e468255b58bf43e02c892d95ca27a3b8b4d43261c984ff91967c676"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "charOffset": 312,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 22,
                  "charOffset": 249,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //green\n                .r = 0,\n                .g = 255,\n                .b = 0\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b6fcccee8cc5408e24bde2e34ea6465e3f8b3bc60b3871dadb9aedc29f3d658"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "charOffset": 413,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 22,
                  "charOffset": 351,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //cyan\n                .r = 0,\n                .g = 255,\n                .b = 255\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85c24422830256f48fa5bb19bf29fbe77bda5634e5ff3d44c9997adb157ec4a2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 22,
                  "charOffset": 439,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 22,
                  "charOffset": 368,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 0,\n                .g = 255,\n                .b = 255\n        },\n        { //red"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4023ec4feb745aebdee22b0fb0203453bf1c2051f90da52a33728928989822bf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 22,
                  "charOffset": 491,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 22,
                  "charOffset": 443,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //red\n                .r = 255,\n                .g = 0,\n                .b = 0"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4154f5315a5f83b56f631c704677f6ec118ce63c14c7c48e74b2449640a323e8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 22,
                  "charOffset": 595,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 22,
                  "charOffset": 543,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //magenta\n                .r = 255,\n                .g = 0,\n                .b = 255"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8000e882f1ffd3ccbe86635bd126069e5684a8b2b7842f5c8b3ea57007e6d2a2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "charOffset": 645,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 22,
                  "charOffset": 574,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 255,\n                .g = 0,\n                .b = 255\n        },\n        { //brown"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d20af7d60a5846aadebd8cb0a026aa8cd73bc159227b3cbb88b61e8a650dd57f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 22,
                  "charOffset": 699,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x96"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 22,
                  "charOffset": 649,
                  "charLength": 4,
                  "snippet": {
                    "text": "        },\n        { //brown\n                .r = 0x96,\n                .g = 0x4b,\n                .b = 0"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "916823f24113edcf0ec79e44d6dff9ea4a5912ec306514719141795474bf8917"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x4b is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 22,
                  "charOffset": 726,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x4b"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 22,
                  "charOffset": 660,
                  "charLength": 4,
                  "snippet": {
                    "text": "        { //brown\n                .r = 0x96,\n                .g = 0x4b,\n                .b = 0\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e97de1cd26f73067199a61dfaac1c9dffad5c8483405ebcd9f8b43e31708953"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 22,
                  "charOffset": 810,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 22,
                  "charOffset": 755,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //light gray\n                .r = 200,\n                .g = 200,\n                .b = 200"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ae506c0e6973ddaafa3f665a288954de5c90a0ace1b5a58e45990262575f11d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 22,
                  "charOffset": 836,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 22,
                  "charOffset": 766,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //light gray\n                .r = 200,\n                .g = 200,\n                .b = 200\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15c66b9900820ffa5ad29c79369ec908055b62b398e9546a5938f7756749165d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 22,
                  "charOffset": 862,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 22,
                  "charOffset": 789,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 200,\n                .g = 200,\n                .b = 200\n        }\n};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e767a8924ea89b327a0c10bd645c8f798f505ccafcf5d7f73e0c89b17ccd0e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "charOffset": 960,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 21,
                  "charOffset": 880,
                  "snippet": {
                    "text": "size_t kernel_strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9b9a46e8f6a2480caa57502ce3ad6bed0803e893b20e1354c6b2f616adfa637"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 38,
                  "charOffset": 1928,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 38,
                  "charOffset": 1837,
                  "snippet": {
                    "text": "\nvoid terminal_write(const char* data, size_t size) {\n    for (size_t i = 0; i < size; i++)\n        terminalPutChar(data[i]);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab00c91d35cbcf3bfe26f2becb2bc890f12f2a76790815ae450e6d0c3b211897"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "charOffset": 119,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 15,
                  "charOffset": 87,
                  "charLength": 2,
                  "snippet": {
                    "text": "\ntypedef struct {\n    char name[12];\n    CpuFeatures features;\n} CpuIdInfo;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "819dc866c8d50c596c313d417062857898099513ef0701ad598244acc7e18885"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cpuInfo' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 11,
                  "charOffset": 174,
                  "charLength": 7,
                  "snippet": {
                    "text": "cpuInfo"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 11,
                  "charOffset": 150,
                  "charLength": 7,
                  "snippet": {
                    "text": "} CpuIdInfo;\n\nCpuIdInfo cpuInfo;\n\nvoid setCpuVendor(char* name) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c8a9145112f06bb35c90a1e05ba7b5230da0c08d22507ee19cf8ff1290a4baf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'length' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "charOffset": 220,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 183,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid setCpuVendor(char* name) {\n    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22761c8eb395a287a54e6ec15d6b37373e847f7541eede07c3c866053c6a923c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 18,
                  "charOffset": 233,
                  "charLength": 6,
                  "snippet": {
                    "text": "strlen"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 18,
                  "charOffset": 183,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nvoid setCpuVendor(char* name) {\n    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f157b34920a259effe827c395aa75ddb872b16d9a674be6cef204129af37542"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "charOffset": 363,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 32,
                  "charOffset": 216,
                  "charLength": 2,
                  "snippet": {
                    "text": "    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a9aebad0b1383289eded14e93833087d712be000443dcb64c565e33e73da2e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "charOffset": 153,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 15,
                  "charOffset": 104,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setCpuVendor(\"GenuineIntel\");\n\n    char name[13];\n    getVendorIdString(name, 13);\n    ASSERT_STREQ(name, \"GenuineIntel\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80ddb63c70841558cf6b4515b989f5aa5de9cec3582f8b6f2443d4e3c7c8c08f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 29,
                  "charOffset": 186,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 29,
                  "charOffset": 138,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    char name[13];\n    getVendorIdString(name, 13);\n    ASSERT_STREQ(name, \"GenuineIntel\");\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff6c1dd8b387e82630850342c1421e97d95877f2809cbf02637dfef07cfc17b2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 29,
                  "charOffset": 260,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 29,
                  "charOffset": 191,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_STREQ(name, \"GenuineIntel\");\n\n    getVendorIdString(name, 6);\n    ASSERT_STREQ(name, \"Genu\");\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28896516544dc2151841170a820c71d219f0fd53b3402368a715cc1b723290cb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 325,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 29,
                  "charOffset": 264,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_STREQ(name, \"Genu\");\n\n    getVendorIdString(name, 9);\n    ASSERT_STREQ(name, \"GenuineI\");\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f9bf66f64c2ca07a87dd981cecfcf54aa87618b1d28ece48ae8d7d67c0dcfb2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x01234567 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "charOffset": 448,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x01234567"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 21,
                  "charOffset": 368,
                  "charLength": 10,
                  "snippet": {
                    "text": "TEST(CpuIdTest, GetCpuFeatures) {\n    CpuFeatures features;\n    features.raw1 = 0x01234567;\n    features.raw2 = 0xFEDCBA98;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab4da26dc60a8a2d48ccedeab53c7f0a740816a5a3769ce330a4a820d107567f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFEDCBA98 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "charOffset": 480,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFEDCBA98"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 21,
                  "charOffset": 402,
                  "charLength": 10,
                  "snippet": {
                    "text": "    CpuFeatures features;\n    features.raw1 = 0x01234567;\n    features.raw2 = 0xFEDCBA98;\n\n    setFeatures(features);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39cac65794e34049aecb09355504c611eecb5cac12904ad0b9e6e8ff89edd468"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'address' of type 'uint32_t' (aka 'unsigned int') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 5,
                  "charOffset": 1189,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid assertEntry(int index, void* rawAddress) {\n    uint32_t address = (uint64_t) rawAddress;\n    ASSERT_EQ((uint16_t)(address & 0xFFFF), idt[index].baseLow);\n    ASSERT_EQ((uint16_t)((address >> 16) & 0xFFFF), idt[index].baseHigh);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd2220d83318287c8b11de9ee937e890c73ab32d543d5f1f313e93eb262a873a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "charOffset": 1676,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 17,
                  "charOffset": 1594,
                  "charLength": 2,
                  "snippet": {
                    "text": "    assertEntry(0, &exception0);\n    assertEntry(1, &exception1);\n    assertEntry(31, &exception31);\n\n    assertEntry(32, &irq0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e08a6f9bd32c9ec84f82211dfa3d46ffdb9857ae71820c1ed28e393dc1f853d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 17,
                  "charOffset": 1712,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 17,
                  "charOffset": 1660,
                  "charLength": 2,
                  "snippet": {
                    "text": "    assertEntry(31, &exception31);\n\n    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "111409e49db28dd1544fe681f38978ccd2e6aa186473ae28281b150ce2569cd9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 17,
                  "charOffset": 1740,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 17,
                  "charOffset": 1695,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1772a6a362ed1ba4a289ba092f0481da1d67701ca8931017c7adca4dc417b320"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "charOffset": 1769,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 17,
                  "charOffset": 1696,
                  "charLength": 3,
                  "snippet": {
                    "text": "    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "726f9ca7e02d40d1474be163c5f664fb3b467b9f276dae8fe295e0a6a4ce2360"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'uint16_t' (aka 'unsigned short') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/portio_mock.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "charOffset": 434,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint16_t"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 391,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nuint32_t getPortData(uint16_t port) {\n    uint16_t result = portDataOutMap[port].front();\n    portDataOutMap[port].pop();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd9daa1c45ba578afdf1b112053bc77d9047386d72bb0f6e1aed1fbf1efaf260"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'uint16_t' (aka 'unsigned short') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/portio_mock.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 800,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint16_t"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 751,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nuint32_t kernelGetPortData(uint16_t port) {\n    uint16_t result = portDataInMap[port].front();\n    portDataInMap[port].pop();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe4fb5df20e4278b5d9b24bd4df6d86aac467bf0d7e44e21e64b1ab0c8eb9fc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "101 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 25,
                  "charOffset": 205,
                  "charLength": 3,
                  "snippet": {
                    "text": "101"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 25,
                  "charOffset": 131,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 101,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22f323fae27b3655beeb634fbd54a10a3a4d32fa17a3c40729bf4ac792549e75"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 28,
                  "charOffset": 264,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 28,
                  "charOffset": 181,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 101,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "878f1c182be9b3d58dee4c2bfb45e85bbe10323874f3cebb59fdf7719d07bd55"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 34,
                  "charOffset": 365,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 34,
                  "charOffset": 280,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_TRUE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b5fdd94e8c2c2f91590f71170ee408da1a713abfed14ffcfd15f0e1c74cfa04"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "155 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 25,
                  "charOffset": 570,
                  "charLength": 3,
                  "snippet": {
                    "text": "155"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 25,
                  "charOffset": 496,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 155,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97840212007346babd5f67c31de0c0dbd18de2261461b26cf2af9e0791716a4d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 28,
                  "charOffset": 629,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 28,
                  "charOffset": 546,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 155,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7132d6e9a9e98ec816d46e03800e2525825843530aeb259ef7382e2450606465"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 34,
                  "charOffset": 730,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 34,
                  "charOffset": 645,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79e8789df26084c62c8246253ba55d29093dd861870ac263e39dc61db240d5ac"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "97 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25,
                  "charOffset": 935,
                  "charLength": 2,
                  "snippet": {
                    "text": "97"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 25,
                  "charOffset": 861,
                  "charLength": 2,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 97,\n            .revision = 4,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "983cfc1dcbc10a2dde701fd154c1c9ef5e5c3db5c78ecbb806d3568625cda700"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 28,
                  "charOffset": 993,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 28,
                  "charOffset": 911,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 97,\n            .revision = 4,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3caed4727bfc431388fb801001020d4c12b2c7733931e3c60155bb7239b7147"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 34,
                  "charOffset": 1094,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 34,
                  "charOffset": 1009,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1efeb85afec1575c309000013850a26a667f9bddcd8d569d7f1f59f5b605bb1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "123 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "charOffset": 1299,
                  "charLength": 3,
                  "snippet": {
                    "text": "123"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 25,
                  "charOffset": 1225,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 123,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faee4dddd3db6114bcd91210feb4422ef3b5916d75e4c4672fe61b0e8fa0dec1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 28,
                  "charOffset": 1358,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 28,
                  "charOffset": 1275,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 123,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f31dfb2c6e1818a38cf9d78c0fd89d36f50ae14b807d945a2726623759dcd7b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 34,
                  "charOffset": 1459,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 34,
                  "charOffset": 1374,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b760f55e0add8eee454a10b5a2ce33faa5ab12a449317335b1277dcd886f4c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcmp.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 22,
                  "charOffset": 184,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 22,
                  "charOffset": 105,
                  "snippet": {
                    "text": "    while(*p1 && *p2) {\n        int diff = *p1++ - *p2++;\n        if(diff != 0) return diff;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e15377698c0b391499b890b8236a4ac361cf8470cc598c1d65709f80b71e72"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "charOffset": 147,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 5,
                  "charOffset": 87,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, initializeSerial) {\n    Serial serial;\n    int port = 1;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e42db1eefdc09c50dfc3e045447d0021fdcdd19dc38ee5cae0ff270fd2d466aa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 23,
                  "charOffset": 184,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 23,
                  "charOffset": 143,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 1;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07d51c499eb97a2cc9153b4e45aea31d92289aaf41b89adffaccd55bbcb47c68"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 236,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 161,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    putPortData(port, 0xAE); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n\n    ASSERT_EQ(0, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45ed2c0ff018db8bb6486e434d3e0fd5e1298db049bed4045073a7e6bf6ee928"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "charOffset": 901,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 5,
                  "charOffset": 841,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, faultySerialTest) {\n    Serial serial;\n    int port = 1;\n    serial.port = 5;\n    serial.isInitialized = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7c5e36fef6af5b4aea02ec87c14a43df15bb466aa8c524f7e93ab807647a629"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 933,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 878,
                  "charLength": 1,
                  "snippet": {
                    "text": "    Serial serial;\n    int port = 1;\n    serial.port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f81c4019def12f6f93466dad37f90f7ccaae1899c390f69d789fd55f34278fb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 1041,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 966,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    putPortData(port, 0x00); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n\n    ASSERT_EQ(1, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98b1f906133d4077517d309500bcfba0ebc858ff89687f91281e60aec845a4cf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "charOffset": 1247,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1188,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, serialAvailable) {\n    Serial serial;\n    int port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5eefc3fab647d14735905f30e843defd616de6c0475057a3cf939a225054f082"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "charOffset": 1258,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 16,
                  "charOffset": 1188,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, serialAvailable) {\n    Serial serial;\n    int port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa9bfb7de6b70b46dee3a4867bb1e4e1d30ff5f8984e4e6712b811725d761ec2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 23,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 23,
                  "charOffset": 1292,
                  "charLength": 4,
                  "snippet": {
                    "text": "    ASSERT_FALSE(serialAvailable(&serial));\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acc461c203b2288efb75554a969f5fbd79b093ec59e154e7f55441994b033216"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "charOffset": 1466,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 22,
                  "charOffset": 1407,
                  "charLength": 1,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 1);\n    ASSERT_TRUE(serialAvailable(&serial));\n    ASSERT_EQ(1, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f377f49acd16a3a8cfd708f90fea22a51f3a570fb29117b02b2ccb46c73c696"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 22,
                  "charOffset": 1577,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 22,
                  "charOffset": 1516,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_EQ(1, serial.lineRegister);\n\n    putPortData(port+5, 0);\n    ASSERT_FALSE(serialAvailable(&serial));\n    ASSERT_EQ(0, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe3d1904428495b9bbff9c58316841853d1be926ea3a3f1713092c9e79e9f922"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "charOffset": 1725,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 5,
                  "charOffset": 1670,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, readyToSend) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b60d89c11a1e9806779e65791f4479352888b3fb0d9d74d1eea6af34ec9c1f70"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 16,
                  "charOffset": 1736,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 16,
                  "charOffset": 1670,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, readyToSend) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9db3fccf93e01f415526fc8ce8178827443dac8b9c86e5576ba9caba640f9d0d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 23,
                  "charOffset": 1762,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 23,
                  "charOffset": 1721,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab3e7af45d21397bed4600b675abffc0f2091b7700120e583caabafa7fdc5452"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "charOffset": 1869,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 22,
                  "charOffset": 1810,
                  "charLength": 1,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 0x20);\n    ASSERT_TRUE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0x20, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dab2c61bdd5ca333752925f7bea05931709bfa51fa9df4a2668838299484216"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 25,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 25,
                  "charOffset": 1810,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 0x20);\n    ASSERT_TRUE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0x20, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71344b077f94990634cb123290be4328c296c48633924a3e8782c3409898cf53"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 22,
                  "charOffset": 1990,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 22,
                  "charOffset": 1926,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_EQ(0x20, serial.lineRegister);\n\n    putPortData(port+5, 0);\n    ASSERT_FALSE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "555e238bee3efe34f6d5de71f34845658eb2fe9ed6919f272ef68d0ac60b9e78"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "charOffset": 2142,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 5,
                  "charOffset": 2087,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, serialWrite) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eefc7dc3834e59f97c10d10f5b62ba901bd10887b3e91db92dce4797828ce5e7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "charOffset": 2153,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 16,
                  "charOffset": 2087,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, serialWrite) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ecd2066edde73e7a98681df506eb3593ec4bd71ec5cc32665964ba4cf1cff55c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 23,
                  "charOffset": 2179,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 23,
                  "charOffset": 2138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n    drainPort(port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfc9f82dcdf8d2f9325bb6cf71a80bfa08c6dbc510022e15fc1f5dd065e5271f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "charOffset": 2307,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 22,
                  "charOffset": 2264,
                  "charLength": 1,
                  "snippet": {
                    "text": "    drainPort(port);\n\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68890dcecacee0c5ccad677d5404630cbe847448a0b6e8c0b25cc049dce476c7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 25,
                  "charOffset": 2310,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 25,
                  "charOffset": 2264,
                  "charLength": 4,
                  "snippet": {
                    "text": "    drainPort(port);\n\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76974c10d20d7440df584a1348c649d7a67d035922821992cc1d64278d93f2fa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 26,
                  "charOffset": 2367,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 26,
                  "charOffset": 2285,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n\n    ASSERT_EQ(10, getPortData(port));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9a09ca83bbad3aa3bdb28afeb4b13ae406a5b155f5b529759fcd6a13ae22fba"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "charOffset": 2416,
                  "charLength": 55,
                  "snippet": {
                    "text": "// TODO: Add test for when the port is temporarily busy"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 5,
                  "charOffset": 2373,
                  "charLength": 55,
                  "snippet": {
                    "text": "    ASSERT_EQ(10, getPortData(port));\n\n    // TODO: Add test for when the port is temporarily busy\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44ed7ad49b00e0211f9d6b49b15744a2993b23010ac922cd486a6c7b0959bfad"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2528,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 5,
                  "charOffset": 2475,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, printTest) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9658063427d9274ec20f958958dc4817fb5c03a2bc9822303f78d00a312d914b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 16,
                  "charOffset": 2539,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 16,
                  "charOffset": 2475,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, printTest) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4038db0295d8d7630b39d2a551653499a852603531a3f35f99b39c0ce8b628d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 23,
                  "charOffset": 2565,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 23,
                  "charOffset": 2524,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n    drainPort(port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cbf67d61b36b0da188e41932a5bcd5cdf4c05dbec8c620a2c7cbaff27fc462b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'len' of type 'size_t' (aka 'unsigned long') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "charOffset": 2718,
                  "charLength": 6,
                  "snippet": {
                    "text": "size_t"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 5,
                  "charOffset": 2671,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    char* text = (char*)\"Hello, World\\n\";\n    size_t len = strlen(text);\n\n    for(int i = 0; i < len; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8dad5925a9f0fa17c4e76955f455b51049a21344242dc025cbde0cdac43547d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 26,
                  "charOffset": 2806,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 26,
                  "charOffset": 2745,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < len; i++) {\n        putPortData(port+5, 0x20); //indicate ready to send\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d1b2adf71d7fa3556c2ab78a6e949b8d4fc61aca422776608227159841271bb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 29,
                  "charOffset": 2809,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 29,
                  "charOffset": 2745,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < len; i++) {\n        putPortData(port+5, 0x20); //indicate ready to send\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9682248cc21acd2a2a455a236ae608a64e006280b8610382240c7254eb585980"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 27,
                  "charOffset": 220,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 27,
                  "charOffset": 90,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //https://wiki.osdev.org/Serial_Ports\n    outportByte(port + 1, 0x00);    // Disable all interrupts\n    outportByte(port + 3, 0x80);    // Enable DLAB (set baud rate divisor)\n    outportByte(port + 0, 0x03);    // Set divisor to 3 (lo byte) 38400 baud\n    outportByte(port + 1, 0x00);    //                  (hi byte)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4128e09f4395d27dc76787e8d2afc1d568a31062f5b161ce85090c121f9cabab"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xC7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 509,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xC7"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 27,
                  "charOffset": 346,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 1, 0x00);    //                  (hi byte)\n    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "415aea6d00a0d07843c400eafc6d42832dccc3becbadd0676b0d1cb573351450"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0B is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 596,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0B"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 27,
                  "charOffset": 412,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2ac17dbf737e59d3bbeb91eec126576e356dedd49dc473fef6e536f0cfad74d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 661,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x1E"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 483,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ed597847e358b1bedf969f93b0f7dc1d79b056524170290d87b27cf90befc30"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 721,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 570,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n\n    // Check if serial is faulty"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c04771480a97ad81891d9f1d2756e956db2d2b93309c8333b4ecb856099ad88f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "charOffset": 836,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 33,
                  "charOffset": 770,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Check if serial is faulty\n    if (inportByte(port + 0) != 0xAE) {\n        return 1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38c61763560ca09e73e0b36b5bb3166995a3703d663af51fbb770535254d5d3b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "charOffset": 1031,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 27,
                  "charOffset": 869,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // If serial is not faulty set it in normal operation mode\n    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)\n    outportByte(port + 4, 0x0F);\n    serial->port = port;\n    serial->isInitialized = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8a37d7c532d8c6fb400701b9d12e97e2893dfd505e157ee7d7aa66e5c2cc24f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "charOffset": 1237,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 46,
                  "charOffset": 1111,
                  "charLength": 1,
                  "snippet": {
                    "text": "int updateLineStatusRegister(Serial* serial) {\n    //Read 'Line status register'\n    uint8_t line = inportByte(serial->port + 5);\n    serial->lineRegister = line;\n    return line;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dec8cd45e3f4ede3e500a2dfc374a04e1092fb6c70df3a976d1e3033aefd5f1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "charOffset": 1363,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 32,
                  "charOffset": 1293,
                  "snippet": {
                    "text": "\nint serialAvailable(Serial* serial) {\n    if (!serial->isInitialized) return 0;\n\n    //Read the LSB of the status register to see if data is available"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b674b6fc6452845c6012b44a3c8353e49ded0cde99f5a10c782f335f58c605a8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "charOffset": 1570,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 37,
                  "charOffset": 1496,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nuint8_t serialRead(Serial* serial) {\n    while (!serialAvailable(serial));\n\n    return inportByte(serial->port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a6e048199067ace5348b1f225e2527dd4eba1e8ebf06f941472d8199931da9d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 47,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 47,
                  "charOffset": 1612,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nint isSerialReadyToSend(Serial* serial) {\n    return updateLineStatusRegister(serial) & 0x20;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e16e8c190b2b7963eeb53722083b8ec3f93db78ee08034979e4fe5f87599d30"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "charOffset": 1799,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1709,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid serialWrite(Serial* serial, uint8_t byte) {\n    while (!isSerialReadyToSend(serial));\n\n    outportByte(serial->port, byte);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57c51f6093c16b6aa4b57ca8a9aaff21bef0d99d46fbf6000c516dcbe935bf0f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-inconsistent-declaration-parameter-name",
          "ruleIndex": 709,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'setIdtEntry' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/include/idt.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "charOffset": 434,
                  "charLength": 11,
                  "snippet": {
                    "text": "setIdtEntry"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 406,
                  "charLength": 11,
                  "snippet": {
                    "text": "\nvoid initializeIdt();\nvoid setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t ring);\n\n#endif //OS_IDT_H"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5412bec782d5e000df2097fc2465590c988a1a044e94c6ee26374240a5c423bf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 406,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 49,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bcf5e4affb3aa925eb478988381d379211cb11ad8dbcbdd110e48c4a9efee48"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d25cff40534c7134e6719f72d95675348b29b7eb3ffb42b10ee3ba2c223145"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0e8d30f0083da69ff0a53116d6dc7ba2e43c8ae617d3fc5fbc33e45352796c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1530,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238109d015d441b8ba45b6ddd2ebc7b8d3b42ff2675cfc66dda4f4f4129b733a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1587,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0d5b8259a80a32383b531c86d185e876a013efdd7d972721780fa53deeb374"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1644,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb9f574b671be9cb1b3a09d6b23413a98ffd04d746f560cdd7b2133085491812"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1be7594d079553ece2e8f1a832f2fec44f5dc9db4d39751d0a05014ee8620f62"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1758,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d065df231c449150dfd0ae2d29ceb68ce44dcf9f3f4bb93ed4060dc1ae93f3c6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "754dbfb9b20aa4bde4c0078283122d200a35272432ead4f40435eb12f85fd4b3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1929,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35136b4141054908251da635b77db18b1a996b7a0cd4a23510e428dc284c9884"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1986,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 2043,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46491eb6d71f047310a6306dff66e4b4a21c76c0a9848a0c770b18318ba0ac63"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "charOffset": 2100,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a60c02846044612ad6fc0b90c22c6958d320fff89cdb063d08cbd2acfb8eee79"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2300,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e493f580fe27eeb09e75a9a21ab071090dbaf66edeed5917821a4b70de5bb3b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9532a47803da554826499e9fc0b54ef96ac21b2b700664587c460fa5e501b01e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d1e48ae87568fb27671cb9ce8846d445de4dfdc975f11ff3db2bc3858f24649"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2651,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 45,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f9cb64081b4f443bd36dfc13cded13f5620ac61e8d2d2b10863435f29494f6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 95,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 39,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2523a4fb695964680fdd0eef7b9be66c51a6d9e8aac671b49223236994d8ba49"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ebx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "charOffset": 104,
                  "charLength": 3,
                  "snippet": {
                    "text": "ebx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 14,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90829785eb9953e384e811abc1f38b87d57c199829e61eb8858636b679e165bb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 109,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 19,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89a4763f6cd6b0622af6085ab7e76e2af7dfc3b48220ff777e59eb92ec1102c7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 114,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 24,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9f64c03a035eaeeffa626745fc0be71052f78fc329c480f2a5b294ce312c7a7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17,
                  "charOffset": 247,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 17,
                  "charOffset": 157,
                  "charLength": 1,
                  "snippet": {
                    "text": "    // write 4 characters at a time, only if the provided length allows.\n\n    if(length < 5) {\n        string[0] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f043a330dc90bfe07bb63f2bd4141ec88c01245c93371aa21bf5b8526912bc54"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 17,
                  "charOffset": 351,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 17,
                  "charOffset": 301,
                  "charLength": 1,
                  "snippet": {
                    "text": "    *((uint32_t*) string) = ebx;\n\n    if(length < 9) {\n        string[4] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80cfbc1c1317d84e75dcf22931ec587f437a8f8b082761d7c411647b82f9fb4f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 461,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 405,
                  "charLength": 2,
                  "snippet": {
                    "text": "    *((uint32_t*) (string + 4)) = edx;\n\n    if(length < 13) {\n        string[8] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f887089b723ce25dcf8e89df256ffa1ddd1f8115368929fb9fa12ebd358564"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "charOffset": 566,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 12,
                  "charOffset": 515,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a06943203d5c9ffd0482a76fb00c52472e0b8e9a1923a77a5bb7559001d53d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 630,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 5,
                  "charOffset": 580,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2ade6cbc07cea5b6eb11688b49cad453cca8dc5e0a9721f5a236227a29a5dfe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "charOffset": 639,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 14,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fb3d0a7055ea31944325f253c3a2c6882a3b331f08c2b982cc2ba981473c8b5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 644,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc74a75ae735f4f5d89878b330f95c0023dd233f7570f65d821bfbd402c05a74"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "charOffset": 102,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 51,
                  "charOffset": 18,
                  "snippet": {
                    "text": "\nint getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24eb28dfdefb158108833546499805fef3efc10c3343108295c03cb4733583d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 117,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 19,
                  "charLength": 4,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d565aff294ff630a2329db27b87d9dc516a09f9fc008e076574a294276a5edaa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 33,
                  "charOffset": 145,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 33,
                  "charOffset": 19,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b9c151fa53ad1bb849f88cb972cc50391c14a3f2c07be681152a1a716f68cfd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 164,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 52,
                  "snippet": {
                    "text": "    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ed36e02c74363c13182d5f4dddfc12635e1a488f87c29fe937a3b06de844810"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 29,
                  "charOffset": 358,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[3] == ' ' &&\n            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a981ce6d2213aee8743abda02e02174204dba7d435bc236c71651e497c9f407e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 399,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a1696312402099c2960a31324073d157821d811a149454115c34018c6c69b19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1945,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 11,
                  "charOffset": 1876,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n// The following lines pull in the real gmock *.cc files.\n#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d52cca0acac5b1d71a691ee5d9567c6ca3631a5daf4ea29f818bd617b3a1c52a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1983,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1877,
                  "charLength": 3,
                  "snippet": {
                    "text": "// The following lines pull in the real gmock *.cc files.\n#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1ba0e9fcfddb16abb8735b85bac676c83a3ade1d3cc95d1b91affa7848e2b3d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2022,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1935,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e1a88c60d66e32029f4605e0cfe349474c2c2ddaa93a33eb0ad090b3c21f68"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2055,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1973,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa27f061e9b529f033acb022e1e6a6af6900522617aa230ef96ddfb61df4f903"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2093,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2012,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "205afc0c346b1493801e7fafd972185b738490f74324355d19e7c39bdf23ae49"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1914,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 11,
                  "charOffset": 1845,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n// The following lines pull in the real gtest *.cc files.\n#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b50fabf80ecf1210100c862b778e66bb3a5827f666565d990e4e8f32880ef1b1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1955,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 11,
                  "charOffset": 1846,
                  "charLength": 3,
                  "snippet": {
                    "text": "// The following lines pull in the real gtest *.cc files.\n#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e1ac9dcd73c7d57109a893dfd8c46bb5f1b00681235d5b24c2909246153cc69"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1990,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1904,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f585dbae6886c044683893146ceb8653ada5b6478cd916dc0d341425a3b8be2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2023,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1945,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "643715303ea34bfdba5eafa4c307a7476c8c3f7a5c47a31387687f33d26dff2f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2056,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1980,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85dfcd06b64899bef343c65af3ff081e6f8188672c0a387a385342c519d640b8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2085,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2013,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dce063bfc6e490e4d1997bd5deaa358f5784c8459289f5344b7585d3140e122a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 11,
                  "charOffset": 2118,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2046,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f510651ef39ccea465106a0782d88c1bbecbbd2519458fdc4ea4bbc896d54550"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 11,
                  "charOffset": 2152,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2075,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84504dffbe1837eb95455141a27941c2b7f2b0249e331620db0eb10411b80e89"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 11,
                  "charOffset": 2187,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 11,
                  "charOffset": 2108,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f053b39fedde9ce438b82bb2be45db98dcdb4e418066c7311bcaa4adcf6f3a6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strlen.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "charOffset": 119,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 21,
                  "charOffset": 22,
                  "snippet": {
                    "text": "__attribute__((unused)) size_t strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fef9f9ddc0f2b75bed099b8facfddb13964940ae031916f4d3292d6131532421"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 21,
                  "charOffset": 1389,
                  "charLength": 12,
                  "snippet": {
                    "text": "integralPart"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 21,
                  "charOffset": 1337,
                  "charLength": 12,
                  "snippet": {
                    "text": "    }\n    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar((char)(digit + '0'));\n        integralPart %= divisor;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdaf75292eb002bd1a572589ae50bf5a840480a61b347d607cc9a3b2b245a6a5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "charOffset": 1421,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 9,
                  "charOffset": 1343,
                  "charLength": 7,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar((char)(digit + '0'));\n        integralPart %= divisor;\n        divisor /= BASE_SYSTEM;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f72ed5f5497008d8ce416543181803da2a7dfca3d1c06fc75b3aa7637c219b64"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 5,
                  "charOffset": 3980,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 5,
                  "charOffset": 3889,
                  "charLength": 7,
                  "snippet": {
                    "text": "    printAbsoluteIntegerPortion(num, minDigitsBeforeDecimal, numDigitsBeforeDecimal);\n\n    putchar('.');\n\n    printDecimalPortion(num, minDigitsAfterDecimal);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a33f98afe40c21aaeb3dcfba2485a664ce30e0eef09711b68f8e1e71418586a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4070,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 4063,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters; //NOLINT\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aac03ed2cb36cb1038238c4aa3d1ccced5c939385781eb37312f2861d55b24d5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4070,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 4063,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters; //NOLINT\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d9cb4dd5557ee24fdac26cd8893e5388cd2b82dba4076dcfd56cfcfbf7bf547"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "charOffset": 4586,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 17,
                  "charOffset": 4511,
                  "charLength": 7,
                  "snippet": {
                    "text": "        if (isParsingFormat) {\n            if (c == '%') {\n                putchar('%');\n                isParsingFormat = 0;\n            } else if (c == 'd') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0e70e87ee1445f1aefffdf4d33ec2f4d8d3c98a83ee4d4f4fac7bc42134c264"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 35,
                  "charOffset": 4911,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 35,
                  "charOffset": 4787,
                  "charLength": 1,
                  "snippet": {
                    "text": "            } else if (c == 'f') {\n                double d = va_arg(parameters, double);\n                printDouble(d, 1, 6);\n                isParsingFormat = 0;\n            } else if (c == 's') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a3d805ef744cccee5da4a6ee8b2051b9160d0d2cc3d2d09759faa7516dbd076"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "charOffset": 5334,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 17,
                  "charOffset": 5225,
                  "charLength": 7,
                  "snippet": {
                    "text": "            } else if (c == 'c') {\n                char character = va_arg(parameters, int);\n                putchar(character);\n                isParsingFormat = 0;\n            } else if (c == 'x') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c20970c32b59e72d7d1a8013b7a3f0e3d1fcb87e1b3c9a6145e2f419a19befe5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5650,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 17,
                  "charOffset": 5573,
                  "charLength": 7,
                  "snippet": {
                    "text": "        } else if (isEscaped) {\n            if (c == '\\\\') {\n                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91bca1b92d99d3788542ea7e3045ee45275d7a0f3d429d9803fcead4b8272584"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "charOffset": 5716,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5634,
                  "charLength": 7,
                  "snippet": {
                    "text": "                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');\n            }\n            isEscaped = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08f8fd342af46cf64aabfb70aa66f573426d37c108bee34a33b334acd54ce224"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 13,
                  "charOffset": 5801,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 13,
                  "charOffset": 5745,
                  "charLength": 7,
                  "snippet": {
                    "text": "            isEscaped = 0;\n        } else {\n            putchar(c);\n        }\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e25da94f8b1c6257f4a7ceaf5295819014ff186d413187ff930e55ebb622feb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 21,
                  "charOffset": 1389,
                  "charLength": 12,
                  "snippet": {
                    "text": "integralPart"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 21,
                  "charOffset": 1337,
                  "charLength": 12,
                  "snippet": {
                    "text": "    }\n    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar((char)(digit + '0'));\n        integralPart %= divisor;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdaf75292eb002bd1a572589ae50bf5a840480a61b347d607cc9a3b2b245a6a5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "charOffset": 1421,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 9,
                  "charOffset": 1343,
                  "charLength": 7,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar((char)(digit + '0'));\n        integralPart %= divisor;\n        divisor /= BASE_SYSTEM;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f72ed5f5497008d8ce416543181803da2a7dfca3d1c06fc75b3aa7637c219b64"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 5,
                  "charOffset": 3980,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 5,
                  "charOffset": 3889,
                  "charLength": 7,
                  "snippet": {
                    "text": "    printAbsoluteIntegerPortion(num, minDigitsBeforeDecimal, numDigitsBeforeDecimal);\n\n    putchar('.');\n\n    printDecimalPortion(num, minDigitsAfterDecimal);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a33f98afe40c21aaeb3dcfba2485a664ce30e0eef09711b68f8e1e71418586a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4070,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 4063,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters; //NOLINT\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aac03ed2cb36cb1038238c4aa3d1ccced5c939385781eb37312f2861d55b24d5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "charOffset": 4070,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 4063,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters; //NOLINT\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d9cb4dd5557ee24fdac26cd8893e5388cd2b82dba4076dcfd56cfcfbf7bf547"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "charOffset": 4586,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 17,
                  "charOffset": 4511,
                  "charLength": 7,
                  "snippet": {
                    "text": "        if (isParsingFormat) {\n            if (c == '%') {\n                putchar('%');\n                isParsingFormat = 0;\n            } else if (c == 'd') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0e70e87ee1445f1aefffdf4d33ec2f4d8d3c98a83ee4d4f4fac7bc42134c264"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 35,
                  "charOffset": 4911,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 35,
                  "charOffset": 4787,
                  "charLength": 1,
                  "snippet": {
                    "text": "            } else if (c == 'f') {\n                double d = va_arg(parameters, double);\n                printDouble(d, 1, 6);\n                isParsingFormat = 0;\n            } else if (c == 's') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a3d805ef744cccee5da4a6ee8b2051b9160d0d2cc3d2d09759faa7516dbd076"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "charOffset": 5334,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 17,
                  "charOffset": 5225,
                  "charLength": 7,
                  "snippet": {
                    "text": "            } else if (c == 'c') {\n                char character = va_arg(parameters, int);\n                putchar(character);\n                isParsingFormat = 0;\n            } else if (c == 'x') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c20970c32b59e72d7d1a8013b7a3f0e3d1fcb87e1b3c9a6145e2f419a19befe5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5650,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 17,
                  "charOffset": 5573,
                  "charLength": 7,
                  "snippet": {
                    "text": "        } else if (isEscaped) {\n            if (c == '\\\\') {\n                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91bca1b92d99d3788542ea7e3045ee45275d7a0f3d429d9803fcead4b8272584"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "charOffset": 5716,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 17,
                  "charOffset": 5634,
                  "charLength": 7,
                  "snippet": {
                    "text": "                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');\n            }\n            isEscaped = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08f8fd342af46cf64aabfb70aa66f573426d37c108bee34a33b334acd54ce224"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 13,
                  "charOffset": 5801,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 13,
                  "charOffset": 5745,
                  "charLength": 7,
                  "snippet": {
                    "text": "            isEscaped = 0;\n        } else {\n            putchar(c);\n        }\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e25da94f8b1c6257f4a7ceaf5295819014ff186d413187ff930e55ebb622feb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 47 (threshold 40)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1413,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e1728e607f04631a56e5d335533a4f2f03903f59b28fbb27af77b1651ce8175"
          },
          "baselineState": "new",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 47 (threshold 40)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2051,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2048,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cc9c48facd3069d4e42ee69e7cb8fbbc5199eea148ab6a4bc28b184505b6885"
          },
          "baselineState": "new",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'readInode' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 6,
                  "charOffset": 3925,
                  "charLength": 9,
                  "snippet": {
                    "text": "readInode"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 6,
                  "charOffset": 3917,
                  "charLength": 9,
                  "snippet": {
                    "text": "}\n\nvoid readInode(IdeDevice* device, Ext2Fs* fs, int inodeAddress, Ext2Inode* inode) {\n    uint32_t group = inodeAddress / fs->superBlock.numInodesInGroup;\n    //NOLINTNEXTLINE(clang-analyzer-core.uninitialized.Assign)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f71442022398b59ee775d3b2dbd542c382823fde41666ce643516846a058e5f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 27,
                  "charOffset": 4617,
                  "charLength": 12,
                  "snippet": {
                    "text": "tableAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 27,
                  "charOffset": 4532,
                  "charLength": 12,
                  "snippet": {
                    "text": "\n    uint8_t* fileData = malloc(fs->superBlock.blockSize);\n    readBlock(device, fs, tableAddress + blockIndex, fileData);\n\n    uint8_t* data = fileData + blockOffset*fs->superBlock.inodeSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01e70781316299820e40019ed4ccbdabe30c0a9a180af2ad86e748dd70537578"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 42,
                  "charOffset": 4822,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 42,
                  "charOffset": 4725,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8506d99fde975e768cac6b035e10a90032efabac90964dbba2590793e267fc2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 48,
                  "charOffset": 4828,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xF"
                  }
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 48,
                  "charOffset": 4725,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c06d79d04760d5e445edf5f545f3c59443d5e97177fd649b398cb8255973f8dc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 47,
                  "charOffset": 4879,
                  "charLength": 5,
                  "snippet": {
                    "text": "0xFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 47,
                  "charOffset": 4726,
                  "charLength": 5,
                  "snippet": {
                    "text": "    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);\n    inode->creationTime = readUint32(data, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2c100c5f1fecee62ef5cc11fcf69aadee1295c3a37ac5a39a777dabea9338f5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 44,
                  "charOffset": 4968,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 44,
                  "charOffset": 4833,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);\n    inode->creationTime = readUint32(data, 12);\n\n    for(int i = 0; i < 12; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d61a6df3b56c621af0539fe272d782e9867593ad17e257961cb4cf612e2dc280"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 24,
                  "charOffset": 4997,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 24,
                  "charOffset": 4925,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->creationTime = readUint32(data, 12);\n\n    for(int i = 0; i < 12; i++) {\n        inode->directPointers[i] = readUint32(data, 40 + 4*i);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b524575a91a41f9da7ab88c314b017a6bb7bc90811bf796794179329a8f46746"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 53,
                  "charOffset": 5060,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 53,
                  "charOffset": 4973,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < 12; i++) {\n        inode->directPointers[i] = readUint32(data, 40 + 4*i);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebeef769258ddc7c7e688f52dceb4f5c7c98831de86d22cb96c00df08d9b960"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "88 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 53,
                  "charOffset": 5130,
                  "charLength": 2,
                  "snippet": {
                    "text": "88"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 53,
                  "charOffset": 5071,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c4e6e91b6adf3aeb012dc721426d2333ddf306935af109ed214f21432d03a67"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "92 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 53,
                  "charOffset": 5187,
                  "charLength": 2,
                  "snippet": {
                    "text": "92"
                  }
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 53,
                  "charOffset": 5077,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab44efac2003b09cfc3829eddcbe990d5db92489148bf29ef81ccf31d9317d05"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 53,
                  "charOffset": 5244,
                  "charLength": 2,
                  "snippet": {
                    "text": "96"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 53,
                  "charOffset": 5078,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);\n\n    inode->tableAddress = tableAddress;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "495177701f2e7a23bd93b2fe7a653b19d65c7c1b8291a7d5dc07b4a88a97297a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 16,
                  "charOffset": 5388,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 16,
                  "charOffset": 5313,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t getBlockIndex(Ext2Inode* inode, uint32_t block) {\n    if(block < 12) {\n        return inode->directPointers[block];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d12f8a1ecfd4019fffdc6dfe795901a69c70daa22f8aa12ec7a9a69cbef20c95"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 7,
                  "charOffset": 5445,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 7,
                  "charOffset": 5373,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(block < 12) {\n        return inode->directPointers[block];\n    } else {\n        //TODO: handle indirect blocks\n        return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b917319371441ca9431d6f14008463615eb3f09a59005a43654ef08712fef808"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 9,
                  "charOffset": 5460,
                  "charLength": 30,
                  "snippet": {
                    "text": "//TODO: handle indirect blocks"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 9,
                  "charOffset": 5394,
                  "charLength": 30,
                  "snippet": {
                    "text": "        return inode->directPointers[block];\n    } else {\n        //TODO: handle indirect blocks\n        return -1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13a7ee582e09c3bc02aa7ba688aa0622c11f9f5042bbbfbd5afd95fc0cc88f50"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 24,
                  "charOffset": 5578,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 24,
                  "charOffset": 5518,
                  "snippet": {
                    "text": "\nint isPseudoDirectory(char* name) {\n    if(name[0] == '\\0') return 0; //we should allow empty strings\n    int nameIsDot = (name[0] == '.' && name[1] == '\\0');\n    int nameIsDotDot = (name[0] == '.' && name[1] == '.' && name[2] == '\\0');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0aad9a85929a27b9c37eadd6550135163078fddc27943733d543ed758047d55"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'addChildNodes' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 6,
                  "charOffset": 5803,
                  "charLength": 13,
                  "snippet": {
                    "text": "addChildNodes"
                  }
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 6,
                  "charOffset": 5795,
                  "charLength": 13,
                  "snippet": {
                    "text": "}\n\nvoid addChildNodes(IdeDevice* device, Ext2Fs* fs, VfsNode* parentVfsNode, Ext2Inode* parentExtNode) {\n    if(parentVfsNode->numChildren > 0) {\n        printf(\"Parent node already has children\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2939736fbd2c07bb105ca0c5bb2eb915b9f5a300f0acd0a6ead014b7add4cc6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 5,
                  "charOffset": 6076,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 5,
                  "charOffset": 6011,
                  "charLength": 6,
                  "snippet": {
                    "text": "    }\n    uint8_t* block = malloc(fs->superBlock.blockSize);\n    memset(block, 0, fs->superBlock.blockSize);\n\n    uint32_t address = getBlockIndex(parentExtNode, 0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88495390a1d6ed65901cf3a05448a6935cc210f63b322387c0ae0cb8025419e4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 31,
                  "charOffset": 6528,
                  "charLength": 10,
                  "snippet": {
                    "text": "inodeIndex"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 31,
                  "charOffset": 6439,
                  "charLength": 10,
                  "snippet": {
                    "text": "\n        Ext2Inode* ext2Inode = malloc(sizeof(Ext2Inode));\n        readInode(device, fs, inodeIndex, ext2Inode);\n\n        // Todo: handle empty directory node in middle"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "520853e728dce17c42ac35635003e3c9d012f612d90c958250d751f03c5e86d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "charOffset": 6676,
                  "charLength": 60,
                  "snippet": {
                    "text": "// TODO: handle if directory entries have a second name byte"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 9,
                  "charOffset": 6657,
                  "charLength": 60,
                  "snippet": {
                    "text": "        }\n\n        // TODO: handle if directory entries have a second name byte\n        uint16_t nameLength = ptr[6];\n        uint16_t size = readUint16(ptr, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9da072eab6c74f6b02c41cf22ef5b36e6d30d771ef5c3954e05b2733a917d7d9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 35,
                  "charOffset": 6771,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 35,
                  "charOffset": 6667,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n        // TODO: handle if directory entries have a second name byte\n        uint16_t nameLength = ptr[6];\n        uint16_t size = readUint16(ptr, 4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45915e3aa3aea2454054fbad8b459c3122704f5f729110ce34850dd109b2da69"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 9,
                  "charOffset": 6828,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 9,
                  "charOffset": 6775,
                  "charLength": 6,
                  "snippet": {
                    "text": "        uint16_t size = readUint16(ptr, 4);\n\n        memcpy(vfsChild->name, ptr + 8, nameLength);\n        vfsChild->name[nameLength] = '\\0';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7ec9be58eaf749c835fcb36bb0ede09c46ce27fdaa57dc037a1642ff3eaecfa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 54,
                  "charOffset": 7716,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 54,
                  "charOffset": 7609,
                  "snippet": {
                    "text": "        Ext2Inode* ext2Inode = childVfsNode->device;\n\n        if(!ext2Inode || !isExt2Directory(ext2Inode)) continue;\n\n        addChildNodesRecursive(device, fs, childVfsNode, ext2Inode);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e078d1c11ed8ff4e0d3e8d238d9337cc087d10b22f78009c734af32cb55b2da0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'vfsRoot' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 9,
                  "charOffset": 97,
                  "charLength": 7,
                  "snippet": {
                    "text": "vfsRoot"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 56,
                  "charLength": 7,
                  "snippet": {
                    "text": "#define DEFAULT_NUM_CHILDREN 10\n\nVfsNode vfsRoot;\n\nvoid initializeVfsRoot() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9412f7ade331f9f13ac83c0b3f0cef70c8da15ac80b8f38e30a0e9c84644f44"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 56,
                  "charOffset": 703,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 56,
                  "charOffset": 593,
                  "snippet": {
                    "text": "\nVfsNode* getVfsNode(VfsNode* directory, char* name) {\n    if(!isDirectory(directory) || !directory->children) return 0;\n\n    for(VfsNode* node = (VfsNode*) directory->children[0]; node; node++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba005747d9dcd7ba8aa45700ab79215d37549faba6ec1c3603f8ebb4cc4e0a57"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 32,
                  "charOffset": 976,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 32,
                  "charOffset": 892,
                  "snippet": {
                    "text": "\nvoid addChild(VfsNode* directory, VfsNode* child) {\n    if(!isDirectory(directory)) return;\n\n    if(!directory->children) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2adcd96c0cee2397999411aa1de958fbc4411af8731b539436b35479e9478137"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1.5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 60,
                  "charOffset": 1387,
                  "charLength": 3,
                  "snippet": {
                    "text": "1.5"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 60,
                  "charOffset": 1198,
                  "charLength": 3,
                  "snippet": {
                    "text": "    if(directory->numChildren+1 > directory->numChildrenReserved) {\n        VfsNode** previous = (VfsNode**) directory->children;\n        int newSize = (int)(directory->numChildrenReserved*1.5);\n        directory->children = createVfsNodeList(newSize);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4990493e60faaf44feccad877e9d0ab8959bb89d64fa8802c2a5ef11a923bfa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "charOffset": 1460,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 9,
                  "charOffset": 1393,
                  "charLength": 6,
                  "snippet": {
                    "text": "        directory->children = createVfsNodeList(newSize);\n\n        memcpy((void*) directory->children, (void*) previous, directory->numChildren*sizeof(VfsNode*));\n        free((void*) previous);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7910a93c95a0c3c7df5431d8540d67ad0b7087be9aa9c2c46529cc2aa4846ce3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 24,
                  "charOffset": 96,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 52,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include <string.h>\n\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9109b09c2a593a1698800af03a1f162f8662875b554db498d53ad24561285b4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 113,
                  "charLength": 3,
                  "snippet": {
                    "text": "idt"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 72,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bfc566d7acd3128945a63e3902fa7490da0eacde05c6d8c4c4acacd9e59947c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "charOffset": 142,
                  "charLength": 6,
                  "snippet": {
                    "text": "idtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 8,
                  "charOffset": 73,
                  "charLength": 6,
                  "snippet": {
                    "text": "__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n\nvoid initializeIdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8ea7d9c36824f349f5d64fe0d6655ffed976388652ff4ba80d5cabafc44d455"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeIdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "charOffset": 156,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeIdt"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 6,
                  "charOffset": 135,
                  "charLength": 13,
                  "snippet": {
                    "text": "IdtPtr idtPtr;\n\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10becd26fc7196f09a10501262bbd9fb24cffad108b31d2025adda01f2d68d6d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 13,
                  "charOffset": 186,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 13,
                  "charOffset": 150,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2de7ff6658469cfce46c6b6047ff2f897980213b87de365f8c029aa834ffade"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "charOffset": 192,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x28"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 19,
                  "charOffset": 150,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1703f75cdb64714ce35021cdbfb2a57135aa29b81abcfe5403aa45bc299dd66c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "charOffset": 204,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 5,
                  "charOffset": 174,
                  "charLength": 6,
                  "snippet": {
                    "text": "    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));\n    idtPtr.base = (uint32_t) idt;\n    idtPtr.limit = sizeof(idt) - 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37800118bb0c417391bfbe6a0f5fc6e5f3bfb9b910757162c31f2a284608e1c1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 407,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b90a865013bddd81ff641a88b0a174cff152fcdb61d6dacf7d3d5d9328d1e19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 462,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 304,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ae6ea45dad053412389d3a5199b86157f8a2ae2be0da2f87c4b281fe1819cf9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 517,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 359,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a0de4079ff5c27a99467bcd7a898f6c55bba87d2805a431900bc1bf10adf91f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 572,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 414,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "811e0ed554027051a7d3cc7afc1174644d46485d6cea9f6463807c7ce6b94996"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 595,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 17,
                  "charOffset": 469,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ece1c81502543096d9904accf5a8f6be29f7dfcd9a8250aa68c5c7b79c58f5e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 627,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 469,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d810a22c2d708b2850180992f328bdfdd62b16a131403f34d5d46848a1b96b7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 650,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 524,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c08a0142742bdbc14a0dc844aa652872432e6e33b0449b7028215009c71e5e7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 682,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 524,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da934d444a1f3abe8a07e880d1b6aec7f1cd88c4e9f6c5ac38f8f11606df1f1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 49,
                  "charOffset": 737,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 579,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c46e6b5b750a19d37aaca2f3b2097a0fdd3e3e9352e7b5f6356e02f93e8fc09"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 49,
                  "charOffset": 792,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 634,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "034798b8e91add672b76a4bb1efbda2e6bb46c98ea032f732c98d1ead550e5c0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 815,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 689,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f24c5bf78ada083d5d00d1d7897152d53578a9d46125913f3369873d579630d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 870,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 744,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66da98c94f015db410f7dd077ec9856ea6a575f312f40d636e0f8c1a8565e535"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 927,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 799,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ebebfe5fef97632719aef4db0e9471e907f8d10be81d2140621b3270c091f0dd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 984,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 854,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab9ccfcefbc240fc961ec24bff269a0a2207a59ed7bd45a2d07913fee092e832"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1041,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 911,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec821a7d25faa1e7ae08923a1d34982d80cd8038f592281d98ae9fc222055730"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1098,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 968,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb83b0ed495ccfdff420be4b382a14482782e468a1753899fdf249a877c71c32"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "15 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1155,
                  "charLength": 2,
                  "snippet": {
                    "text": "15"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1025,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4b3a7f8fe15b4b99954b43e3c6be37a00ca686fe301197b9eba2ebea5c536e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1212,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1082,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ff7da6f49bfc3a65abb8735c87bc533d7550c67363b615958b45bf6a2eb1d15"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "17 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1269,
                  "charLength": 2,
                  "snippet": {
                    "text": "17"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1139,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07e0939fcec73d663ecaa2ff3acc5aea8b36e9a90a45adf6f594d7d4b5e8bb90"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "18 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1326,
                  "charLength": 2,
                  "snippet": {
                    "text": "18"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1196,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "517309e5c3e015b4e0e0654efc11ded982b4ea76ee0073f33dd0a8c5dc31f51c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "19 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1383,
                  "charLength": 2,
                  "snippet": {
                    "text": "19"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1253,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e9e8409bd5130657bbef728fc2c85ded8d4ad9766fe65b36dba02b15e4c9697"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1440,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1310,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2901523ccc78106acd3ed0c14191d0208a4b1d67745a38d3921de2962852e7b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "21 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1497,
                  "charLength": 2,
                  "snippet": {
                    "text": "21"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1367,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76e806c230d76eb799bb0815399e91bba731f05e36275931fe92146b8c15ad2b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "22 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1554,
                  "charLength": 2,
                  "snippet": {
                    "text": "22"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1424,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3bac6cdba7f41d0907223f6df271931bebebca9232b4c0528224aeeccfaac19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "23 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1611,
                  "charLength": 2,
                  "snippet": {
                    "text": "23"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1481,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d99a4b015fdd02a01f8aae5511b3bb0660d3dd9bfdc67552f26a5e8535478366"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1645,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1481,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61945c13b218e3a9ada2937d0abf127c5d99443cce32938abbac7f0f59519ea2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1668,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1538,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d019649283a2f781c66628f4ef78c9940d05a58f20546a3842bd2d311529d90f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1702,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1538,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0490cde5a8adc093816228412f172404f44e5fa61eedb778a91787ab6aef8e36"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "25 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1725,
                  "charLength": 2,
                  "snippet": {
                    "text": "25"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1595,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6be5e55122f9d8d93be3bbea9878f5622f49cbdce04d39155be2be9545f8125e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1759,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1595,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ab7d95e2cc511a02485d3d37821bb7ea51dab6a60944503ef27f9aed0946567"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1782,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1652,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eedafae3f2e69492eb3bfade9d99502ff826f311a5173706e0a5b95f14a2980c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1816,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1652,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "034798b8e91add672b76a4bb1efbda2e6bb46c98ea032f732c98d1ead550e5c0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1839,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1709,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13dbb280df1dc77800747b5b6e230209ce761f7a560342f96ef6e46a94deccdc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1873,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ea03aba4e3a86ba67821693fa1cc664fc7ab0f26f9ade8ebb563e93e19dd396"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1896,
                  "charLength": 2,
                  "snippet": {
                    "text": "28"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1766,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4161350cc3eb53d1d95b2aa338940eacc71102cbd96bc5b71364d3aeadbc006b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1930,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1766,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59ed3b87c1194b49ffa214edc6c9ca5497550340ddb64e02253555d372289fa0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "29 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1953,
                  "charLength": 2,
                  "snippet": {
                    "text": "29"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1823,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c7ccfc312e91b83dd959cf369f38a2542cfc74648f93c485262d69160ac63d3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 1987,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1823,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6dd0094cccf9b252dfd1a03439fc940c3094dd15dec6ff74d7474e407d9fe534"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2010,
                  "charLength": 2,
                  "snippet": {
                    "text": "30"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1880,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e707382dfaa4ce657bbe224af0e657cdda87335fe3cef91c4b222d16dd5de52f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2067,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1937,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87288ffac2a1dfbee57661925764ce3bdf634b7912b9262cf8ae24e32f652216"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 51,
                  "charOffset": 2101,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 1937,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9a86e6c5a5dcf8c6fa95fd8a66d8d2c2e9890e72e1b8fd41deb4cb933f1a87a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2124,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 1994,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c050559dbcb2fd66ae2e73e7b0371956ee1094fa7457a926d7d2dcd53bd59578"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2151,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 44,
                  "charOffset": 1994,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ab45a8cd57683204ec7eeab6d0f74bf987a57bfebb8cfff692c7e2c191d047f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "33 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2174,
                  "charLength": 2,
                  "snippet": {
                    "text": "33"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2051,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bb5976e414309d0cbaf6a295d9dcab23bc8728fd1e1fa2176f0d58882bbb8c8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2201,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2051,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "125884eea7366a30c5281cb99990b375d618c3c6d5a3e95658db73a1668cd7f4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "34 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2224,
                  "charLength": 2,
                  "snippet": {
                    "text": "34"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2108,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f190657094f77868058a72b24c7e34cb72722efd5ec844a00436c87a546c9751"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2251,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2108,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b32771612ef202e3853ecbb48441ec496d32bb2220ccc3fd00e6dc97bbc7fa8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "35 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2274,
                  "charLength": 2,
                  "snippet": {
                    "text": "35"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2158,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "867f6219e8425b6f8111f876c6ef472abccf83b7005290a757706813ef3f386d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2301,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2158,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec7924d2e7cbc1da005a30af248588e488043b917748bd5d2c9f3d9f5b3113d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "36 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2324,
                  "charLength": 2,
                  "snippet": {
                    "text": "36"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2208,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e1762be3356a5d0d0ff6cffa8bcceae5198131a3bdd3c2035a97eb080657b02"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2351,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2208,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fc9e405126673da7da96e045fa638c2a333e807a50425b3e48a48af2d6c3ebb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "37 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2374,
                  "charLength": 2,
                  "snippet": {
                    "text": "37"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f12b41cd0d0eb8ba04c95b218549094e2ab7cf71fcbcd0f39b3324aedbe4327"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2401,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2258,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f1e84437c6b473f16fe54ec3f144666bf734f2e283afef8ce1a3529a04b265"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "38 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2424,
                  "charLength": 2,
                  "snippet": {
                    "text": "38"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2308,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a491a6245fe23a259446a2a8fb2911f96d7c7018098136c74e62880af21638f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2451,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2308,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ca01c3422b9d0a7e408a6c30080d9a3b093736829f43649f898b344e990dc54"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "39 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2474,
                  "charLength": 2,
                  "snippet": {
                    "text": "39"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2358,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b69203f604462f1700abd9426479218ec4012049a1c2de7226381fa393723c00"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2501,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54ac373156a6ac4a20ab9f2470fc3cd3e4e13f8a49d649906afcd26086b3dfb7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2524,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2408,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c405837b21f9caae40c8025e4ed46983ae0ae6657c6ca698e7b3ab4c68bda1b9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2551,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2408,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "896ee3dc896c0b8eae11810f1b3f09c814e42ea6d21a1ad93fcd1e7691b76c47"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "41 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2574,
                  "charLength": 2,
                  "snippet": {
                    "text": "41"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2458,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d82655c3d0c2b7cf71e17040d0635617b1905af9add713a3e44d1502a97a07b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 44,
                  "charOffset": 2601,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2458,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ef98f298c7c317a4025f76a3325591daa9eff10221669be0e812f2a1fc42ca6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "42 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2624,
                  "charLength": 2,
                  "snippet": {
                    "text": "42"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2508,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ae7384ec9bdce5480fe522f65309ee61a9bb200c97a96686378a975b60dbbdf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2652,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 45,
                  "charOffset": 2508,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a808fbf7c699ac448312e4bd8558186f511c994cefe1a1ee47efe4daaf9f46a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "43 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2675,
                  "charLength": 2,
                  "snippet": {
                    "text": "43"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2558,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f76aff4e3ae5ecfcab79f8392cf4b86692f6053b72734a0b21e8c7b2179af372"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2703,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2558,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f04ab3e0bf2561f7a0ef91caa9d71ed9e0f64528e36517ae745bb329aa4ffb40"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "44 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2726,
                  "charLength": 2,
                  "snippet": {
                    "text": "44"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2608,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de5a1dab8f9265e7d18d796ad029aa061c7ab399a391070f639418ef6efc793b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "45 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2777,
                  "charLength": 2,
                  "snippet": {
                    "text": "45"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2659,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee2c3de65f58631b6e69dbdb875e33fdd01b6e48f0148d90907922b75539fb25"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 45,
                  "charOffset": 2805,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2659,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df03af3d2a8647fbf47c75ac93e1b26b87acfd297237a1bd1732cb38b5d36d4f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "46 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2828,
                  "charLength": 2,
                  "snippet": {
                    "text": "46"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2710,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de1949c0384d7de76385298504fb300de072a1a20aa5525e0aa6f1bed65774d7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "charOffset": 2879,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2761,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ddfeaa60baafc8474b6a203be8a0c50decdce73b8b1f21fdffd56e332506129d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "charOffset": 2930,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2812,
                  "charLength": 3,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85a1cbc287013e739957151362c5d6662b96064984d6b7b4fd8c8eb416daea74"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 29,
                  "charOffset": 3200,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 29,
                  "charOffset": 3063,
                  "charLength": 6,
                  "snippet": {
                    "text": "void setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t flags) {\n    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5850be5a8c8c0d9f44dc2b648f412055ca588714e7aead2137f8079f67787c8c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 32,
                  "charOffset": 3239,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 32,
                  "charOffset": 3137,
                  "charLength": 2,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a610c58140b86c99f62a28dc398a084193bd38e560ede3b3991c66aa3050482e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 38,
                  "charOffset": 3245,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 38,
                  "charOffset": 3137,
                  "charLength": 6,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "975e84f60a0e8842b62da6b298ff318b98bed1290433c1b6f365e05ab3eb5667"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 28,
                  "charOffset": 3326,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 28,
                  "charOffset": 3253,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->always0 = 0;\n    entry->sel = sel;\n    entry->flags = flags | 0x60;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e71a75ac6759ad10a159f35e2f8315821f49e379f5628d56e61a4fe941189165"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'keys' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "charOffset": 68,
                  "charLength": 4,
                  "snippet": {
                    "text": "keys"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 6,
                  "charOffset": 43,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include <stdio.h>\n\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22b4083adf636f5b94aede24c4a1024fe01e291b3cd77f9513d52ce86368035d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "charOffset": 73,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 11,
                  "charOffset": 43,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include <stdio.h>\n\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bf0416ef7967f35e5932105deea231d8c19f46d1910785f68290500554ce96b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "charOffset": 93,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 12,
                  "charOffset": 62,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */\n        '\\t',           /* Tab */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f72cec2861a69a0cb28c469fd32cd0690e7bfae0cdab2dd70cd132224add720"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-unused-parameters",
          "ruleIndex": 614,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "parameter 'r' is unused"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 31,
                  "charOffset": 1349,
                  "charLength": 1,
                  "snippet": {
                    "text": "r"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 31,
                  "charOffset": 1315,
                  "charLength": 1,
                  "snippet": {
                    "text": "};\n\nvoid handleKeyboard(Register* r) {\n    int scancode;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "588895071b0a2e81109b4e0b0bec6ef1401760c10af192a9f79fa5d63dc9c350"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'scancode' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 9,
                  "charOffset": 1362,
                  "charLength": 8,
                  "snippet": {
                    "text": "scancode"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 9,
                  "charOffset": 1318,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid handleKeyboard(Register* r) {\n    int scancode;\n\n    //get the scan code once it's ready"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25add98bd184b8f999b688a09b21bd94a62a44940e08d3ab811050fb4eb190b7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x64 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "charOffset": 1452,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x64"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 25,
                  "charOffset": 1373,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //get the scan code once it's ready\n    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc1a958b26b573c1a726978db03f3dcac7f180296c93be0d1ae17d5e3148c7ba"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 41,
                  "charOffset": 1468,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 41,
                  "charOffset": 1373,
                  "snippet": {
                    "text": "    //get the scan code once it's ready\n    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4d66109c27b28cb3b622d28683bcb8a9938504be922c3ea8f70207ec54af08a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 31,
                  "charOffset": 1509,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 31,
                  "charOffset": 1413,
                  "charLength": 4,
                  "snippet": {
                    "text": "    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bc38b5b46082fce71fe4f2c044b653501b198915672a8975341503568bdcc34"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "charOffset": 1557,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 20,
                  "charOffset": 1531,
                  "charLength": 4,
                  "snippet": {
                    "text": "    }\n\n    if (scancode & 0x80) {\n        //key was released\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d707a52636da07e6f0a41e44e51309d4fe0aca32d3ad75b3de7a9953fdd83454"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "72 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 25,
                  "charOffset": 1651,
                  "charLength": 2,
                  "snippet": {
                    "text": "72"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 25,
                  "charOffset": 1592,
                  "charLength": 2,
                  "snippet": {
                    "text": "    } else {\n        //key pressed\n        if (scancode == 72) {\n            terminalScroll(1);\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd3bdb4c3a8d5e706a14ff78b37c9b3add57495c3346ba2172e5b01a4812e0ec"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'kernel_main' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "charOffset": 424,
                  "charLength": 11,
                  "snippet": {
                    "text": "kernel_main"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 30,
                  "charOffset": 372,
                  "charLength": 11,
                  "snippet": {
                    "text": "#include <terminal.h>\n\n__attribute__((unused)) void kernel_main(uint32_t magic, uint32_t rawAddress) {\n    uint32_t address = rawAddress + LOAD_MEMORY_ADDRESS;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3967426f45e0804aeea673697766d3390f776fe97540ff3afe58c7c6ccbcd5fe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-unused-parameters",
          "ruleIndex": 614,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "parameter 'magic' is unused"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 51,
                  "charOffset": 445,
                  "charLength": 5,
                  "snippet": {
                    "text": "magic"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 51,
                  "charOffset": 372,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include <terminal.h>\n\n__attribute__((unused)) void kernel_main(uint32_t magic, uint32_t rawAddress) {\n    uint32_t address = rawAddress + LOAD_MEMORY_ADDRESS;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ea9d35cceb14b20f5d0231bfcdb03fe8b8106d790a713b18485aadc54b1d69b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "charOffset": 585,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 30,
                  "charOffset": 532,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    BootInfo bootInfo;\n    parseBootInfo(&bootInfo, (void*)address);\n\n    initializeGdt();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f5b4a8bb655dbccdf48186755abf0f9a96f22f00a5aca6502e2847767091f02"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 19,
                  "charOffset": 814,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 749,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3afe2fa62c64f632d8530cb99822fbe3812177dc54e3eae35f03b27539ad6708"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 26,
                  "charOffset": 821,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 26,
                  "charOffset": 749,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84f1eedf84d73d0fc8582ee630b7794028cbb456760fba1d9646555bc217b067"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 33,
                  "charOffset": 828,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 33,
                  "charOffset": 749,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bbfe59d788a3ec46896b0ff5ffd859e531e593d35ed34cc17cc0b201c2dce5d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "charOffset": 1196,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 22,
                  "charOffset": 1141,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56c59900bc8fff864c3a9e0e11ad72b7b17ac3b3d38fb2ddc1f94455ceda3f94"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 29,
                  "charOffset": 1203,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 29,
                  "charOffset": 1141,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b25e6d4c3dcfa40ab28b64a2d140b979e32b175ed4228ad2c6aacf32162d995"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 36,
                  "charOffset": 1210,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 36,
                  "charOffset": 1141,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78505d7d729466aed7c3ad2e429024e1aea0977497d8d845eb8983a31b19dc95"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "4096 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 1255,
                  "charLength": 4,
                  "snippet": {
                    "text": "4096"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 1175,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);\n    FileBuffer* out = allocFileBuffer(4096);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "770d7b0c4c858532d1c84ff24fbbd684a560147df370ded8035ea2c4e4b77c86"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "4096 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "charOffset": 1300,
                  "charLength": 4,
                  "snippet": {
                    "text": "4096"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 39,
                  "charOffset": 1217,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    FileBuffer* in = allocFileBuffer(4096);\n    FileBuffer* out = allocFileBuffer(4096);\n\n    initializeBuffers(in, out);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "354ca0e8f415d96f3c2b2f8233df3bdde2adaf22ea341d070f59b2b578773cd6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 30,
                  "charOffset": 1370,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 30,
                  "charOffset": 1308,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeBuffers(in, out);\n\n    registerInterruptHandler(0x20 + 1, handleKeyboard);\n\n    int isValidRsdp = validateRSDP(&bootInfo.rsdp);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a5342c35757082cbbd0f191b96e7ff8eb83979c865aefe885fde0183bb760aa"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 28,
                  "charOffset": 1708,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 28,
                  "charOffset": 1603,
                  "snippet": {
                    "text": "    for(int i = 0; i < 4; i++) {\n        IdeDevice* device = &ide.devices[i];\n        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7c8e57fc0e6dfe99440b06463c3123df3f3a2f07adcc5bfe805f5b0f825f670"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 29,
                  "charOffset": 1813,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 29,
                  "charOffset": 1681,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "599010e08f312be208df42139162e424d24a6b85cdbee6b4e176b8de271b1170"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 34,
                  "charOffset": 1818,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 34,
                  "charOffset": 1681,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c2dffbbec03c80e4b018b4215950a6080be8ff44da0946eda052ace09d5588c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 27,
                  "charOffset": 2063,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 27,
                  "charOffset": 1977,
                  "charLength": 2,
                  "snippet": {
                    "text": "    if(hasCpuId()) {\n        printf(\"CPU ID is present\\n\");\n        char vendorString[13];\n        getVendorIdString(vendorString, 13);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25cee98068c5db0db181d4784a9fbda958650b491fe00a01308a400ca8038197"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 41,
                  "charOffset": 2108,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 41,
                  "charOffset": 1998,
                  "charLength": 2,
                  "snippet": {
                    "text": "        printf(\"CPU ID is present\\n\");\n        char vendorString[13];\n        getVendorIdString(vendorString, 13);\n\n        printf(\"Vendor is: %s\\n\", vendorString);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74aad6d8ab05902bb7a7d867a0cc3e7c94fe4af0849bf7f0a3a32bd464aaef43"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 18,
                  "charOffset": 2486,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2419,
                  "charLength": 1,
                  "snippet": {
                    "text": "    for (;;) {\n        if(bufferAvailable(out)) {\n            char c;\n            int result = readChar(out, &c);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a6c628537f549ad0eb680bcf225985310856b8c49f382532dd16c6072ef4ad0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'isMallocInitialized' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 5,
                  "charOffset": 117,
                  "charLength": 19,
                  "snippet": {
                    "text": "isMallocInitialized"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 5,
                  "charOffset": 67,
                  "charLength": 19,
                  "snippet": {
                    "text": "void* dumbMalloc(uint32_t size); //in page.c\n\nint isMallocInitialized = 0;\n\nvoid initializeMalloc(size_t size) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d81609497c2faa7ac0f716133a377dc80bf434126ba2fc21a0bc0ba8e0c2f34"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "charOffset": 391,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 7,
                  "charOffset": 305,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (isMallocInitialized) {\n        return kmalloc(size, 1, 0, \"malloc'ed\");\n    } else {\n        return dumbMalloc(size);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e8e2f868c86e39a28dba3955a641ac5a64f6bd6b07c24993c0bba9097eaea2d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "charOffset": 527,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 26,
                  "charOffset": 481,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid testMalloc() {\n    void* first = malloc(100);\n    free(first);\n    void* second = malloc(100);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4fdf19b1834ecd1cee102f9e0175a6c502a919f15db3eb912651583f7a440775"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27,
                  "charOffset": 576,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 27,
                  "charOffset": 502,
                  "charLength": 3,
                  "snippet": {
                    "text": "    void* first = malloc(100);\n    free(first);\n    void* second = malloc(100);\n    free(second);\n#pragma clang diagnostic push"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a3e55c902feb968f3a57d35b0f996d3e465d7770e7d54e10b5d2f6d793f9221"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 26,
                  "charOffset": 893,
                  "charLength": 6,
                  "snippet": {
                    "text": "100000"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 26,
                  "charOffset": 838,
                  "charLength": 6,
                  "snippet": {
                    "text": "#pragma clang diagnostic pop\n\n    void* large = malloc(100000);\n    void* next = malloc(10000);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc44bb224b2e2002ffc0d84f30e2006c4058476bf1deb4abb834f4a9aaf63402"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25,
                  "charOffset": 926,
                  "charLength": 5,
                  "snippet": {
                    "text": "10000"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 25,
                  "charOffset": 867,
                  "charLength": 5,
                  "snippet": {
                    "text": "\n    void* large = malloc(100000);\n    void* next = malloc(10000);\n\n    if (next - large < 100000) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b1f04f4b7a77dd27a36a19a6957fd7b4e2713a932cec5fd3e134f7196c39805"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 24,
                  "charOffset": 958,
                  "charLength": 6,
                  "snippet": {
                    "text": "100000"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 24,
                  "charOffset": 902,
                  "charLength": 6,
                  "snippet": {
                    "text": "    void* next = malloc(10000);\n\n    if (next - large < 100000) {\n        printf(\"Allocated next memory too close to existing\");\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2f9a5ef03881077f89a7d1cfba60c565b267c143c1d786e2ff8798dec1276e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "charOffset": 1092,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 21,
                  "charOffset": 1055,
                  "charLength": 2,
                  "snippet": {
                    "text": "    free(next);\n\n    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ce196f8ece9bb2fceb67da80085d81fb8c56cac392330202e881096bf988b0e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 25,
                  "charOffset": 1121,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 25,
                  "charOffset": 1071,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c128671ba15b5a2e5f7d99282c589efeee1afca97d7dcef7056c3802180fd34"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 31,
                  "charOffset": 1162,
                  "charLength": 5,
                  "snippet": {
                    "text": "10000"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 31,
                  "charOffset": 1072,
                  "charLength": 5,
                  "snippet": {
                    "text": "    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b68f61eeec1790fad46e808cf27a199713dd3ec9bdd45f8be3e5d7d6e8af7403"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "charOffset": 1201,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 25,
                  "charOffset": 1170,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for (int i = 0; i < 20; i++) {\n        free(addresses[i]);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c95a3101cd285f87cbe2c9d0c5f992e34fb88a9b1e25d769edd25f84bf41faf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 37,
                  "charOffset": 624,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 37,
                  "charOffset": 472,
                  "charLength": 1,
                  "snippet": {
                    "text": "            FramebufferInfo* framebufferInfo = (FramebufferInfo*) tagAddress;\n            bootInfo->isGraphics = 1;\n            bootInfo->framebuffer = (void*)framebufferInfo->framebuffer;\n            bootInfo->height = framebufferInfo->height;\n            bootInfo->width = framebufferInfo->width;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "def2cf97b7f986931808214187d6042bc1ca49813f7b63d494b7e6216c98e979"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 14,
                  "charOffset": 926,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 14,
                  "charOffset": 884,
                  "charLength": 2,
                  "snippet": {
                    "text": "            break;\n        }\n        case 14: {\n            Acpi1RSDP* acpiInfo = (Acpi1RSDP*) tagAddress;\n            bootInfo->rsdp = acpiInfo->rsdp;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "340552f83e34eb5b7133480dd5c04d9f7506c321e25d2f71129de96281bea43c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ide' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 5,
                  "charOffset": 62,
                  "charLength": 3,
                  "snippet": {
                    "text": "ide"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 5,
                  "charOffset": 38,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include <stdio.h>\n\nIde ide;\nuint8_t ideBuffer[2048];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1fcdfcd8658f72e804b4c218066e587bc4e128a58a267b0dfd1c637313ee16ff"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ideBuffer' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 75,
                  "charLength": 9,
                  "snippet": {
                    "text": "ideBuffer"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 9,
                  "charOffset": 57,
                  "charLength": 9,
                  "snippet": {
                    "text": "\nIde ide;\nuint8_t ideBuffer[2048];\n\nvoid disableAtaInterrupts() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bdd9fdf6e9e86d9ab3833fe62fe7fe37e71f4a995a4f580c710ca4aaa70a607"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2048 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 19,
                  "charOffset": 85,
                  "charLength": 4,
                  "snippet": {
                    "text": "2048"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 57,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nIde ide;\nuint8_t ideBuffer[2048];\n\nvoid disableAtaInterrupts() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43df9d58c5b4db29d9324c2d6b3d692f9aba29a5b7ccd0670fdc138d1d9aeb32"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 24,
                  "charOffset": 289,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 24,
                  "charOffset": 235,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid ataIoWait(int channel) {\n    for(int i = 0; i < 50; i++){\n        ideReadControl(channel, ATA_REG_ALTSTATUS);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0595b4856cc072a4b6b1bb30a502773295ada11db067a7166605ea996649c212"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 32,
                  "charOffset": 639,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 32,
                  "charOffset": 534,
                  "snippet": {
                    "text": "    while(1) {\n        uint8_t status = ideRead(channel, ATA_REG_STATUS);\n        if(status & ATA_SR_ERR) return 1;\n        if(!(status & ATA_SR_BSY)) return 0;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78f4f838fbbcef1a05480405036235aded5bf95b95dc9c2fba9eb5a13618bdd3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 35,
                  "charOffset": 684,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 35,
                  "charOffset": 549,
                  "snippet": {
                    "text": "        uint8_t status = ideRead(channel, ATA_REG_STATUS);\n        if(status & ATA_SR_ERR) return 1;\n        if(!(status & ATA_SR_BSY)) return 0;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c2cadc0f88f88b18b2cb913c4ae9e8615207d2ba7afe640bc82458caeeb23f0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xA0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 41,
                  "charOffset": 791,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xA0"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 41,
                  "charOffset": 703,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid ataSelect(int channel, int isSecondary) {\n    ideWrite(channel, ATA_REG_HDDEVSEL, 0xA0 | (isSecondary << 4));\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "961d9bd2d315fd2ac5b8e361b81aa5c33aa90ac24357d02be1fea4ad2cd80cdf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeDrive' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 6,
                  "charOffset": 827,
                  "charLength": 15,
                  "snippet": {
                    "text": "initializeDrive"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 6,
                  "charOffset": 819,
                  "charLength": 15,
                  "snippet": {
                    "text": "}\n\nvoid initializeDrive(int channel, int isSecondary) {\n    int index = channel*2 + isSecondary;\n    int type = IDE_ATA;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0710ae79bfcbde0529142913fb6fabd0fd5843657214e52f56d1db949b428e92"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 33,
                  "charOffset": 1173,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 33,
                  "charOffset": 1085,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint8_t status = ideRead(channel, ATA_REG_STATUS);\n    if(status == 0 || status == 0xFF) { //no drive or floating bus\n        ide.devices[index].exists = 0;\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4d97d80539db6fb6d723b91bb7c98b4636de7c0887e37ab39df7792eecb5c2a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 19,
                  "charOffset": 1460,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x14"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 19,
                  "charOffset": 1386,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint8_t high = ideRead(channel, ATA_REG_LBA2);\n\n        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f280ee8c75250d8a65f818bb5b378239c0470bf6eb2a72402c0374315238f31"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xEB is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 35,
                  "charOffset": 1476,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xEB"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 35,
                  "charOffset": 1386,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint8_t high = ideRead(channel, ATA_REG_LBA2);\n\n        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5193cfd82af3a144e456fb52e1bf1bee441e5833099be459a243d217ff0768b0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x69 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 26,
                  "charOffset": 1539,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x69"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 26,
                  "charOffset": 1442,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {\n            type = IDE_ATAPI;\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ef5b3fb87fa75b0d7fe8269d5487a852a7148e7e605d6cdf81b1bf9de07184e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 42,
                  "charOffset": 1555,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x96"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 42,
                  "charOffset": 1442,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {\n            type = IDE_ATAPI;\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81215262a7b64a0d52977c8e38ddb19b7975a9fadbbb7580e7d5ab01dd2a4ad9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 24,
                  "charOffset": 1877,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 24,
                  "charOffset": 1802,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    uint16_t* shortBuffer = (uint16_t*) ideBuffer;\n    for(int i = 0; i < 256; i++) {\n        uint16_t base = ide.channels[channel].base;\n        uint16_t value = inportShort(base + ATA_REG_DATA);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca83eb0f0e4a1c385e094500967686b12a67c4b7717b4d11370aea90ef4e87a6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 36,
                  "charOffset": 2460,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 36,
                  "charOffset": 2348,
                  "charLength": 2,
                  "snippet": {
                    "text": "    device->commandSets = *(uint32_t*)(ideBuffer + ATA_IDENT_COMMAND_SETS);\n\n    if(device->commandSets & (1 << 26)) {\n        device->size = *(uint32_t*)(ideBuffer + ATA_IDENT_MAX_LBA_EXT);\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3c1c06244c23459b0a6ad969cee90d41026ace364ec1a2c61ead76a28481828"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 24,
                  "charOffset": 2650,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 24,
                  "charOffset": 2620,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for(int i = 0; i < 40; i += 2) {\n        device->model[i] = (char)ideBuffer[ATA_IDENT_MODEL + i + 1];\n        device->model[i+1] = (char)ideBuffer[ATA_IDENT_MODEL + i];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b21336641c882c67dadb8b5997276bec95d4a35199d56b8d6064d51b61e5f078"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "charOffset": 2824,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 19,
                  "charOffset": 2733,
                  "charLength": 2,
                  "snippet": {
                    "text": "        device->model[i+1] = (char)ideBuffer[ATA_IDENT_MODEL + i];\n    }\n    device->model[40] = 0;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e774c0281f3dc0e5edf86f4d87321f16225413d2032366486c318c541c2538d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1F0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 19,
                  "charOffset": 2890,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x1F0"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 19,
                  "charOffset": 2835,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "579defb34747f75bbb6e5bd22eeaf665a200f628c799860bcb74acaedddf4f93"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x3F64 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 26,
                  "charOffset": 2897,
                  "charLength": 6,
                  "snippet": {
                    "text": "0x3F64"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 26,
                  "charOffset": 2835,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23a6d055e8217851b28ea88ee5d0025c18ddcf52eccaa020c8dbae9c4c47618c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x170 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 34,
                  "charOffset": 2905,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x170"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 34,
                  "charOffset": 2835,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b8b216d3b9d4c93ad47a1d6ff1beef3aefe64ceb40bb542c2fded727a023c1b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x374 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 41,
                  "charOffset": 2912,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x374"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 41,
                  "charOffset": 2835,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72158112642a9a5e34be16e8a2a5b19a6a3dd60fc6aa1fd15d40066094172200"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 45,
                  "charOffset": 3089,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 45,
                  "charOffset": 2930,
                  "charLength": 10,
                  "snippet": {
                    "text": "void initializeIde(uint32_t bar0, uint32_t bar1, uint32_t bar2, uint32_t bar3,\n                   uint32_t bar4) {\n    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c45d21bc25a64f25558343cdda3711de2d6dd697c2f843b459787a2596925a1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 52,
                  "charOffset": 3152,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 52,
                  "charOffset": 3009,
                  "charLength": 10,
                  "snippet": {
                    "text": "                   uint32_t bar4) {\n    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ac3e17ed882d38fd27a7e5f94dadad78b4cb2944d9eb98c66605ec3ff87ecd6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 47,
                  "charOffset": 3210,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 47,
                  "charOffset": 3045,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24b7d5f5da732c509ad055c01427c1777a42ba32a52dce6219b4bc48ec82d94b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 54,
                  "charOffset": 3275,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 54,
                  "charOffset": 3101,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1eff19b51cd7ef6d4f7cfd787b33d7dd756f9f4c8f4413e39013c9dc5ea67282"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 54,
                  "charOffset": 3340,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 54,
                  "charOffset": 3164,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82d6065e3c2f55fde145044abf8a84c7f0cc1d7eae4de6f5270e076a8e96839c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 57,
                  "charOffset": 3408,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 57,
                  "charOffset": 3222,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;\n\n    disableAtaInterrupts();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ac3e17ed882d38fd27a7e5f94dadad78b4cb2944d9eb98c66605ec3ff87ecd6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 29,
                  "charOffset": 627,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 29,
                  "charOffset": 544,
                  "charLength": 3,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_CONTROL, 0x02);\n\n    int numSectors = length/512;\n\n    ataWaitUntilReady(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2046c9cd5e6333e010f8638084a7baacbf48cf8a93afcbc9e02742ec1308f49c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0f000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 37,
                  "charOffset": 710,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0f000000"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 37,
                  "charOffset": 633,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25a713e55660210e906775be05e0280da4c96d9b378a934cb91d4c4dc66a8182"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 52,
                  "charOffset": 725,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 52,
                  "charOffset": 633,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3284739da178389bf6d99145ea4b4aeb682c51d4ab9761e5f7f937849702194e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 23,
                  "charOffset": 751,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xE0"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 23,
                  "charOffset": 673,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n\n    ideWrite(device->channel, ATA_REG_HDDEVSEL, devSel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77db80561a04d3d01256198ff42a04d06910b6193c5a53495d502be54ba6f1fe"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x000000FF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 61,
                  "charOffset": 1022,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x000000FF"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 61,
                  "charOffset": 845,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_FEATURES, 0x00);\n    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44e9bce15e4413a2b9bbccf493680524ff0851e2f3217eeb682b24cdf2485635"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FF00 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 61,
                  "charOffset": 1101,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0000FF00"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 61,
                  "charOffset": 900,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0114caade10f1e4e08c22dd248bd70bb3c0c0e1245ed7ca7e85dcd4147096b7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x00FF0000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 61,
                  "charOffset": 1180,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x00FF0000"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 61,
                  "charOffset": 962,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9b270a4fd4507adc6d740fcbd470f50a075ae20292b3f7efd8e16cf99c8bcd0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 76,
                  "charOffset": 1195,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 76,
                  "charOffset": 962,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bce9f6b123eeb8f8f55439aa1a91ab1a7401b5f1733949c6124139642247be0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 33,
                  "charOffset": 1464,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 33,
                  "charOffset": 1389,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < numSectors; i++) {\n        readShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89a2bc1dd2bbd61c6d03aa2515519a9b97cf199bab7deb4f1269dd3f08275c77"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 19,
                  "charOffset": 1513,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 19,
                  "charOffset": 1390,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(int i = 0; i < numSectors; i++) {\n        readShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2d876c0cd2794533c66f93906fbea2e2b81b70e80f67208e09521637adf9873"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 29,
                  "charOffset": 699,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 29,
                  "charOffset": 523,
                  "charLength": 3,
                  "snippet": {
                    "text": "void ataWriteSectors(IdeDevice* device, uint32_t blockAddress, uint8_t* buffer, int length) {\n    ideWrite(device->channel, ATA_REG_CONTROL, 0x02);\n    int numSectors = length/512 + 1;\n\n    ataWaitUntilReady(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c29f0018b194a622ba90ccf73b1364d20adccfd0e5b084c8c82d4d5553be621b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0f000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 37,
                  "charOffset": 786,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0f000000"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 37,
                  "charOffset": 709,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "854f1ceae26f6ab3fc101b959d69047c4f83e35a7903f87029482af750f05865"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 52,
                  "charOffset": 801,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 52,
                  "charOffset": 709,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b0758adcf81cfc17237e7af91f87177d26ec3a5ffedf5124cf69a6a97144c13"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 23,
                  "charOffset": 827,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xE0"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 23,
                  "charOffset": 749,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n\n    ideWrite(device->channel, ATA_REG_HDDEVSEL, devSel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9769644dfd42afe4c72588285c975f59a93fcb02486f157db8c125b0a3e80bd2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x000000FF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 61,
                  "charOffset": 1156,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x000000FF"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 61,
                  "charOffset": 979,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_FEATURES, 0x00);\n    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0da2581de521487d720da4276d6c22911b7746fbc81b920d65579381b016b827"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FF00 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 61,
                  "charOffset": 1235,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0000FF00"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 61,
                  "charOffset": 1034,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae698b14438e7cd1d5cc0fec9f02c5149d58ab4129a7f932368c79c9e9be3da2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x00FF0000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 61,
                  "charOffset": 1314,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x00FF0000"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 61,
                  "charOffset": 1096,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d0875942dff6a424480eafdf0b3c31583aa44805578f972904213c1e1fec24c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 76,
                  "charOffset": 1329,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 76,
                  "charOffset": 1096,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a31753d90e5c289d66ba2be1e8994efd2634ead11c627fdd25c84a41d6a491c0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "charOffset": 1564,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 38,
                  "charOffset": 1484,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < numSectors; i++) {\n        writePortShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c40bb7172096fd42de3ebe9ad179befbb3b6856090090480d6dc8a5f2dc7d5a9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "charOffset": 1613,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 19,
                  "charOffset": 1485,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(int i = 0; i < numSectors; i++) {\n        writePortShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c2dabdf9c8a5d204266c0ce6d47b13ecaf2977dfcb68cc24a9b3f0286a471b1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 27,
                  "charOffset": 152,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 27,
                  "charOffset": 38,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02e55971fd1e343f0b36e37563fef3762faad0ce9100660010b34c25f7d324e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 44,
                  "charOffset": 169,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 44,
                  "charOffset": 38,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b409e70ca818d9f8d28e817c650fc5cdbb5f33dd5da6aff5bf350633cab728c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 30,
                  "charOffset": 221,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x80000000"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 30,
                  "charOffset": 39,
                  "charLength": 10,
                  "snippet": {
                    "text": "uint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n\n    outportInt(PCI_CONFIG_ADDRESS, address);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b03fe1de65539e33cf16b5a2192dc4d0d9a6d13116cb70bdb4a3510ecfcfabb3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 54,
                  "charOffset": 245,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFC"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 54,
                  "charOffset": 39,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n\n    outportInt(PCI_CONFIG_ADDRESS, address);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3401537914cf591eff6e37c61fb10cc77055abdd58a8120c9d4337b4e04cded9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 43,
                  "charOffset": 535,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 43,
                  "charOffset": 340,
                  "charLength": 6,
                  "snippet": {
                    "text": "uint16_t pciReadWord(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> ((offset & 2)*8)) & 0xFFFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "097a65770fd67f72d5d994896a7699e63353873c1f95b810f940dfe7873a12d5"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 41,
                  "charOffset": 738,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 41,
                  "charOffset": 546,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint8_t pciReadByte(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> (offset & 3)*8) & 0xFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee767b67db24b3d4ab425a2f018afb40b270582b45e4835480e11701587f2ad3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xB is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 47,
                  "charOffset": 1117,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xB"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 47,
                  "charOffset": 996,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadClassCode(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xB);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4932128e2228667b0cbf220707c5b5b826b00e6f29dc69ee52b2cb6d249d0bef"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xA is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 47,
                  "charOffset": 1249,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xA"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 47,
                  "charOffset": 1125,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadSubClassCode(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xA);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a17471d42f8bb4ee4cffb0d9afd042f5ae8452fd5ab3b4949eb6562d3e223c49"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 47,
                  "charOffset": 1389,
                  "charLength": 3,
                  "snippet": {
                    "text": "0x9"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 47,
                  "charOffset": 1257,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadProgrammingInterface(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0x9);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "656ca3113d87a7ec5ebb2f1f8a05d793dc243b34db36759f3132706e3487303c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 47,
                  "charOffset": 1519,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xE"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 47,
                  "charOffset": 1397,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadHeaderType(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xE);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fa18ef402b17b2aab1451b5c4fb31ea93364d9a0cf65e7dfbc1d9e573f13c98"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 1668,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1528,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint32_t pciReadBar(uint8_t bus, uint8_t device, uint8_t function, uint8_t bar) {\n    //Todo: handle different header types\n    int index = 0x10 + bar*4;\n    return pciReadDword(bus, device, function, index);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "775a1516caf0b995ad4e838f1d265a59f227ace8a76f8867cbf7276e99b82d04"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalRow' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 8,
                  "charOffset": 109,
                  "charLength": 11,
                  "snippet": {
                    "text": "terminalRow"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 8,
                  "charOffset": 71,
                  "charLength": 11,
                  "snippet": {
                    "text": "const size_t VGA_HEIGHT = 40;\n\nsize_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45860865439c65f92127a7db8398151081bf920a7c9c08616a6e76ddda69dea7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColumn' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "charOffset": 133,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalColumn"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 8,
                  "charOffset": 101,
                  "charLength": 14,
                  "snippet": {
                    "text": "\nsize_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a88264171450dcde744282c0ef28f39fd4b10eb93f3fbbd01e9275d2521d863"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColor' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "charOffset": 161,
                  "charLength": 13,
                  "snippet": {
                    "text": "terminalColor"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 9,
                  "charOffset": 102,
                  "charLength": 13,
                  "snippet": {
                    "text": "size_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b285e3655c51d31939cbbcf5b7429964796191af3884ea88cfd508a1b65c99b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalCanvas' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 9,
                  "charOffset": 188,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalCanvas"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 9,
                  "charOffset": 126,
                  "charLength": 14,
                  "snippet": {
                    "text": "size_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ab55cf9b821b5ec451c41793446523621b2e96e67c5cd266cdc67b55e4b2d34"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalCanvas' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 9,
                  "charOffset": 188,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalCanvas"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 9,
                  "charOffset": 126,
                  "charLength": 14,
                  "snippet": {
                    "text": "size_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "403da053fc2a6bf8cf93c3208f517018cfad49b6844170fe3b856c8050673100"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include \"cpuid_mock.h\"\n\n#include <cstdio>\n#include <cstring>\n#include <gtest/gtest.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f329601676020fd002ea16b8ad283ad1ff17870e9867c55e6dd6a207558ee33a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 24,
                  "charOffset": 96,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 52,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include <string.h>\n\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9109b09c2a593a1698800af03a1f162f8662875b554db498d53ad24561285b4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 113,
                  "charLength": 3,
                  "snippet": {
                    "text": "idt"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 72,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bfc566d7acd3128945a63e3902fa7490da0eacde05c6d8c4c4acacd9e59947c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "charOffset": 142,
                  "charLength": 6,
                  "snippet": {
                    "text": "idtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 8,
                  "charOffset": 73,
                  "charLength": 6,
                  "snippet": {
                    "text": "__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n\nvoid initializeIdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8ea7d9c36824f349f5d64fe0d6655ffed976388652ff4ba80d5cabafc44d455"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeIdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "charOffset": 156,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeIdt"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 6,
                  "charOffset": 135,
                  "charLength": 13,
                  "snippet": {
                    "text": "IdtPtr idtPtr;\n\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "10becd26fc7196f09a10501262bbd9fb24cffad108b31d2025adda01f2d68d6d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 13,
                  "charOffset": 186,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 13,
                  "charOffset": 150,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2de7ff6658469cfce46c6b6047ff2f897980213b87de365f8c029aa834ffade"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "charOffset": 192,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x28"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 19,
                  "charOffset": 150,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1703f75cdb64714ce35021cdbfb2a57135aa29b81abcfe5403aa45bc299dd66c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "charOffset": 204,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 5,
                  "charOffset": 174,
                  "charLength": 6,
                  "snippet": {
                    "text": "    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));\n    idtPtr.base = (uint32_t) idt;\n    idtPtr.limit = sizeof(idt) - 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37800118bb0c417391bfbe6a0f5fc6e5f3bfb9b910757162c31f2a284608e1c1"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 407,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b90a865013bddd81ff641a88b0a174cff152fcdb61d6dacf7d3d5d9328d1e19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 462,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 304,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ae6ea45dad053412389d3a5199b86157f8a2ae2be0da2f87c4b281fe1819cf9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 517,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 359,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a0de4079ff5c27a99467bcd7a898f6c55bba87d2805a431900bc1bf10adf91f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 572,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 414,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "811e0ed554027051a7d3cc7afc1174644d46485d6cea9f6463807c7ce6b94996"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 595,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 17,
                  "charOffset": 469,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ece1c81502543096d9904accf5a8f6be29f7dfcd9a8250aa68c5c7b79c58f5e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 627,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 469,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d810a22c2d708b2850180992f328bdfdd62b16a131403f34d5d46848a1b96b7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 650,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 524,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c08a0142742bdbc14a0dc844aa652872432e6e33b0449b7028215009c71e5e7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 682,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 524,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da934d444a1f3abe8a07e880d1b6aec7f1cd88c4e9f6c5ac38f8f11606df1f1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 49,
                  "charOffset": 737,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 579,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c46e6b5b750a19d37aaca2f3b2097a0fdd3e3e9352e7b5f6356e02f93e8fc09"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 49,
                  "charOffset": 792,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 634,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "034798b8e91add672b76a4bb1efbda2e6bb46c98ea032f732c98d1ead550e5c0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 815,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 689,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f24c5bf78ada083d5d00d1d7897152d53578a9d46125913f3369873d579630d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 870,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 744,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66da98c94f015db410f7dd077ec9856ea6a575f312f40d636e0f8c1a8565e535"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 927,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 799,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ebebfe5fef97632719aef4db0e9471e907f8d10be81d2140621b3270c091f0dd"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 984,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 854,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab9ccfcefbc240fc961ec24bff269a0a2207a59ed7bd45a2d07913fee092e832"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1041,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 911,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec821a7d25faa1e7ae08923a1d34982d80cd8038f592281d98ae9fc222055730"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1098,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 968,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb83b0ed495ccfdff420be4b382a14482782e468a1753899fdf249a877c71c32"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "15 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1155,
                  "charLength": 2,
                  "snippet": {
                    "text": "15"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1025,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4b3a7f8fe15b4b99954b43e3c6be37a00ca686fe301197b9eba2ebea5c536e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1212,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1082,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ff7da6f49bfc3a65abb8735c87bc533d7550c67363b615958b45bf6a2eb1d15"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "17 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1269,
                  "charLength": 2,
                  "snippet": {
                    "text": "17"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1139,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07e0939fcec73d663ecaa2ff3acc5aea8b36e9a90a45adf6f594d7d4b5e8bb90"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "18 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1326,
                  "charLength": 2,
                  "snippet": {
                    "text": "18"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1196,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "517309e5c3e015b4e0e0654efc11ded982b4ea76ee0073f33dd0a8c5dc31f51c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "19 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1383,
                  "charLength": 2,
                  "snippet": {
                    "text": "19"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1253,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e9e8409bd5130657bbef728fc2c85ded8d4ad9766fe65b36dba02b15e4c9697"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1440,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1310,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2901523ccc78106acd3ed0c14191d0208a4b1d67745a38d3921de2962852e7b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1474,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1310,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "21 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1497,
                  "charLength": 2,
                  "snippet": {
                    "text": "21"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1367,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76e806c230d76eb799bb0815399e91bba731f05e36275931fe92146b8c15ad2b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "22 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1554,
                  "charLength": 2,
                  "snippet": {
                    "text": "22"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1424,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3bac6cdba7f41d0907223f6df271931bebebca9232b4c0528224aeeccfaac19"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "23 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1611,
                  "charLength": 2,
                  "snippet": {
                    "text": "23"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1481,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d99a4b015fdd02a01f8aae5511b3bb0660d3dd9bfdc67552f26a5e8535478366"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1645,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1481,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61945c13b218e3a9ada2937d0abf127c5d99443cce32938abbac7f0f59519ea2"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1668,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1538,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d019649283a2f781c66628f4ef78c9940d05a58f20546a3842bd2d311529d90f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1702,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1538,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0490cde5a8adc093816228412f172404f44e5fa61eedb778a91787ab6aef8e36"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "25 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1725,
                  "charLength": 2,
                  "snippet": {
                    "text": "25"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1595,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6be5e55122f9d8d93be3bbea9878f5622f49cbdce04d39155be2be9545f8125e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1759,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1595,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ab7d95e2cc511a02485d3d37821bb7ea51dab6a60944503ef27f9aed0946567"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1782,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1652,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eedafae3f2e69492eb3bfade9d99502ff826f311a5173706e0a5b95f14a2980c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1816,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1652,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "034798b8e91add672b76a4bb1efbda2e6bb46c98ea032f732c98d1ead550e5c0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1839,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1709,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13dbb280df1dc77800747b5b6e230209ce761f7a560342f96ef6e46a94deccdc"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1873,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ea03aba4e3a86ba67821693fa1cc664fc7ab0f26f9ade8ebb563e93e19dd396"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1896,
                  "charLength": 2,
                  "snippet": {
                    "text": "28"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1766,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4161350cc3eb53d1d95b2aa338940eacc71102cbd96bc5b71364d3aeadbc006b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1930,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1766,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59ed3b87c1194b49ffa214edc6c9ca5497550340ddb64e02253555d372289fa0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "29 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1953,
                  "charLength": 2,
                  "snippet": {
                    "text": "29"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1823,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c7ccfc312e91b83dd959cf369f38a2542cfc74648f93c485262d69160ac63d3"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 1987,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1823,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6dd0094cccf9b252dfd1a03439fc940c3094dd15dec6ff74d7474e407d9fe534"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2010,
                  "charLength": 2,
                  "snippet": {
                    "text": "30"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1880,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e707382dfaa4ce657bbe224af0e657cdda87335fe3cef91c4b222d16dd5de52f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2067,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1937,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87288ffac2a1dfbee57661925764ce3bdf634b7912b9262cf8ae24e32f652216"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 51,
                  "charOffset": 2101,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 1937,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9a86e6c5a5dcf8c6fa95fd8a66d8d2c2e9890e72e1b8fd41deb4cb933f1a87a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2124,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 1994,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c050559dbcb2fd66ae2e73e7b0371956ee1094fa7457a926d7d2dcd53bd59578"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2151,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 44,
                  "charOffset": 1994,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ab45a8cd57683204ec7eeab6d0f74bf987a57bfebb8cfff692c7e2c191d047f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "33 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2174,
                  "charLength": 2,
                  "snippet": {
                    "text": "33"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2051,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bb5976e414309d0cbaf6a295d9dcab23bc8728fd1e1fa2176f0d58882bbb8c8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2201,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2051,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "125884eea7366a30c5281cb99990b375d618c3c6d5a3e95658db73a1668cd7f4"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "34 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2224,
                  "charLength": 2,
                  "snippet": {
                    "text": "34"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2108,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f190657094f77868058a72b24c7e34cb72722efd5ec844a00436c87a546c9751"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2251,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2108,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b32771612ef202e3853ecbb48441ec496d32bb2220ccc3fd00e6dc97bbc7fa8"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "35 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2274,
                  "charLength": 2,
                  "snippet": {
                    "text": "35"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2158,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "867f6219e8425b6f8111f876c6ef472abccf83b7005290a757706813ef3f386d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2301,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2158,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec7924d2e7cbc1da005a30af248588e488043b917748bd5d2c9f3d9f5b3113d0"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "36 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2324,
                  "charLength": 2,
                  "snippet": {
                    "text": "36"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2208,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e1762be3356a5d0d0ff6cffa8bcceae5198131a3bdd3c2035a97eb080657b02"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2351,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2208,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fc9e405126673da7da96e045fa638c2a333e807a50425b3e48a48af2d6c3ebb"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "37 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2374,
                  "charLength": 2,
                  "snippet": {
                    "text": "37"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2258,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f12b41cd0d0eb8ba04c95b218549094e2ab7cf71fcbcd0f39b3324aedbe4327"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2401,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2258,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f1e84437c6b473f16fe54ec3f144666bf734f2e283afef8ce1a3529a04b265"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "38 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2424,
                  "charLength": 2,
                  "snippet": {
                    "text": "38"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2308,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a491a6245fe23a259446a2a8fb2911f96d7c7018098136c74e62880af21638f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2451,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2308,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ca01c3422b9d0a7e408a6c30080d9a3b093736829f43649f898b344e990dc54"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "39 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2474,
                  "charLength": 2,
                  "snippet": {
                    "text": "39"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2358,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b69203f604462f1700abd9426479218ec4012049a1c2de7226381fa393723c00"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2501,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54ac373156a6ac4a20ab9f2470fc3cd3e4e13f8a49d649906afcd26086b3dfb7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2524,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2408,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c405837b21f9caae40c8025e4ed46983ae0ae6657c6ca698e7b3ab4c68bda1b9"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2551,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2408,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "896ee3dc896c0b8eae11810f1b3f09c814e42ea6d21a1ad93fcd1e7691b76c47"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "41 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2574,
                  "charLength": 2,
                  "snippet": {
                    "text": "41"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2458,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d82655c3d0c2b7cf71e17040d0635617b1905af9add713a3e44d1502a97a07b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 44,
                  "charOffset": 2601,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2458,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ef98f298c7c317a4025f76a3325591daa9eff10221669be0e812f2a1fc42ca6"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "42 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2624,
                  "charLength": 2,
                  "snippet": {
                    "text": "42"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2508,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ae7384ec9bdce5480fe522f65309ee61a9bb200c97a96686378a975b60dbbdf"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2652,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 45,
                  "charOffset": 2508,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a808fbf7c699ac448312e4bd8558186f511c994cefe1a1ee47efe4daaf9f46a"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "43 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2675,
                  "charLength": 2,
                  "snippet": {
                    "text": "43"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2558,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f76aff4e3ae5ecfcab79f8392cf4b86692f6053b72734a0b21e8c7b2179af372"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2703,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2558,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f04ab3e0bf2561f7a0ef91caa9d71ed9e0f64528e36517ae745bb329aa4ffb40"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "44 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2726,
                  "charLength": 2,
                  "snippet": {
                    "text": "44"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2608,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de5a1dab8f9265e7d18d796ad029aa061c7ab399a391070f639418ef6efc793b"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 45,
                  "charOffset": 2754,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2608,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "45 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2777,
                  "charLength": 2,
                  "snippet": {
                    "text": "45"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2659,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee2c3de65f58631b6e69dbdb875e33fdd01b6e48f0148d90907922b75539fb25"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 45,
                  "charOffset": 2805,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2659,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df03af3d2a8647fbf47c75ac93e1b26b87acfd297237a1bd1732cb38b5d36d4f"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "46 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2828,
                  "charLength": 2,
                  "snippet": {
                    "text": "46"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2710,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de1949c0384d7de76385298504fb300de072a1a20aa5525e0aa6f1bed65774d7"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "charOffset": 2879,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2761,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ddfeaa60baafc8474b6a203be8a0c50decdce73b8b1f21fdffd56e332506129d"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "charOffset": 2930,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2812,
                  "charLength": 3,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85a1cbc287013e739957151362c5d6662b96064984d6b7b4fd8c8eb416daea74"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 29,
                  "charOffset": 3200,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 29,
                  "charOffset": 3063,
                  "charLength": 6,
                  "snippet": {
                    "text": "void setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t flags) {\n    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5850be5a8c8c0d9f44dc2b648f412055ca588714e7aead2137f8079f67787c8c"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 32,
                  "charOffset": 3239,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 32,
                  "charOffset": 3137,
                  "charLength": 2,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a610c58140b86c99f62a28dc398a084193bd38e560ede3b3991c66aa3050482e"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 38,
                  "charOffset": 3245,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 38,
                  "charOffset": 3137,
                  "charLength": 6,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "975e84f60a0e8842b62da6b298ff318b98bed1290433c1b6f365e05ab3eb5667"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 28,
                  "charOffset": 3326,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 28,
                  "charOffset": 3253,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->always0 = 0;\n    entry->sel = sel;\n    entry->flags = flags | 0x60;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e71a75ac6759ad10a159f35e2f8315821f49e379f5628d56e61a4fe941189165"
          },
          "baselineState": "unchanged",
          "properties": {
            "tags": [
              "C"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "QDCL/qodana/2024-06-07",
        "guid": "1c976c1d-9f5f-4eed-a9bf-b635b4f1e76d",
        "properties": {
          "jobUrl": "https://github.com/LandryNorris/os/actions/runs/9410870859"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "columnKind": "unicodeCodePoints",
      "properties": {
        "deviceId": "200820300000000-7f15-ffa6-e3ca-1c02b22cc74f"
      }
    }
  ]
}