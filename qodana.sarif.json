{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDCL",
          "fullName": "Qodana for C/C++",
          "version": "2024.1.2103.20",
          "rules": [
            {
              "id": "clang-analyzer-cplusplus.ArrayDelete",
              "name": "clang-analyzer-cplusplus.ArrayDelete",
              "shortDescription": {
                "text": "ArrayDelete"
              },
              "fullDescription": {
                "text": "ArrayDelete"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ReturnPtrRange",
              "name": "clang-analyzer-alpha.security.ReturnPtrRange",
              "shortDescription": {
                "text": "ReturnPtrRange"
              },
              "fullDescription": {
                "text": "ReturnPtrRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-7",
              "name": "clion-misra-c2012-16-7",
              "shortDescription": {
                "text": "misra-c2012-16-7"
              },
              "fullDescription": {
                "text": "misra-c2012-16-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-2",
              "name": "clion-misra-c2012-12-2",
              "shortDescription": {
                "text": "misra-c2012-12-2"
              },
              "fullDescription": {
                "text": "misra-c2012-12-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.C11Lock",
              "name": "clang-analyzer-alpha.core.C11Lock",
              "shortDescription": {
                "text": "C11Lock"
              },
              "fullDescription": {
                "text": "C11Lock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-namespace-comments",
              "name": "google-readability-namespace-comments",
              "shortDescription": {
                "text": "readability-namespace-comments"
              },
              "fullDescription": {
                "text": "readability-namespace-comments"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-move-operations",
              "name": "cppcoreguidelines-noexcept-move-operations",
              "shortDescription": {
                "text": "noexcept-move-operations"
              },
              "fullDescription": {
                "text": "noexcept-move-operations"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-3-5",
              "name": "clion-misra-cpp2008-15-3-5",
              "shortDescription": {
                "text": "misra-cpp2008-15-3-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-3-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-pointer-arithmetic",
              "name": "cppcoreguidelines-pro-bounds-pointer-arithmetic",
              "shortDescription": {
                "text": "pro-bounds-pointer-arithmetic"
              },
              "fullDescription": {
                "text": "pro-bounds-pointer-arithmetic"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.IteratorRange",
              "name": "clang-analyzer-alpha.cplusplus.IteratorRange",
              "shortDescription": {
                "text": "IteratorRange"
              },
              "fullDescription": {
                "text": "IteratorRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-restrict-system-libc-headers",
              "name": "llvmlibc-restrict-system-libc-headers",
              "shortDescription": {
                "text": "restrict-system-libc-headers"
              },
              "fullDescription": {
                "text": "restrict-system-libc-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-no-automatic-move",
              "name": "performance-no-automatic-move",
              "shortDescription": {
                "text": "no-automatic-move"
              },
              "fullDescription": {
                "text": "no-automatic-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-crtp-constructor-accessibility",
              "name": "bugprone-crtp-constructor-accessibility",
              "shortDescription": {
                "text": "crtp-constructor-accessibility"
              },
              "fullDescription": {
                "text": "crtp-constructor-accessibility"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-equals-default",
              "name": "modernize-use-equals-default",
              "shortDescription": {
                "text": "use-equals-default"
              },
              "fullDescription": {
                "text": "use-equals-default"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-declaration",
              "name": "readability-redundant-declaration",
              "shortDescription": {
                "text": "redundant-declaration"
              },
              "fullDescription": {
                "text": "redundant-declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-14",
              "name": "clion-misra-cpp2008-5-0-14",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-14"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-14"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-header-anon-namespaces",
              "name": "fuchsia-header-anon-namespaces",
              "shortDescription": {
                "text": "header-anon-namespaces"
              },
              "fullDescription": {
                "text": "header-anon-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.gets",
              "name": "clang-analyzer-security.insecureAPI.gets",
              "shortDescription": {
                "text": "gets"
              },
              "fullDescription": {
                "text": "gets"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-virtual-call-in-ctor-or-dtor",
              "name": "clion-virtual-call-in-ctor-or-dtor",
              "shortDescription": {
                "text": "virtual-call-in-ctor-or-dtor"
              },
              "fullDescription": {
                "text": "virtual-call-in-ctor-or-dtor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-noexcept-move",
              "name": "hicpp-noexcept-move",
              "shortDescription": {
                "text": "noexcept-move"
              },
              "fullDescription": {
                "text": "noexcept-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc54-cpp",
              "name": "cert-msc54-cpp",
              "shortDescription": {
                "text": "msc54-cpp"
              },
              "fullDescription": {
                "text": "msc54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.SelfInit",
              "name": "clang-analyzer-osx.cocoa.SelfInit",
              "shortDescription": {
                "text": "SelfInit"
              },
              "fullDescription": {
                "text": "SelfInit"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-header-guard",
              "name": "llvm-header-guard",
              "shortDescription": {
                "text": "header-guard"
              },
              "fullDescription": {
                "text": "header-guard"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-trivially-destructible",
              "name": "performance-trivially-destructible",
              "shortDescription": {
                "text": "trivially-destructible"
              },
              "fullDescription": {
                "text": "trivially-destructible"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-inconsistent-declaration-parameter-name",
              "name": "readability-inconsistent-declaration-parameter-name",
              "shortDescription": {
                "text": "inconsistent-declaration-parameter-name"
              },
              "fullDescription": {
                "text": "inconsistent-declaration-parameter-name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.strcpy",
              "name": "clang-analyzer-security.insecureAPI.strcpy",
              "shortDescription": {
                "text": "strcpy"
              },
              "fullDescription": {
                "text": "strcpy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl59-cpp",
              "name": "cert-dcl59-cpp",
              "shortDescription": {
                "text": "dcl59-cpp"
              },
              "fullDescription": {
                "text": "dcl59-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-string-concatenation",
              "name": "performance-inefficient-string-concatenation",
              "shortDescription": {
                "text": "inefficient-string-concatenation"
              },
              "fullDescription": {
                "text": "inefficient-string-concatenation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-pos47-c",
              "name": "cert-pos47-c",
              "shortDescription": {
                "text": "pos47-c"
              },
              "fullDescription": {
                "text": "pos47-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-2",
              "name": "clion-misra-c2012-10-2",
              "shortDescription": {
                "text": "misra-c2012-10-2"
              },
              "fullDescription": {
                "text": "misra-c2012-10-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.localizability.PluralMisuseChecker",
              "name": "clang-analyzer-alpha.osx.cocoa.localizability.PluralMisuseChecker",
              "shortDescription": {
                "text": "PluralMisuseChecker"
              },
              "fullDescription": {
                "text": "PluralMisuseChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa.localizability",
                    "index": 19,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-uppercase-literal-suffix",
              "name": "hicpp-uppercase-literal-suffix",
              "shortDescription": {
                "text": "uppercase-literal-suffix"
              },
              "fullDescription": {
                "text": "uppercase-literal-suffix"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-3-4",
              "name": "clion-misra-cpp2008-7-3-4",
              "shortDescription": {
                "text": "misra-cpp2008-7-3-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-3-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-make-shared",
              "name": "modernize-make-shared",
              "shortDescription": {
                "text": "make-shared"
              },
              "fullDescription": {
                "text": "make-shared"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "zircon-temporary-objects",
              "name": "zircon-temporary-objects",
              "shortDescription": {
                "text": "temporary-objects"
              },
              "fullDescription": {
                "text": "temporary-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "zircon",
                    "index": 20,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "boost-use-to-string",
              "name": "boost-use-to-string",
              "shortDescription": {
                "text": "use-to-string"
              },
              "fullDescription": {
                "text": "use-to-string"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "boost",
                    "index": 21,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-exp42-c",
              "name": "cert-exp42-c",
              "shortDescription": {
                "text": "exp42-c"
              },
              "fullDescription": {
                "text": "exp42-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-string-find-startswith",
              "name": "abseil-string-find-startswith",
              "shortDescription": {
                "text": "string-find-startswith"
              },
              "fullDescription": {
                "text": "string-find-startswith"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-5",
              "name": "clion-misra-c2012-11-5",
              "shortDescription": {
                "text": "misra-c2012-11-5"
              },
              "fullDescription": {
                "text": "misra-c2012-11-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-7",
              "name": "clion-misra-c2012-11-7",
              "shortDescription": {
                "text": "misra-c2012-11-7"
              },
              "fullDescription": {
                "text": "misra-c2012-11-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-reference-coroutine-parameters",
              "name": "cppcoreguidelines-avoid-reference-coroutine-parameters",
              "shortDescription": {
                "text": "avoid-reference-coroutine-parameters"
              },
              "fullDescription": {
                "text": "avoid-reference-coroutine-parameters"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-avoid-nsobject-new",
              "name": "google-objc-avoid-nsobject-new",
              "shortDescription": {
                "text": "objc-avoid-nsobject-new"
              },
              "fullDescription": {
                "text": "objc-avoid-nsobject-new"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.SimpleStream",
              "name": "clang-analyzer-alpha.unix.SimpleStream",
              "shortDescription": {
                "text": "SimpleStream"
              },
              "fullDescription": {
                "text": "SimpleStream"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-global-variable-declaration",
              "name": "google-objc-global-variable-declaration",
              "shortDescription": {
                "text": "objc-global-variable-declaration"
              },
              "fullDescription": {
                "text": "objc-global-variable-declaration"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.InvalidatedIterator",
              "name": "clang-analyzer-alpha.cplusplus.InvalidatedIterator",
              "shortDescription": {
                "text": "InvalidatedIterator"
              },
              "fullDescription": {
                "text": "InvalidatedIterator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-2",
              "name": "clion-misra-cpp2008-2-13-2",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.InstanceVariableInvalidation",
              "name": "clang-analyzer-alpha.osx.cocoa.InstanceVariableInvalidation",
              "shortDescription": {
                "text": "InstanceVariableInvalidation"
              },
              "fullDescription": {
                "text": "InstanceVariableInvalidation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-statically-constructed-objects",
              "name": "fuchsia-statically-constructed-objects",
              "shortDescription": {
                "text": "statically-constructed-objects"
              },
              "fullDescription": {
                "text": "statically-constructed-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-realloc-usage",
              "name": "bugprone-suspicious-realloc-usage",
              "shortDescription": {
                "text": "suspicious-realloc-usage"
              },
              "fullDescription": {
                "text": "suspicious-realloc-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-move-const-arg",
              "name": "hicpp-move-const-arg",
              "shortDescription": {
                "text": "move-const-arg"
              },
              "fullDescription": {
                "text": "move-const-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.ObjCProperty",
              "name": "clang-analyzer-osx.ObjCProperty",
              "shortDescription": {
                "text": "ObjCProperty"
              },
              "fullDescription": {
                "text": "ObjCProperty"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-0-1",
              "name": "clion-misra-cpp2008-8-0-1",
              "shortDescription": {
                "text": "misra-cpp2008-8-0-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-0-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl16-c",
              "name": "cert-dcl16-c",
              "shortDescription": {
                "text": "dcl16-c"
              },
              "fullDescription": {
                "text": "dcl16-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.OSObjectRetainCount",
              "name": "clang-analyzer-osx.OSObjectRetainCount",
              "shortDescription": {
                "text": "OSObjectRetainCount"
              },
              "fullDescription": {
                "text": "OSObjectRetainCount"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.mpi.MPI-Checker",
              "name": "clang-analyzer-optin.mpi.MPI-Checker",
              "shortDescription": {
                "text": "MPI-Checker"
              },
              "fullDescription": {
                "text": "MPI-Checker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.mpi",
                    "index": 26,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-vector-operation",
              "name": "performance-inefficient-vector-operation",
              "shortDescription": {
                "text": "inefficient-vector-operation"
              },
              "fullDescription": {
                "text": "inefficient-vector-operation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-3-1",
              "name": "clion-misra-cpp2008-7-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-7-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-else-after-return",
              "name": "llvm-else-after-return",
              "shortDescription": {
                "text": "else-after-return"
              },
              "fullDescription": {
                "text": "else-after-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.StdCLibraryFunctions",
              "name": "clang-analyzer-unix.StdCLibraryFunctions",
              "shortDescription": {
                "text": "StdCLibraryFunctions"
              },
              "fullDescription": {
                "text": "StdCLibraryFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-inline-function-decl",
              "name": "llvmlibc-inline-function-decl",
              "shortDescription": {
                "text": "inline-function-decl"
              },
              "fullDescription": {
                "text": "inline-function-decl"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-uniqueptr-reset-release",
              "name": "misc-uniqueptr-reset-release",
              "shortDescription": {
                "text": "uniqueptr-reset-release"
              },
              "fullDescription": {
                "text": "uniqueptr-reset-release"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-4",
              "name": "clion-misra-cpp2008-6-4-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-8-1",
              "name": "clion-misra-cpp2008-5-8-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-8-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-8-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-socket",
              "name": "android-cloexec-socket",
              "shortDescription": {
                "text": "cloexec-socket"
              },
              "fullDescription": {
                "text": "cloexec-socket"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-deprecated-headers",
              "name": "modernize-deprecated-headers",
              "shortDescription": {
                "text": "deprecated-headers"
              },
              "fullDescription": {
                "text": "deprecated-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-bool-literals",
              "name": "modernize-use-bool-literals",
              "shortDescription": {
                "text": "use-bool-literals"
              },
              "fullDescription": {
                "text": "use-bool-literals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-misplaced-array-index",
              "name": "readability-misplaced-array-index",
              "shortDescription": {
                "text": "misplaced-array-index"
              },
              "fullDescription": {
                "text": "misplaced-array-index"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-9",
              "name": "clion-misra-c2012-21-9",
              "shortDescription": {
                "text": "misra-c2012-21-9"
              },
              "fullDescription": {
                "text": "misra-c2012-21-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-4-1",
              "name": "clion-misra-cpp2008-8-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-8-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-optional-value-conversion",
              "name": "bugprone-optional-value-conversion",
              "shortDescription": {
                "text": "optional-value-conversion"
              },
              "fullDescription": {
                "text": "optional-value-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-con36-c",
              "name": "cert-con36-c",
              "shortDescription": {
                "text": "con36-c"
              },
              "fullDescription": {
                "text": "con36-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFError",
              "name": "clang-analyzer-osx.coreFoundation.CFError",
              "shortDescription": {
                "text": "CFError"
              },
              "fullDescription": {
                "text": "CFError"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.Move",
              "name": "clang-analyzer-cplusplus.Move",
              "shortDescription": {
                "text": "Move"
              },
              "fullDescription": {
                "text": "Move"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.BadSizeArg",
              "name": "clang-analyzer-unix.cstring.BadSizeArg",
              "shortDescription": {
                "text": "BadSizeArg"
              },
              "fullDescription": {
                "text": "BadSizeArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-pipe",
              "name": "android-cloexec-pipe",
              "shortDescription": {
                "text": "cloexec-pipe"
              },
              "fullDescription": {
                "text": "cloexec-pipe"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-bool-pointer-implicit-conversion",
              "name": "bugprone-bool-pointer-implicit-conversion",
              "shortDescription": {
                "text": "bool-pointer-implicit-conversion"
              },
              "fullDescription": {
                "text": "bool-pointer-implicit-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-8",
              "name": "clion-misra-c2012-18-8",
              "shortDescription": {
                "text": "misra-c2012-18-8"
              },
              "fullDescription": {
                "text": "misra-c2012-18-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.llvm.CastValue",
              "name": "clang-analyzer-apiModeling.llvm.CastValue",
              "shortDescription": {
                "text": "CastValue"
              },
              "fullDescription": {
                "text": "CastValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "index": 32,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-id-dependent-backward-branch",
              "name": "altera-id-dependent-backward-branch",
              "shortDescription": {
                "text": "id-dependent-backward-branch"
              },
              "fullDescription": {
                "text": "id-dependent-backward-branch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-deprecated-ios-base-aliases",
              "name": "modernize-deprecated-ios-base-aliases",
              "shortDescription": {
                "text": "deprecated-ios-base-aliases"
              },
              "fullDescription": {
                "text": "deprecated-ios-base-aliases"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-5",
              "name": "clion-misra-c2012-18-5",
              "shortDescription": {
                "text": "misra-c2012-18-5"
              },
              "fullDescription": {
                "text": "misra-c2012-18-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-throw-keyword-missing",
              "name": "bugprone-throw-keyword-missing",
              "shortDescription": {
                "text": "throw-keyword-missing"
              },
              "fullDescription": {
                "text": "throw-keyword-missing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-using",
              "name": "modernize-use-using",
              "shortDescription": {
                "text": "use-using"
              },
              "fullDescription": {
                "text": "use-using"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-epoll-create1",
              "name": "android-cloexec-epoll-create1",
              "shortDescription": {
                "text": "cloexec-epoll-create1"
              },
              "fullDescription": {
                "text": "cloexec-epoll-create1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-avoid-bind",
              "name": "modernize-avoid-bind",
              "shortDescription": {
                "text": "avoid-bind"
              },
              "fullDescription": {
                "text": "avoid-bind"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-runtime-operator",
              "name": "google-runtime-operator",
              "shortDescription": {
                "text": "runtime-operator"
              },
              "fullDescription": {
                "text": "runtime-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-header-include-cycle",
              "name": "misc-header-include-cycle",
              "shortDescription": {
                "text": "header-include-cycle"
              },
              "fullDescription": {
                "text": "header-include-cycle"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-equals-default",
              "name": "hicpp-use-equals-default",
              "shortDescription": {
                "text": "use-equals-default"
              },
              "fullDescription": {
                "text": "use-equals-default"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.FixedAddr",
              "name": "clang-analyzer-alpha.core.FixedAddr",
              "shortDescription": {
                "text": "FixedAddr"
              },
              "fullDescription": {
                "text": "FixedAddr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-smartptr-get",
              "name": "readability-redundant-smartptr-get",
              "shortDescription": {
                "text": "redundant-smartptr-get"
              },
              "fullDescription": {
                "text": "redundant-smartptr-get"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err52-cpp",
              "name": "cert-err52-cpp",
              "shortDescription": {
                "text": "err52-cpp"
              },
              "fullDescription": {
                "text": "err52-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-12-8-2",
              "name": "clion-misra-cpp2008-12-8-2",
              "shortDescription": {
                "text": "misra-cpp2008-12-8-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-12-8-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-move-forwarding-reference",
              "name": "bugprone-move-forwarding-reference",
              "shortDescription": {
                "text": "move-forwarding-reference"
              },
              "fullDescription": {
                "text": "move-forwarding-reference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-braces-around-statements",
              "name": "google-readability-braces-around-statements",
              "shortDescription": {
                "text": "readability-braces-around-statements"
              },
              "fullDescription": {
                "text": "readability-braces-around-statements"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-string-cstr",
              "name": "readability-redundant-string-cstr",
              "shortDescription": {
                "text": "redundant-string-cstr"
              },
              "fullDescription": {
                "text": "redundant-string-cstr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-constructor",
              "name": "bugprone-string-constructor",
              "shortDescription": {
                "text": "string-constructor"
              },
              "fullDescription": {
                "text": "string-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-7",
              "name": "clion-misra-c2012-17-7",
              "shortDescription": {
                "text": "misra-c2012-17-7"
              },
              "fullDescription": {
                "text": "misra-c2012-17-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-struct-pack-align",
              "name": "altera-struct-pack-align",
              "shortDescription": {
                "text": "struct-pack-align"
              },
              "fullDescription": {
                "text": "struct-pack-align"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-5",
              "name": "clion-misra-cpp2008-5-0-5",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-explicit-constructor",
              "name": "google-explicit-constructor",
              "shortDescription": {
                "text": "explicit-constructor"
              },
              "fullDescription": {
                "text": "explicit-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-equals-delete",
              "name": "hicpp-use-equals-delete",
              "shortDescription": {
                "text": "use-equals-delete"
              },
              "fullDescription": {
                "text": "use-equals-delete"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-reserved-identifier",
              "name": "bugprone-reserved-identifier",
              "shortDescription": {
                "text": "reserved-identifier"
              },
              "fullDescription": {
                "text": "reserved-identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-signal-handler",
              "name": "bugprone-signal-handler",
              "shortDescription": {
                "text": "signal-handler"
              },
              "fullDescription": {
                "text": "signal-handler"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-pos44-c",
              "name": "cert-pos44-c",
              "shortDescription": {
                "text": "pos44-c"
              },
              "fullDescription": {
                "text": "pos44-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-sig30-c",
              "name": "cert-sig30-c",
              "shortDescription": {
                "text": "sig30-c"
              },
              "fullDescription": {
                "text": "sig30-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-misleading-capture-default-by-value",
              "name": "cppcoreguidelines-misleading-capture-default-by-value",
              "shortDescription": {
                "text": "misleading-capture-default-by-value"
              },
              "fullDescription": {
                "text": "misleading-capture-default-by-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-string-find-str-contains",
              "name": "abseil-string-find-str-contains",
              "shortDescription": {
                "text": "string-find-str-contains"
              },
              "fullDescription": {
                "text": "string-find-str-contains"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-avoid-goto",
              "name": "hicpp-avoid-goto",
              "shortDescription": {
                "text": "avoid-goto"
              },
              "fullDescription": {
                "text": "avoid-goto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-narrowing-conversions",
              "name": "cppcoreguidelines-narrowing-conversions",
              "shortDescription": {
                "text": "narrowing-conversions"
              },
              "fullDescription": {
                "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-2-1",
              "name": "clion-misra-cpp2008-6-2-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-2-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-2-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-1-3",
              "name": "clion-misra-cpp2008-3-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-3-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-override",
              "name": "hicpp-use-override",
              "shortDescription": {
                "text": "use-override"
              },
              "fullDescription": {
                "text": "use-override"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-swap",
              "name": "cppcoreguidelines-noexcept-swap",
              "shortDescription": {
                "text": "noexcept-swap"
              },
              "fullDescription": {
                "text": "noexcept-swap"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.ContainerModeling",
              "name": "clang-analyzer-alpha.cplusplus.ContainerModeling",
              "shortDescription": {
                "text": "ContainerModeling"
              },
              "fullDescription": {
                "text": "ContainerModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-fuchsia.HandleChecker",
              "name": "clang-analyzer-fuchsia.HandleChecker",
              "shortDescription": {
                "text": "HandleChecker"
              },
              "fullDescription": {
                "text": "HandleChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-3",
              "name": "clion-misra-c2012-7-3",
              "shortDescription": {
                "text": "misra-c2012-7-3"
              },
              "fullDescription": {
                "text": "misra-c2012-7-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-casting",
              "name": "readability-redundant-casting",
              "shortDescription": {
                "text": "redundant-casting"
              },
              "fullDescription": {
                "text": "redundant-casting"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-2",
              "name": "clion-misra-cpp2008-18-0-2",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-assert-side-effect",
              "name": "bugprone-assert-side-effect",
              "shortDescription": {
                "text": "assert-side-effect"
              },
              "fullDescription": {
                "text": "assert-side-effect"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-12",
              "name": "clion-misra-c2012-8-12",
              "shortDescription": {
                "text": "misra-c2012-8-12"
              },
              "fullDescription": {
                "text": "misra-c2012-8-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-implementation-in-namespace",
              "name": "llvmlibc-implementation-in-namespace",
              "shortDescription": {
                "text": "implementation-in-namespace"
              },
              "fullDescription": {
                "text": "implementation-in-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-alias-decls",
              "name": "misc-unused-alias-decls",
              "shortDescription": {
                "text": "unused-alias-decls"
              },
              "fullDescription": {
                "text": "unused-alias-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi-type-mismatch",
              "name": "mpi-type-mismatch",
              "shortDescription": {
                "text": "type-mismatch"
              },
              "fullDescription": {
                "text": "type-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "index": 34,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-upgrade-duration-conversions",
              "name": "abseil-upgrade-duration-conversions",
              "shortDescription": {
                "text": "upgrade-duration-conversions"
              },
              "fullDescription": {
                "text": "upgrade-duration-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-signed-char-misuse",
              "name": "bugprone-signed-char-misuse",
              "shortDescription": {
                "text": "signed-char-misuse"
              },
              "fullDescription": {
                "text": "signed-char-misuse"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-preprocessor",
              "name": "readability-redundant-preprocessor",
              "shortDescription": {
                "text": "redundant-preprocessor"
              },
              "fullDescription": {
                "text": "redundant-preprocessor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unsafe-functions",
              "name": "bugprone-unsafe-functions",
              "shortDescription": {
                "text": "unsafe-functions"
              },
              "fullDescription": {
                "text": "unsafe-functions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-use-default-member-init",
              "name": "cppcoreguidelines-use-default-member-init",
              "shortDescription": {
                "text": "use-default-member-init"
              },
              "fullDescription": {
                "text": "use-default-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-enum-initial-value",
              "name": "readability-enum-initial-value",
              "shortDescription": {
                "text": "enum-initial-value"
              },
              "fullDescription": {
                "text": "enum-initial-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-7",
              "name": "clion-misra-c2012-21-7",
              "shortDescription": {
                "text": "misra-c2012-21-7"
              },
              "fullDescription": {
                "text": "misra-c2012-21-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-comparison-in-temp-failure-retry",
              "name": "android-comparison-in-temp-failure-retry",
              "shortDescription": {
                "text": "comparison-in-temp-failure-retry"
              },
              "fullDescription": {
                "text": "comparison-in-temp-failure-retry"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-std-print",
              "name": "modernize-use-std-print",
              "shortDescription": {
                "text": "use-std-print"
              },
              "fullDescription": {
                "text": "use-std-print"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.NewArraySize",
              "name": "clang-analyzer-core.uninitialized.NewArraySize",
              "shortDescription": {
                "text": "NewArraySize"
              },
              "fullDescription": {
                "text": "NewArraySize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-accept4",
              "name": "android-cloexec-accept4",
              "shortDescription": {
                "text": "cloexec-accept4"
              },
              "fullDescription": {
                "text": "cloexec-accept4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-concat-nested-namespaces",
              "name": "modernize-concat-nested-namespaces",
              "shortDescription": {
                "text": "concat-nested-namespaces"
              },
              "fullDescription": {
                "text": "concat-nested-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-2",
              "name": "clion-misra-cpp2008-6-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-6-4",
              "name": "clion-misra-cpp2008-9-6-4",
              "shortDescription": {
                "text": "misra-cpp2008-9-6-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-6-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.builtin.NoReturnFunctions",
              "name": "clang-analyzer-core.builtin.NoReturnFunctions",
              "shortDescription": {
                "text": "NoReturnFunctions"
              },
              "fullDescription": {
                "text": "NoReturnFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "index": 36,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-override",
              "name": "modernize-use-override",
              "shortDescription": {
                "text": "use-override"
              },
              "fullDescription": {
                "text": "use-override"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-interfaces-global-init",
              "name": "cppcoreguidelines-interfaces-global-init",
              "shortDescription": {
                "text": "interfaces-global-init"
              },
              "fullDescription": {
                "text": "interfaces-global-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-identifier-naming",
              "name": "readability-identifier-naming",
              "shortDescription": {
                "text": "identifier-naming"
              },
              "fullDescription": {
                "text": "identifier-naming"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-too-small-loop-variable",
              "name": "bugprone-too-small-loop-variable",
              "shortDescription": {
                "text": "too-small-loop-variable"
              },
              "fullDescription": {
                "text": "too-small-loop-variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.PlacementNew",
              "name": "clang-analyzer-cplusplus.PlacementNew",
              "shortDescription": {
                "text": "PlacementNew"
              },
              "fullDescription": {
                "text": "PlacementNew"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-return-value",
              "name": "bugprone-unused-return-value",
              "shortDescription": {
                "text": "unused-return-value"
              },
              "fullDescription": {
                "text": "unused-return-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-2",
              "name": "clion-misra-cpp2008-5-2-2",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.UndefReturn",
              "name": "clang-analyzer-core.uninitialized.UndefReturn",
              "shortDescription": {
                "text": "UndefReturn"
              },
              "fullDescription": {
                "text": "UndefReturn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-epoll-create",
              "name": "android-cloexec-epoll-create",
              "shortDescription": {
                "text": "cloexec-epoll-create"
              },
              "fullDescription": {
                "text": "cloexec-epoll-create"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-signed-bitwise",
              "name": "hicpp-signed-bitwise",
              "shortDescription": {
                "text": "signed-bitwise"
              },
              "fullDescription": {
                "text": "signed-bitwise"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-single-work-item-barrier",
              "name": "altera-single-work-item-barrier",
              "shortDescription": {
                "text": "single-work-item-barrier"
              },
              "fullDescription": {
                "text": "single-work-item-barrier"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NullDereference",
              "name": "clang-analyzer-core.NullDereference",
              "shortDescription": {
                "text": "NullDereference"
              },
              "fullDescription": {
                "text": "NullDereference"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-inc-dec-in-conditions",
              "name": "bugprone-inc-dec-in-conditions",
              "shortDescription": {
                "text": "inc-dec-in-conditions"
              },
              "fullDescription": {
                "text": "inc-dec-in-conditions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.CopyToSelf",
              "name": "clang-analyzer-valist.CopyToSelf",
              "shortDescription": {
                "text": "CopyToSelf"
              },
              "fullDescription": {
                "text": "CopyToSelf"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.StackAddrEscapeBase",
              "name": "clang-analyzer-core.StackAddrEscapeBase",
              "shortDescription": {
                "text": "StackAddrEscapeBase"
              },
              "fullDescription": {
                "text": "StackAddrEscapeBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-1",
              "name": "clion-misra-c2012-13-1",
              "shortDescription": {
                "text": "misra-c2012-13-1"
              },
              "fullDescription": {
                "text": "misra-c2012-13-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-3-1",
              "name": "clion-misra-cpp2008-6-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.DivideZero",
              "name": "clang-analyzer-core.DivideZero",
              "shortDescription": {
                "text": "DivideZero"
              },
              "fullDescription": {
                "text": "DivideZero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-1",
              "name": "clion-misra-cpp2008-5-3-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-static-assert",
              "name": "misc-static-assert",
              "shortDescription": {
                "text": "static-assert"
              },
              "fullDescription": {
                "text": "static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl58-cpp",
              "name": "cert-dcl58-cpp",
              "shortDescription": {
                "text": "dcl58-cpp"
              },
              "fullDescription": {
                "text": "dcl58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-redundant-void-arg",
              "name": "modernize-redundant-void-arg",
              "shortDescription": {
                "text": "redundant-void-arg"
              },
              "fullDescription": {
                "text": "redundant-void-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-6-2",
              "name": "clion-misra-cpp2008-9-6-2",
              "shortDescription": {
                "text": "misra-cpp2008-9-6-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-factory-float",
              "name": "abseil-duration-factory-float",
              "shortDescription": {
                "text": "duration-factory-float"
              },
              "fullDescription": {
                "text": "duration-factory-float"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-nullptr",
              "name": "hicpp-use-nullptr",
              "shortDescription": {
                "text": "use-nullptr"
              },
              "fullDescription": {
                "text": "use-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-string-compare",
              "name": "readability-string-compare",
              "shortDescription": {
                "text": "string-compare"
              },
              "fullDescription": {
                "text": "string-compare"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-shared-ptr-array-mismatch",
              "name": "bugprone-shared-ptr-array-mismatch",
              "shortDescription": {
                "text": "shared-ptr-array-mismatch"
              },
              "fullDescription": {
                "text": "shared-ptr-array-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unique-ptr-array-mismatch",
              "name": "bugprone-unique-ptr-array-mismatch",
              "shortDescription": {
                "text": "unique-ptr-array-mismatch"
              },
              "fullDescription": {
                "text": "unique-ptr-array-mismatch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.UncountedLambdaCapturesChecker",
              "name": "clang-analyzer-webkit.UncountedLambdaCapturesChecker",
              "shortDescription": {
                "text": "UncountedLambdaCapturesChecker"
              },
              "fullDescription": {
                "text": "UncountedLambdaCapturesChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-non-copyable-objects",
              "name": "misc-non-copyable-objects",
              "shortDescription": {
                "text": "non-copyable-objects"
              },
              "fullDescription": {
                "text": "non-copyable-objects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-nsdate-formatter",
              "name": "objc-nsdate-formatter",
              "shortDescription": {
                "text": "nsdate-formatter"
              },
              "fullDescription": {
                "text": "nsdate-formatter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.CallAndMessageModeling",
              "name": "clang-analyzer-core.CallAndMessageModeling",
              "shortDescription": {
                "text": "CallAndMessageModeling"
              },
              "fullDescription": {
                "text": "CallAndMessageModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.API",
              "name": "clang-analyzer-osx.API",
              "shortDescription": {
                "text": "API"
              },
              "fullDescription": {
                "text": "API"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multiple-new-in-one-expression",
              "name": "bugprone-multiple-new-in-one-expression",
              "shortDescription": {
                "text": "multiple-new-in-one-expression"
              },
              "fullDescription": {
                "text": "multiple-new-in-one-expression"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-6",
              "name": "clion-misra-c2012-17-6",
              "shortDescription": {
                "text": "misra-c2012-17-6"
              },
              "fullDescription": {
                "text": "misra-c2012-17-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-preprocessor-comment-check",
              "name": "clion-preprocessor-comment-check",
              "shortDescription": {
                "text": "preprocessor-comment-check"
              },
              "fullDescription": {
                "text": "preprocessor-comment-check"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-non-private-member-variables-in-classes",
              "name": "misc-non-private-member-variables-in-classes",
              "shortDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "fullDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-dup",
              "name": "android-cloexec-dup",
              "shortDescription": {
                "text": "cloexec-dup"
              },
              "fullDescription": {
                "text": "cloexec-dup"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-unconditional-preprocessor-if",
              "name": "readability-avoid-unconditional-preprocessor-if",
              "shortDescription": {
                "text": "avoid-unconditional-preprocessor-if"
              },
              "fullDescription": {
                "text": "avoid-unconditional-preprocessor-if"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-move-constructor-init",
              "name": "performance-move-constructor-init",
              "shortDescription": {
                "text": "move-constructor-init"
              },
              "fullDescription": {
                "text": "move-constructor-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-cstyle-cast",
              "name": "cppcoreguidelines-pro-type-cstyle-cast",
              "shortDescription": {
                "text": "pro-type-cstyle-cast"
              },
              "fullDescription": {
                "text": "pro-type-cstyle-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-3",
              "name": "clion-misra-c2012-17-3",
              "shortDescription": {
                "text": "misra-c2012-17-3"
              },
              "fullDescription": {
                "text": "misra-c2012-17-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.MallocOverflow",
              "name": "clang-analyzer-alpha.security.MallocOverflow",
              "shortDescription": {
                "text": "MallocOverflow"
              },
              "fullDescription": {
                "text": "MallocOverflow"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-simplify",
              "name": "clion-simplify",
              "shortDescription": {
                "text": "simplify"
              },
              "fullDescription": {
                "text": "simplify"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-overloaded-operator",
              "name": "fuchsia-overloaded-operator",
              "shortDescription": {
                "text": "overloaded-operator"
              },
              "fullDescription": {
                "text": "overloaded-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-contains",
              "name": "readability-container-contains",
              "shortDescription": {
                "text": "container-contains"
              },
              "fullDescription": {
                "text": "container-contains"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-empty-catch",
              "name": "bugprone-empty-catch",
              "shortDescription": {
                "text": "empty-catch"
              },
              "fullDescription": {
                "text": "empty-catch"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-control-flow",
              "name": "readability-redundant-control-flow",
              "shortDescription": {
                "text": "redundant-control-flow"
              },
              "fullDescription": {
                "text": "redundant-control-flow"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-11",
              "name": "clion-misra-c2012-8-11",
              "shortDescription": {
                "text": "misra-c2012-8-11"
              },
              "fullDescription": {
                "text": "misra-c2012-8-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-static-definition-in-anonymous-namespace",
              "name": "readability-static-definition-in-anonymous-namespace",
              "shortDescription": {
                "text": "static-definition-in-anonymous-namespace"
              },
              "fullDescription": {
                "text": "static-definition-in-anonymous-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-braces-around-statements",
              "name": "readability-braces-around-statements",
              "shortDescription": {
                "text": "braces-around-statements"
              },
              "fullDescription": {
                "text": "statement should be inside braces"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-undefined-memory-manipulation",
              "name": "bugprone-undefined-memory-manipulation",
              "shortDescription": {
                "text": "undefined-memory-manipulation"
              },
              "fullDescription": {
                "text": "undefined-memory-manipulation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-infinite-loop",
              "name": "bugprone-infinite-loop",
              "shortDescription": {
                "text": "infinite-loop"
              },
              "fullDescription": {
                "text": "infinite-loop"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-10-3-2",
              "name": "clion-misra-cpp2008-10-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-10-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-10-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-memfd-create",
              "name": "android-cloexec-memfd-create",
              "shortDescription": {
                "text": "cloexec-memfd-create"
              },
              "fullDescription": {
                "text": "cloexec-memfd-create"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-literal-with-embedded-nul",
              "name": "bugprone-string-literal-with-embedded-nul",
              "shortDescription": {
                "text": "string-literal-with-embedded-nul"
              },
              "fullDescription": {
                "text": "string-literal-with-embedded-nul"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.llvm.Conventions",
              "name": "clang-analyzer-alpha.llvm.Conventions",
              "shortDescription": {
                "text": "Conventions"
              },
              "fullDescription": {
                "text": "Conventions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.llvm",
                    "index": 41,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-avoid-underscore-in-googletest-name",
              "name": "google-readability-avoid-underscore-in-googletest-name",
              "shortDescription": {
                "text": "readability-avoid-underscore-in-googletest-name"
              },
              "fullDescription": {
                "text": "readability-avoid-underscore-in-googletest-name"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RetainCountBase",
              "name": "clang-analyzer-osx.cocoa.RetainCountBase",
              "shortDescription": {
                "text": "RetainCountBase"
              },
              "fullDescription": {
                "text": "RetainCountBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-9",
              "name": "clion-misra-c2012-11-9",
              "shortDescription": {
                "text": "misra-c2012-11-9"
              },
              "fullDescription": {
                "text": "misra-c2012-11-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.SmartPtrModeling",
              "name": "clang-analyzer-cplusplus.SmartPtrModeling",
              "shortDescription": {
                "text": "SmartPtrModeling"
              },
              "fullDescription": {
                "text": "SmartPtrModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-non-zero-enum-to-bool-conversion",
              "name": "bugprone-non-zero-enum-to-bool-conversion",
              "shortDescription": {
                "text": "non-zero-enum-to-bool-conversion"
              },
              "fullDescription": {
                "text": "non-zero-enum-to-bool-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ArrayBoundV2",
              "name": "clang-analyzer-alpha.security.ArrayBoundV2",
              "shortDescription": {
                "text": "ArrayBoundV2"
              },
              "fullDescription": {
                "text": "ArrayBoundV2"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullableReturnedFromNonnull",
              "name": "clang-analyzer-nullability.NullableReturnedFromNonnull",
              "shortDescription": {
                "text": "NullableReturnedFromNonnull"
              },
              "fullDescription": {
                "text": "NullableReturnedFromNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-2",
              "name": "clion-misra-c2012-8-2",
              "shortDescription": {
                "text": "misra-c2012-8-2"
              },
              "fullDescription": {
                "text": "misra-c2012-8-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-con54-cpp",
              "name": "cert-con54-cpp",
              "shortDescription": {
                "text": "con54-cpp"
              },
              "fullDescription": {
                "text": "con54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-vararg",
              "name": "cppcoreguidelines-pro-type-vararg",
              "shortDescription": {
                "text": "pro-type-vararg"
              },
              "fullDescription": {
                "text": "pro-type-vararg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-4",
              "name": "clion-misra-cpp2008-5-0-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-2",
              "name": "clion-misra-c2012-11-2",
              "shortDescription": {
                "text": "misra-c2012-11-2"
              },
              "fullDescription": {
                "text": "misra-c2012-11-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-spuriously-wake-up-functions",
              "name": "bugprone-spuriously-wake-up-functions",
              "shortDescription": {
                "text": "spuriously-wake-up-functions"
              },
              "fullDescription": {
                "text": "spuriously-wake-up-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-5-1",
              "name": "clion-misra-cpp2008-15-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-15-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-type-promotion-in-math-fn",
              "name": "performance-type-promotion-in-math-fn",
              "shortDescription": {
                "text": "type-promotion-in-math-fn"
              },
              "fullDescription": {
                "text": "type-promotion-in-math-fn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-identifier-length",
              "name": "readability-identifier-length",
              "shortDescription": {
                "text": "identifier-length"
              },
              "fullDescription": {
                "text": "identifier-length"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.CapturedBlockVariable",
              "name": "clang-analyzer-core.uninitialized.CapturedBlockVariable",
              "shortDescription": {
                "text": "CapturedBlockVariable"
              },
              "fullDescription": {
                "text": "CapturedBlockVariable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-union-access",
              "name": "cppcoreguidelines-pro-type-union-access",
              "shortDescription": {
                "text": "pro-type-union-access"
              },
              "fullDescription": {
                "text": "pro-type-union-access"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-default-arguments-calls",
              "name": "fuchsia-default-arguments-calls",
              "shortDescription": {
                "text": "default-arguments-calls"
              },
              "fullDescription": {
                "text": "default-arguments-calls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.DynamicTypePropagation",
              "name": "clang-analyzer-core.DynamicTypePropagation",
              "shortDescription": {
                "text": "DynamicTypePropagation"
              },
              "fullDescription": {
                "text": "DynamicTypePropagation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-runtime-int",
              "name": "google-runtime-int",
              "shortDescription": {
                "text": "runtime-int"
              },
              "fullDescription": {
                "text": "runtime-int"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency-thread-canceltype-asynchronous",
              "name": "concurrency-thread-canceltype-asynchronous",
              "shortDescription": {
                "text": "thread-canceltype-asynchronous"
              },
              "fullDescription": {
                "text": "thread-canceltype-asynchronous"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "index": 43,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.API",
              "name": "clang-analyzer-unix.API",
              "shortDescription": {
                "text": "API"
              },
              "fullDescription": {
                "text": "API"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.StringChecker",
              "name": "clang-analyzer-cplusplus.StringChecker",
              "shortDescription": {
                "text": "StringChecker"
              },
              "fullDescription": {
                "text": "StringChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-noexcept-destructor",
              "name": "cppcoreguidelines-noexcept-destructor",
              "shortDescription": {
                "text": "noexcept-destructor"
              },
              "fullDescription": {
                "text": "noexcept-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-8",
              "name": "clion-misra-c2012-11-8",
              "shortDescription": {
                "text": "misra-c2012-11-8"
              },
              "fullDescription": {
                "text": "misra-c2012-11-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-0-2",
              "name": "clion-misra-cpp2008-15-0-2",
              "shortDescription": {
                "text": "misra-cpp2008-15-0-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-0-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin-dispatch-once-nonstatic",
              "name": "darwin-dispatch-once-nonstatic",
              "shortDescription": {
                "text": "dispatch-once-nonstatic"
              },
              "fullDescription": {
                "text": "dispatch-once-nonstatic"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "index": 44,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-exception-escape",
              "name": "bugprone-exception-escape",
              "shortDescription": {
                "text": "exception-escape"
              },
              "fullDescription": {
                "text": "exception-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-cleanup-ctad",
              "name": "abseil-cleanup-ctad",
              "shortDescription": {
                "text": "cleanup-ctad"
              },
              "fullDescription": {
                "text": "cleanup-ctad"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.VariadicMethodTypes",
              "name": "clang-analyzer-osx.cocoa.VariadicMethodTypes",
              "shortDescription": {
                "text": "VariadicMethodTypes"
              },
              "fullDescription": {
                "text": "VariadicMethodTypes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-deadcode.DeadStores",
              "name": "clang-analyzer-deadcode.DeadStores",
              "shortDescription": {
                "text": "DeadStores"
              },
              "fullDescription": {
                "text": "DeadStores"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "deadcode",
                    "index": 45,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl50-cpp",
              "name": "cert-dcl50-cpp",
              "shortDescription": {
                "text": "dcl50-cpp"
              },
              "fullDescription": {
                "text": "dcl50-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-5",
              "name": "clion-misra-cpp2008-5-2-5",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-5",
              "name": "clion-misra-c2012-17-5",
              "shortDescription": {
                "text": "misra-c2012-17-5"
              },
              "fullDescription": {
                "text": "misra-c2012-17-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-using-decls",
              "name": "misc-unused-using-decls",
              "shortDescription": {
                "text": "unused-using-decls"
              },
              "fullDescription": {
                "text": "unused-using-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-goto",
              "name": "cppcoreguidelines-avoid-goto",
              "shortDescription": {
                "text": "avoid-goto"
              },
              "fullDescription": {
                "text": "avoid-goto"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-missing-std-forward",
              "name": "cppcoreguidelines-missing-std-forward",
              "shortDescription": {
                "text": "missing-std-forward"
              },
              "fullDescription": {
                "text": "missing-std-forward"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-fio38-c",
              "name": "cert-fio38-c",
              "shortDescription": {
                "text": "fio38-c"
              },
              "fullDescription": {
                "text": "fio38-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NonNilReturnValue",
              "name": "clang-analyzer-osx.cocoa.NonNilReturnValue",
              "shortDescription": {
                "text": "NonNilReturnValue"
              },
              "fullDescription": {
                "text": "NonNilReturnValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-nodiscard",
              "name": "modernize-use-nodiscard",
              "shortDescription": {
                "text": "use-nodiscard"
              },
              "fullDescription": {
                "text": "use-nodiscard"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-misleading-indentation",
              "name": "readability-misleading-indentation",
              "shortDescription": {
                "text": "misleading-indentation"
              },
              "fullDescription": {
                "text": "misleading-indentation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.webkit.UncountedCallArgsChecker",
              "name": "clang-analyzer-alpha.webkit.UncountedCallArgsChecker",
              "shortDescription": {
                "text": "UncountedCallArgsChecker"
              },
              "fullDescription": {
                "text": "UncountedCallArgsChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "index": 46,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-str34-c",
              "name": "cert-str34-c",
              "shortDescription": {
                "text": "str34-c"
              },
              "fullDescription": {
                "text": "str34-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.MissingSuperCall",
              "name": "clang-analyzer-osx.cocoa.MissingSuperCall",
              "shortDescription": {
                "text": "MissingSuperCall"
              },
              "fullDescription": {
                "text": "MissingSuperCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-dangling-handle",
              "name": "bugprone-dangling-handle",
              "shortDescription": {
                "text": "dangling-handle"
              },
              "fullDescription": {
                "text": "dangling-handle"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-1",
              "name": "clion-misra-cpp2008-6-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.performance.GCDAntipattern",
              "name": "clang-analyzer-optin.performance.GCDAntipattern",
              "shortDescription": {
                "text": "GCDAntipattern"
              },
              "fullDescription": {
                "text": "GCDAntipattern"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "index": 47,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-12-1-3",
              "name": "clion-misra-cpp2008-12-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-12-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-12-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-prefer-member-initializer",
              "name": "cppcoreguidelines-prefer-member-initializer",
              "shortDescription": {
                "text": "prefer-member-initializer"
              },
              "fullDescription": {
                "text": "prefer-member-initializer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-namespaces",
              "name": "google-build-namespaces",
              "shortDescription": {
                "text": "build-namespaces"
              },
              "fullDescription": {
                "text": "build-namespaces"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-static-cast-downcast",
              "name": "cppcoreguidelines-pro-type-static-cast-downcast",
              "shortDescription": {
                "text": "pro-type-static-cast-downcast"
              },
              "fullDescription": {
                "text": "pro-type-static-cast-downcast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-4-1",
              "name": "clion-misra-cpp2008-18-4-1",
              "shortDescription": {
                "text": "misra-cpp2008-18-4-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-4-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-noexcept",
              "name": "hicpp-use-noexcept",
              "shortDescription": {
                "text": "use-noexcept"
              },
              "fullDescription": {
                "text": "use-noexcept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.SecKeychainAPI",
              "name": "clang-analyzer-osx.SecKeychainAPI",
              "shortDescription": {
                "text": "SecKeychainAPI"
              },
              "fullDescription": {
                "text": "SecKeychainAPI"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NSAutoreleasePool",
              "name": "clang-analyzer-osx.cocoa.NSAutoreleasePool",
              "shortDescription": {
                "text": "NSAutoreleasePool"
              },
              "fullDescription": {
                "text": "NSAutoreleasePool"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-3",
              "name": "clion-misra-c2012-21-3",
              "shortDescription": {
                "text": "misra-c2012-21-3"
              },
              "fullDescription": {
                "text": "misra-c2012-21-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-memory-comparison",
              "name": "bugprone-suspicious-memory-comparison",
              "shortDescription": {
                "text": "suspicious-memory-comparison"
              },
              "fullDescription": {
                "text": "suspicious-memory-comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.Uninitialized",
              "name": "clang-analyzer-valist.Uninitialized",
              "shortDescription": {
                "text": "Uninitialized"
              },
              "fullDescription": {
                "text": "Uninitialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-nullptr",
              "name": "modernize-use-nullptr",
              "shortDescription": {
                "text": "use-nullptr"
              },
              "fullDescription": {
                "text": "use-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-owning-memory",
              "name": "cppcoreguidelines-owning-memory",
              "shortDescription": {
                "text": "owning-memory"
              },
              "fullDescription": {
                "text": "owning-memory"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-4-4",
              "name": "clion-misra-cpp2008-8-4-4",
              "shortDescription": {
                "text": "misra-cpp2008-8-4-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-4-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-6",
              "name": "clion-misra-c2012-15-6",
              "shortDescription": {
                "text": "misra-c2012-15-6"
              },
              "fullDescription": {
                "text": "misra-c2012-15-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.CStringModeling",
              "name": "clang-analyzer-unix.cstring.CStringModeling",
              "shortDescription": {
                "text": "CStringModeling"
              },
              "fullDescription": {
                "text": "CStringModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-shrink-to-fit",
              "name": "modernize-shrink-to-fit",
              "shortDescription": {
                "text": "shrink-to-fit"
              },
              "fullDescription": {
                "text": "shrink-to-fit"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-unnecessary-value-param",
              "name": "performance-unnecessary-value-param",
              "shortDescription": {
                "text": "unnecessary-value-param"
              },
              "fullDescription": {
                "text": "unnecessary-value-param"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-12",
              "name": "clion-misra-cpp2008-5-0-12",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-12"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-static-assert",
              "name": "hicpp-static-assert",
              "shortDescription": {
                "text": "static-assert"
              },
              "fullDescription": {
                "text": "static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-emplace",
              "name": "modernize-use-emplace",
              "shortDescription": {
                "text": "use-emplace"
              },
              "fullDescription": {
                "text": "use-emplace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-avoid-throwing-exception",
              "name": "google-objc-avoid-throwing-exception",
              "shortDescription": {
                "text": "objc-avoid-throwing-exception"
              },
              "fullDescription": {
                "text": "objc-avoid-throwing-exception"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-const-correctness",
              "name": "misc-const-correctness",
              "shortDescription": {
                "text": "const-correctness"
              },
              "fullDescription": {
                "text": "const-correctness"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullableDereferenced",
              "name": "clang-analyzer-nullability.NullableDereferenced",
              "shortDescription": {
                "text": "NullableDereferenced"
              },
              "fullDescription": {
                "text": "NullableDereferenced"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-forbidden-subclassing",
              "name": "objc-forbidden-subclassing",
              "shortDescription": {
                "text": "forbidden-subclassing"
              },
              "fullDescription": {
                "text": "forbidden-subclassing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-swapped-arguments",
              "name": "bugprone-swapped-arguments",
              "shortDescription": {
                "text": "swapped-arguments"
              },
              "fullDescription": {
                "text": "swapped-arguments"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-nsinvocation-argument-lifetime",
              "name": "objc-nsinvocation-argument-lifetime",
              "shortDescription": {
                "text": "nsinvocation-argument-lifetime"
              },
              "fullDescription": {
                "text": "nsinvocation-argument-lifetime"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-include-order",
              "name": "llvm-include-order",
              "shortDescription": {
                "text": "include-order"
              },
              "fullDescription": {
                "text": "include-order"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-compare-pointer-to-member-virtual-function",
              "name": "bugprone-compare-pointer-to-member-virtual-function",
              "shortDescription": {
                "text": "compare-pointer-to-member-virtual-function"
              },
              "fullDescription": {
                "text": "compare-pointer-to-member-virtual-function"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.core.EnumCastOutOfRange",
              "name": "clang-analyzer-optin.core.EnumCastOutOfRange",
              "shortDescription": {
                "text": "EnumCastOutOfRange"
              },
              "fullDescription": {
                "text": "EnumCastOutOfRange"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.core",
                    "index": 48,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.ArraySubscript",
              "name": "clang-analyzer-core.uninitialized.ArraySubscript",
              "shortDescription": {
                "text": "ArraySubscript"
              },
              "fullDescription": {
                "text": "ArraySubscript"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-std-allocator-const",
              "name": "portability-std-allocator-const",
              "shortDescription": {
                "text": "std-allocator-const"
              },
              "fullDescription": {
                "text": "std-allocator-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.AutoreleaseWrite",
              "name": "clang-analyzer-osx.cocoa.AutoreleaseWrite",
              "shortDescription": {
                "text": "AutoreleaseWrite"
              },
              "fullDescription": {
                "text": "AutoreleaseWrite"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-inotify-init",
              "name": "android-cloexec-inotify-init",
              "shortDescription": {
                "text": "cloexec-inotify-init"
              },
              "fullDescription": {
                "text": "cloexec-inotify-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-malloc",
              "name": "hicpp-no-malloc",
              "shortDescription": {
                "text": "no-malloc"
              },
              "fullDescription": {
                "text": "no-malloc"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-assembler",
              "name": "hicpp-no-assembler",
              "shortDescription": {
                "text": "no-assembler"
              },
              "fullDescription": {
                "text": "no-assembler"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-data-pointer",
              "name": "readability-container-data-pointer",
              "shortDescription": {
                "text": "container-data-pointer"
              },
              "fullDescription": {
                "text": "container-data-pointer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-4-12",
              "name": "clion-misra-c2012-4-12",
              "shortDescription": {
                "text": "misra-c2012-4-12"
              },
              "fullDescription": {
                "text": "misra-c2012-4-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-move-const-arg",
              "name": "performance-move-const-arg",
              "shortDescription": {
                "text": "move-const-arg"
              },
              "fullDescription": {
                "text": "move-const-arg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.webkit.UncountedLocalVarsChecker",
              "name": "clang-analyzer-alpha.webkit.UncountedLocalVarsChecker",
              "shortDescription": {
                "text": "UncountedLocalVarsChecker"
              },
              "fullDescription": {
                "text": "UncountedLocalVarsChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "index": 46,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-implicit-conversion-in-loop",
              "name": "performance-implicit-conversion-in-loop",
              "shortDescription": {
                "text": "implicit-conversion-in-loop"
              },
              "fullDescription": {
                "text": "implicit-conversion-in-loop"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-string-integer-assignment",
              "name": "bugprone-string-integer-assignment",
              "shortDescription": {
                "text": "string-integer-assignment"
              },
              "fullDescription": {
                "text": "string-integer-assignment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-5",
              "name": "clion-misra-c2012-10-5",
              "shortDescription": {
                "text": "misra-c2012-10-5"
              },
              "fullDescription": {
                "text": "misra-c2012-10-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-copy-constructor-init",
              "name": "bugprone-copy-constructor-init",
              "shortDescription": {
                "text": "copy-constructor-init"
              },
              "fullDescription": {
                "text": "copy-constructor-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.FloatLoopCounter",
              "name": "clang-analyzer-security.FloatLoopCounter",
              "shortDescription": {
                "text": "FloatLoopCounter"
              },
              "fullDescription": {
                "text": "FloatLoopCounter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security",
                    "index": 50,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
              "name": "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
              "shortDescription": {
                "text": "IncompatibleMethodTypes"
              },
              "fullDescription": {
                "text": "IncompatibleMethodTypes"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-4",
              "name": "clion-misra-cpp2008-6-6-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-easily-swappable-parameters",
              "name": "bugprone-easily-swappable-parameters",
              "shortDescription": {
                "text": "easily-swappable-parameters"
              },
              "fullDescription": {
                "text": "easily-swappable-parameters"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-prefer-isa-or-dyn-cast-in-conditionals",
              "name": "llvm-prefer-isa-or-dyn-cast-in-conditionals",
              "shortDescription": {
                "text": "prefer-isa-or-dyn-cast-in-conditionals"
              },
              "fullDescription": {
                "text": "prefer-isa-or-dyn-cast-in-conditionals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-integer-division",
              "name": "bugprone-integer-division",
              "shortDescription": {
                "text": "integer-division"
              },
              "fullDescription": {
                "text": "integer-division"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.Assign",
              "name": "clang-analyzer-core.uninitialized.Assign",
              "shortDescription": {
                "text": "Assign"
              },
              "fullDescription": {
                "text": "Assign"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-constraints",
              "name": "modernize-use-constraints",
              "shortDescription": {
                "text": "use-constraints"
              },
              "fullDescription": {
                "text": "use-constraints"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-time-subtraction",
              "name": "abseil-time-subtraction",
              "shortDescription": {
                "text": "time-subtraction"
              },
              "fullDescription": {
                "text": "time-subtraction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-enum-usage",
              "name": "bugprone-suspicious-enum-usage",
              "shortDescription": {
                "text": "suspicious-enum-usage"
              },
              "fullDescription": {
                "text": "suspicious-enum-usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-string-init",
              "name": "readability-redundant-string-init",
              "shortDescription": {
                "text": "redundant-string-init"
              },
              "fullDescription": {
                "text": "redundant-string-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-3",
              "name": "clion-misra-c2012-13-3",
              "shortDescription": {
                "text": "misra-c2012-13-3"
              },
              "fullDescription": {
                "text": "misra-c2012-13-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unchecked-optional-access",
              "name": "bugprone-unchecked-optional-access",
              "shortDescription": {
                "text": "unchecked-optional-access"
              },
              "fullDescription": {
                "text": "unchecked-optional-access"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-isolate-declaration",
              "name": "readability-isolate-declaration",
              "shortDescription": {
                "text": "isolate-declaration"
              },
              "fullDescription": {
                "text": "isolate-declaration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.TestAfterDivZero",
              "name": "clang-analyzer-alpha.core.TestAfterDivZero",
              "shortDescription": {
                "text": "TestAfterDivZero"
              },
              "fullDescription": {
                "text": "TestAfterDivZero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-conversion-cast",
              "name": "abseil-duration-conversion-cast",
              "shortDescription": {
                "text": "duration-conversion-cast"
              },
              "fullDescription": {
                "text": "duration-conversion-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-5",
              "name": "clion-misra-c2012-16-5",
              "shortDescription": {
                "text": "misra-c2012-16-5"
              },
              "fullDescription": {
                "text": "misra-c2012-16-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-local-non-trivial-variable",
              "name": "bugprone-unused-local-non-trivial-variable",
              "shortDescription": {
                "text": "unused-local-non-trivial-variable"
              },
              "fullDescription": {
                "text": "unused-local-non-trivial-variable"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.google.GTest",
              "name": "clang-analyzer-apiModeling.google.GTest",
              "shortDescription": {
                "text": "GTest"
              },
              "fullDescription": {
                "text": "GTest"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.google",
                    "index": 51,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-const-cast",
              "name": "cppcoreguidelines-pro-type-const-cast",
              "shortDescription": {
                "text": "pro-type-const-cast"
              },
              "fullDescription": {
                "text": "pro-type-const-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.StackAddressAsyncEscape",
              "name": "clang-analyzer-alpha.core.StackAddressAsyncEscape",
              "shortDescription": {
                "text": "StackAddressAsyncEscape"
              },
              "fullDescription": {
                "text": "StackAddressAsyncEscape"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unconventional-assign-operator",
              "name": "misc-unconventional-assign-operator",
              "shortDescription": {
                "text": "unconventional-assign-operator"
              },
              "fullDescription": {
                "text": "unconventional-assign-operator"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-no-escape",
              "name": "bugprone-no-escape",
              "shortDescription": {
                "text": "no-escape"
              },
              "fullDescription": {
                "text": "no-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-const-or-ref-data-members",
              "name": "cppcoreguidelines-avoid-const-or-ref-data-members",
              "shortDescription": {
                "text": "avoid-const-or-ref-data-members"
              },
              "fullDescription": {
                "text": "avoid-const-or-ref-data-members"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-enum-size",
              "name": "performance-enum-size",
              "shortDescription": {
                "text": "enum-size"
              },
              "fullDescription": {
                "text": "enum-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-convert-member-functions-to-static",
              "name": "readability-convert-member-functions-to-static",
              "shortDescription": {
                "text": "convert-member-functions-to-static"
              },
              "fullDescription": {
                "text": "convert-member-functions-to-static"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-function-ptr-dereference",
              "name": "readability-redundant-function-ptr-dereference",
              "shortDescription": {
                "text": "redundant-function-ptr-dereference"
              },
              "fullDescription": {
                "text": "redundant-function-ptr-dereference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.cert.env.InvalidPtr",
              "name": "clang-analyzer-security.cert.env.InvalidPtr",
              "shortDescription": {
                "text": "InvalidPtr"
              },
              "fullDescription": {
                "text": "InvalidPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.cert.env",
                    "index": 52,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-2",
              "name": "clion-misra-cpp2008-6-4-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-posix-return",
              "name": "bugprone-posix-return",
              "shortDescription": {
                "text": "posix-return"
              },
              "fullDescription": {
                "text": "posix-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-ignored-remove-result",
              "name": "hicpp-ignored-remove-result",
              "shortDescription": {
                "text": "ignored-remove-result"
              },
              "fullDescription": {
                "text": "ignored-remove-result"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-7",
              "name": "clion-misra-c2012-15-7",
              "shortDescription": {
                "text": "misra-c2012-15-7"
              },
              "fullDescription": {
                "text": "misra-c2012-15-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.NumberObjectConversion",
              "name": "clang-analyzer-osx.NumberObjectConversion",
              "shortDescription": {
                "text": "NumberObjectConversion"
              },
              "fullDescription": {
                "text": "NumberObjectConversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFRetainRelease",
              "name": "clang-analyzer-osx.coreFoundation.CFRetainRelease",
              "shortDescription": {
                "text": "CFRetainRelease"
              },
              "fullDescription": {
                "text": "CFRetainRelease"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-member-init",
              "name": "cppcoreguidelines-pro-type-member-init",
              "shortDescription": {
                "text": "pro-type-member-init"
              },
              "fullDescription": {
                "text": "pro-type-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-designated-initializers",
              "name": "modernize-use-designated-initializers",
              "shortDescription": {
                "text": "use-designated-initializers"
              },
              "fullDescription": {
                "text": "use-designated-initializers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-time-comparison",
              "name": "abseil-time-comparison",
              "shortDescription": {
                "text": "time-comparison"
              },
              "fullDescription": {
                "text": "time-comparison"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-mem57-cpp",
              "name": "cert-mem57-cpp",
              "shortDescription": {
                "text": "mem57-cpp"
              },
              "fullDescription": {
                "text": "mem57-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-10-1-1",
              "name": "clion-misra-cpp2008-10-1-1",
              "shortDescription": {
                "text": "misra-cpp2008-10-1-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-10-1-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-7",
              "name": "clion-misra-cpp2008-6-4-7",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-7"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-explicit-conversions",
              "name": "hicpp-explicit-conversions",
              "shortDescription": {
                "text": "explicit-conversions"
              },
              "fullDescription": {
                "text": "explicit-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-implicit-widening-of-multiplication-result",
              "name": "bugprone-implicit-widening-of-multiplication-result",
              "shortDescription": {
                "text": "implicit-widening-of-multiplication-result"
              },
              "fullDescription": {
                "text": "implicit-widening-of-multiplication-result"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-unary-static-assert",
              "name": "modernize-unary-static-assert",
              "shortDescription": {
                "text": "unary-static-assert"
              },
              "fullDescription": {
                "text": "unary-static-assert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.clone.CloneChecker",
              "name": "clang-analyzer-alpha.clone.CloneChecker",
              "shortDescription": {
                "text": "CloneChecker"
              },
              "fullDescription": {
                "text": "CloneChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.clone",
                    "index": 53,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-14-5-2",
              "name": "clion-misra-cpp2008-14-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-14-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-14-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-faster-strsplit-delimiter",
              "name": "abseil-faster-strsplit-delimiter",
              "shortDescription": {
                "text": "faster-strsplit-delimiter"
              },
              "fullDescription": {
                "text": "faster-strsplit-delimiter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.nondeterminism.PointerIteration",
              "name": "clang-analyzer-alpha.nondeterminism.PointerIteration",
              "shortDescription": {
                "text": "PointerIteration"
              },
              "fullDescription": {
                "text": "PointerIteration"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "index": 54,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-for-range-copy",
              "name": "performance-for-range-copy",
              "shortDescription": {
                "text": "for-range-copy"
              },
              "fullDescription": {
                "text": "for-range-copy"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-equals-delete",
              "name": "modernize-use-equals-delete",
              "shortDescription": {
                "text": "use-equals-delete"
              },
              "fullDescription": {
                "text": "use-equals-delete"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-move-constructor",
              "name": "performance-noexcept-move-constructor",
              "shortDescription": {
                "text": "noexcept-move-constructor"
              },
              "fullDescription": {
                "text": "noexcept-move-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl51-cpp",
              "name": "cert-dcl51-cpp",
              "shortDescription": {
                "text": "dcl51-cpp"
              },
              "fullDescription": {
                "text": "dcl51-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-std-numbers",
              "name": "modernize-use-std-numbers",
              "shortDescription": {
                "text": "use-std-numbers"
              },
              "fullDescription": {
                "text": "use-std-numbers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi-buffer-deref",
              "name": "mpi-buffer-deref",
              "shortDescription": {
                "text": "buffer-deref"
              },
              "fullDescription": {
                "text": "buffer-deref"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "index": 34,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-delete-null-pointer",
              "name": "readability-delete-null-pointer",
              "shortDescription": {
                "text": "delete-null-pointer"
              },
              "fullDescription": {
                "text": "delete-null-pointer"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-simplify-subscript-expr",
              "name": "readability-simplify-subscript-expr",
              "shortDescription": {
                "text": "simplify-subscript-expr"
              },
              "fullDescription": {
                "text": "simplify-subscript-expr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-named-parameter",
              "name": "readability-named-parameter",
              "shortDescription": {
                "text": "named-parameter"
              },
              "fullDescription": {
                "text": "named-parameter"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.SelfAssignment",
              "name": "clang-analyzer-cplusplus.SelfAssignment",
              "shortDescription": {
                "text": "SelfAssignment"
              },
              "fullDescription": {
                "text": "SelfAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-string-compare",
              "name": "bugprone-suspicious-string-compare",
              "shortDescription": {
                "text": "suspicious-string-compare"
              },
              "fullDescription": {
                "text": "suspicious-string-compare"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
              "name": "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
              "shortDescription": {
                "text": "EmptyLocalizationContextChecker"
              },
              "fullDescription": {
                "text": "EmptyLocalizationContextChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "index": 55,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err33-c",
              "name": "cert-err33-c",
              "shortDescription": {
                "text": "err33-c"
              },
              "fullDescription": {
                "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-reference-to-constructed-temporary",
              "name": "readability-reference-to-constructed-temporary",
              "shortDescription": {
                "text": "reference-to-constructed-temporary"
              },
              "fullDescription": {
                "text": "reference-to-constructed-temporary"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-factory-scale",
              "name": "abseil-duration-factory-scale",
              "shortDescription": {
                "text": "duration-factory-scale"
              },
              "fullDescription": {
                "text": "duration-factory-scale"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bcmp",
              "name": "clang-analyzer-security.insecureAPI.bcmp",
              "shortDescription": {
                "text": "bcmp"
              },
              "fullDescription": {
                "text": "bcmp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-3",
              "name": "clion-misra-c2012-16-3",
              "shortDescription": {
                "text": "misra-c2012-16-3"
              },
              "fullDescription": {
                "text": "misra-c2012-16-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-widening-cast",
              "name": "bugprone-misplaced-widening-cast",
              "shortDescription": {
                "text": "misplaced-widening-cast"
              },
              "fullDescription": {
                "text": "misplaced-widening-cast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-dynamic-static-initializers",
              "name": "bugprone-dynamic-static-initializers",
              "shortDescription": {
                "text": "dynamic-static-initializers"
              },
              "fullDescription": {
                "text": "dynamic-static-initializers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-17-8",
              "name": "clion-misra-c2012-17-8",
              "shortDescription": {
                "text": "misra-c2012-17-8"
              },
              "fullDescription": {
                "text": "misra-c2012-17-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-kernel-name-restriction",
              "name": "altera-kernel-name-restriction",
              "shortDescription": {
                "text": "kernel-name-restriction"
              },
              "fullDescription": {
                "text": "kernel-name-restriction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.MallocSizeof",
              "name": "clang-analyzer-unix.MallocSizeof",
              "shortDescription": {
                "text": "MallocSizeof"
              },
              "fullDescription": {
                "text": "MallocSizeof"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop11-cpp",
              "name": "cert-oop11-cpp",
              "shortDescription": {
                "text": "oop11-cpp"
              },
              "fullDescription": {
                "text": "oop11-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullReturnedFromNonnull",
              "name": "clang-analyzer-nullability.NullReturnedFromNonnull",
              "shortDescription": {
                "text": "NullReturnedFromNonnull"
              },
              "fullDescription": {
                "text": "NullReturnedFromNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unhandled-exception-at-new",
              "name": "bugprone-unhandled-exception-at-new",
              "shortDescription": {
                "text": "unhandled-exception-at-new"
              },
              "fullDescription": {
                "text": "unhandled-exception-at-new"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-1",
              "name": "clion-misra-cpp2008-6-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-use-std-min-max",
              "name": "readability-use-std-min-max",
              "shortDescription": {
                "text": "use-std-min-max"
              },
              "fullDescription": {
                "text": "use-std-min-max"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-raw-string-literal",
              "name": "modernize-raw-string-literal",
              "shortDescription": {
                "text": "raw-string-literal"
              },
              "fullDescription": {
                "text": "raw-string-literal"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-inaccurate-erase",
              "name": "bugprone-inaccurate-erase",
              "shortDescription": {
                "text": "inaccurate-erase"
              },
              "fullDescription": {
                "text": "inaccurate-erase"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misleading-identifier",
              "name": "misc-misleading-identifier",
              "shortDescription": {
                "text": "misleading-identifier"
              },
              "fullDescription": {
                "text": "misleading-identifier"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-1",
              "name": "clion-misra-c2012-11-1",
              "shortDescription": {
                "text": "misra-c2012-11-1"
              },
              "fullDescription": {
                "text": "misra-c2012-11-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.portability.UnixAPI",
              "name": "clang-analyzer-optin.portability.UnixAPI",
              "shortDescription": {
                "text": "UnixAPI"
              },
              "fullDescription": {
                "text": "UnixAPI"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.portability",
                    "index": 56,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-unused-parameters",
              "name": "misc-unused-parameters",
              "shortDescription": {
                "text": "unused-parameters"
              },
              "fullDescription": {
                "text": "unused-parameters"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-1-2",
              "name": "clion-misra-cpp2008-15-1-2",
              "shortDescription": {
                "text": "misra-cpp2008-15-1-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-1-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.NSOrCFErrorDerefChecker",
              "name": "clang-analyzer-osx.NSOrCFErrorDerefChecker",
              "shortDescription": {
                "text": "NSOrCFErrorDerefChecker"
              },
              "fullDescription": {
                "text": "NSOrCFErrorDerefChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-auto-ptr",
              "name": "modernize-replace-auto-ptr",
              "shortDescription": {
                "text": "replace-auto-ptr"
              },
              "fullDescription": {
                "text": "replace-auto-ptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-type-reinterpret-cast",
              "name": "cppcoreguidelines-pro-type-reinterpret-cast",
              "shortDescription": {
                "text": "pro-type-reinterpret-cast"
              },
              "fullDescription": {
                "text": "pro-type-reinterpret-cast"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-4",
              "name": "clion-misra-c2012-16-4",
              "shortDescription": {
                "text": "misra-c2012-16-4"
              },
              "fullDescription": {
                "text": "misra-c2012-16-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-virtual-class-destructor",
              "name": "cppcoreguidelines-virtual-class-destructor",
              "shortDescription": {
                "text": "virtual-class-destructor"
              },
              "fullDescription": {
                "text": "virtual-class-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NonNullParamChecker",
              "name": "clang-analyzer-core.NonNullParamChecker",
              "shortDescription": {
                "text": "NonNullParamChecker"
              },
              "fullDescription": {
                "text": "NonNullParamChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp-exception-escape",
              "name": "openmp-exception-escape",
              "shortDescription": {
                "text": "exception-escape"
              },
              "fullDescription": {
                "text": "exception-escape"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "index": 57,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-vararg",
              "name": "hicpp-vararg",
              "shortDescription": {
                "text": "vararg"
              },
              "fullDescription": {
                "text": "vararg"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.UninitializedRead",
              "name": "clang-analyzer-alpha.unix.cstring.UninitializedRead",
              "shortDescription": {
                "text": "UninitializedRead"
              },
              "fullDescription": {
                "text": "UninitializedRead"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-8-5-3",
              "name": "clion-misra-cpp2008-8-5-3",
              "shortDescription": {
                "text": "misra-cpp2008-8-5-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-8-5-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop57-cpp",
              "name": "cert-oop57-cpp",
              "shortDescription": {
                "text": "oop57-cpp"
              },
              "fullDescription": {
                "text": "oop57-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-8",
              "name": "clion-misra-c2012-21-8",
              "shortDescription": {
                "text": "misra-c2012-21-8"
              },
              "fullDescription": {
                "text": "misra-c2012-21-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-8",
              "name": "clion-misra-c2012-8-8",
              "shortDescription": {
                "text": "misra-c2012-8-8"
              },
              "fullDescription": {
                "text": "misra-c2012-8-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullPassedToNonnull",
              "name": "clang-analyzer-nullability.NullPassedToNonnull",
              "shortDescription": {
                "text": "NullPassedToNonnull"
              },
              "fullDescription": {
                "text": "NullPassedToNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-pipe2",
              "name": "android-cloexec-pipe2",
              "shortDescription": {
                "text": "cloexec-pipe2"
              },
              "fullDescription": {
                "text": "cloexec-pipe2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-avoid-c-arrays",
              "name": "hicpp-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-division",
              "name": "abseil-duration-division",
              "shortDescription": {
                "text": "duration-division"
              },
              "fullDescription": {
                "text": "duration-division"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-deprecated-headers",
              "name": "hicpp-deprecated-headers",
              "shortDescription": {
                "text": "deprecated-headers"
              },
              "fullDescription": {
                "text": "deprecated-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-6",
              "name": "clion-misra-cpp2008-5-2-6",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-3",
              "name": "clion-misra-cpp2008-2-13-3",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-global-names-in-headers",
              "name": "google-global-names-in-headers",
              "shortDescription": {
                "text": "global-names-in-headers"
              },
              "fullDescription": {
                "text": "global-names-in-headers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-random-shuffle",
              "name": "modernize-replace-random-shuffle",
              "shortDescription": {
                "text": "replace-random-shuffle"
              },
              "fullDescription": {
                "text": "replace-random-shuffle"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-access-specifiers",
              "name": "readability-redundant-access-specifiers",
              "shortDescription": {
                "text": "redundant-access-specifiers"
              },
              "fullDescription": {
                "text": "redundant-access-specifiers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.STLAlgorithmModeling",
              "name": "clang-analyzer-alpha.cplusplus.STLAlgorithmModeling",
              "shortDescription": {
                "text": "STLAlgorithmModeling"
              },
              "fullDescription": {
                "text": "STLAlgorithmModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.Chroot",
              "name": "clang-analyzer-alpha.unix.Chroot",
              "shortDescription": {
                "text": "Chroot"
              },
              "fullDescription": {
                "text": "Chroot"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.mkstemp",
              "name": "clang-analyzer-security.insecureAPI.mkstemp",
              "shortDescription": {
                "text": "mkstemp"
              },
              "fullDescription": {
                "text": "mkstemp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc30-c",
              "name": "cert-msc30-c",
              "shortDescription": {
                "text": "msc30-c"
              },
              "fullDescription": {
                "text": "msc30-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-sizeof-container",
              "name": "bugprone-sizeof-container",
              "shortDescription": {
                "text": "sizeof-container"
              },
              "fullDescription": {
                "text": "sizeof-container"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-upgrade-googletest-case",
              "name": "google-upgrade-googletest-case",
              "shortDescription": {
                "text": "upgrade-googletest-case"
              },
              "fullDescription": {
                "text": "upgrade-googletest-case"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-const-return-type",
              "name": "readability-const-return-type",
              "shortDescription": {
                "text": "const-return-type"
              },
              "fullDescription": {
                "text": "const-return-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-pass-by-value",
              "name": "modernize-pass-by-value",
              "shortDescription": {
                "text": "pass-by-value"
              },
              "fullDescription": {
                "text": "pass-by-value"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-no-namespace",
              "name": "abseil-no-namespace",
              "shortDescription": {
                "text": "no-namespace"
              },
              "fullDescription": {
                "text": "no-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.NewDelete",
              "name": "clang-analyzer-cplusplus.NewDelete",
              "shortDescription": {
                "text": "NewDelete"
              },
              "fullDescription": {
                "text": "NewDelete"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-objc-function-naming",
              "name": "google-objc-function-naming",
              "shortDescription": {
                "text": "objc-function-naming"
              },
              "fullDescription": {
                "text": "objc-function-naming"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop58-cpp",
              "name": "cert-oop58-cpp",
              "shortDescription": {
                "text": "oop58-cpp"
              },
              "fullDescription": {
                "text": "oop58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-10",
              "name": "clion-misra-c2012-8-10",
              "shortDescription": {
                "text": "misra-c2012-8-10"
              },
              "fullDescription": {
                "text": "misra-c2012-8-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NSError",
              "name": "clang-analyzer-osx.cocoa.NSError",
              "shortDescription": {
                "text": "NSError"
              },
              "fullDescription": {
                "text": "NSError"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-c-copy-assignment-signature",
              "name": "cppcoreguidelines-c-copy-assignment-signature",
              "shortDescription": {
                "text": "c-copy-assignment-signature"
              },
              "fullDescription": {
                "text": "c-copy-assignment-signature"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-oop54-cpp",
              "name": "cert-oop54-cpp",
              "shortDescription": {
                "text": "oop54-cpp"
              },
              "fullDescription": {
                "text": "oop54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-3-2",
              "name": "clion-misra-cpp2008-3-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-3-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-redundant-expression",
              "name": "misc-redundant-expression",
              "shortDescription": {
                "text": "redundant-expression"
              },
              "fullDescription": {
                "text": "redundant-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-swap",
              "name": "performance-noexcept-swap",
              "shortDescription": {
                "text": "noexcept-swap"
              },
              "fullDescription": {
                "text": "noexcept-swap"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-no-internal-dependencies",
              "name": "abseil-no-internal-dependencies",
              "shortDescription": {
                "text": "no-internal-dependencies"
              },
              "fullDescription": {
                "text": "no-internal-dependencies"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-const-params-in-decls",
              "name": "readability-avoid-const-params-in-decls",
              "shortDescription": {
                "text": "avoid-const-params-in-decls"
              },
              "fullDescription": {
                "text": "avoid-const-params-in-decls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.SecuritySyntaxChecker",
              "name": "clang-analyzer-security.insecureAPI.SecuritySyntaxChecker",
              "shortDescription": {
                "text": "SecuritySyntaxChecker"
              },
              "fullDescription": {
                "text": "SecuritySyntaxChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-super-self",
              "name": "objc-super-self",
              "shortDescription": {
                "text": "super-self"
              },
              "fullDescription": {
                "text": "super-self"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-redundant-strcat-calls",
              "name": "abseil-redundant-strcat-calls",
              "shortDescription": {
                "text": "redundant-strcat-calls"
              },
              "fullDescription": {
                "text": "redundant-strcat-calls"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-accept",
              "name": "android-cloexec-accept",
              "shortDescription": {
                "text": "cloexec-accept"
              },
              "fullDescription": {
                "text": "cloexec-accept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-chained-comparison",
              "name": "bugprone-chained-comparison",
              "shortDescription": {
                "text": "chained-comparison"
              },
              "fullDescription": {
                "text": "chained-comparison"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.ClassRelease",
              "name": "clang-analyzer-osx.cocoa.ClassRelease",
              "shortDescription": {
                "text": "ClassRelease"
              },
              "fullDescription": {
                "text": "ClassRelease"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
              "name": "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
              "shortDescription": {
                "text": "NonLocalizedStringChecker"
              },
              "fullDescription": {
                "text": "NonLocalizedStringChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "index": 55,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
              "name": "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
              "shortDescription": {
                "text": "PointerSizedValues"
              },
              "fullDescription": {
                "text": "PointerSizedValues"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "index": 59,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-member-init",
              "name": "hicpp-member-init",
              "shortDescription": {
                "text": "member-init"
              },
              "fullDescription": {
                "text": "member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-flp30-c",
              "name": "cert-flp30-c",
              "shortDescription": {
                "text": "flp30-c"
              },
              "fullDescription": {
                "text": "flp30-c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.uninitialized.Branch",
              "name": "clang-analyzer-core.uninitialized.Branch",
              "shortDescription": {
                "text": "Branch"
              },
              "fullDescription": {
                "text": "Branch"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "index": 35,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-trailing-return",
              "name": "fuchsia-trailing-return",
              "shortDescription": {
                "text": "trailing-return"
              },
              "fullDescription": {
                "text": "trailing-return"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.ArrayBound",
              "name": "clang-analyzer-alpha.security.ArrayBound",
              "shortDescription": {
                "text": "ArrayBound"
              },
              "fullDescription": {
                "text": "ArrayBound"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-10-1",
              "name": "clion-misra-c2012-10-1",
              "shortDescription": {
                "text": "misra-c2012-10-1"
              },
              "fullDescription": {
                "text": "misra-c2012-10-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-9-5-1",
              "name": "clion-misra-cpp2008-9-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-9-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-9-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.VirtualCallModeling",
              "name": "clang-analyzer-cplusplus.VirtualCallModeling",
              "shortDescription": {
                "text": "VirtualCallModeling"
              },
              "fullDescription": {
                "text": "VirtualCallModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-3",
              "name": "clion-misra-cpp2008-18-0-3",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
              "name": "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
              "shortDescription": {
                "text": "OutOfBounds"
              },
              "fullDescription": {
                "text": "OutOfBounds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "index": 59,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
              "name": "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
              "shortDescription": {
                "text": "pro-bounds-array-to-pointer-decay"
              },
              "fullDescription": {
                "text": "pro-bounds-array-to-pointer-decay"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-no-recursion",
              "name": "misc-no-recursion",
              "shortDescription": {
                "text": "no-recursion"
              },
              "fullDescription": {
                "text": "no-recursion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.llvm.ReturnValue",
              "name": "clang-analyzer-apiModeling.llvm.ReturnValue",
              "shortDescription": {
                "text": "ReturnValue"
              },
              "fullDescription": {
                "text": "ReturnValue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "index": 32,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-incorrect-enable-if",
              "name": "bugprone-incorrect-enable-if",
              "shortDescription": {
                "text": "incorrect-enable-if"
              },
              "fullDescription": {
                "text": "incorrect-enable-if"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-switch-missing-default-case",
              "name": "bugprone-switch-missing-default-case",
              "shortDescription": {
                "text": "switch-missing-default-case"
              },
              "fullDescription": {
                "text": "switch-missing-default-case"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-11",
              "name": "clion-misra-cpp2008-5-0-11",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-11"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-inline-specifier",
              "name": "readability-redundant-inline-specifier",
              "shortDescription": {
                "text": "redundant-inline-specifier"
              },
              "fullDescription": {
                "text": "redundant-inline-specifier"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-1",
              "name": "clion-misra-c2012-8-1",
              "shortDescription": {
                "text": "misra-c2012-8-1"
              },
              "fullDescription": {
                "text": "misra-c2012-8-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-6-2",
              "name": "clion-misra-c2012-6-2",
              "shortDescription": {
                "text": "misra-c2012-6-2"
              },
              "fullDescription": {
                "text": "misra-c2012-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-non-private-member-variables-in-classes",
              "name": "cppcoreguidelines-non-private-member-variables-in-classes",
              "shortDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "fullDescription": {
                "text": "non-private-member-variables-in-classes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-1",
              "name": "clion-misra-c2012-15-1",
              "shortDescription": {
                "text": "misra-c2012-15-1"
              },
              "fullDescription": {
                "text": "misra-c2012-15-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-comparison",
              "name": "abseil-duration-comparison",
              "shortDescription": {
                "text": "duration-comparison"
              },
              "fullDescription": {
                "text": "duration-comparison"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-do-while",
              "name": "cppcoreguidelines-avoid-do-while",
              "shortDescription": {
                "text": "avoid-do-while"
              },
              "fullDescription": {
                "text": "avoid-do-while"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-uncaught-exceptions",
              "name": "modernize-use-uncaught-exceptions",
              "shortDescription": {
                "text": "use-uncaught-exceptions"
              },
              "fullDescription": {
                "text": "use-uncaught-exceptions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-memset-usage",
              "name": "bugprone-suspicious-memset-usage",
              "shortDescription": {
                "text": "suspicious-memset-usage"
              },
              "fullDescription": {
                "text": "suspicious-memset-usage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl37-c",
              "name": "cert-dcl37-c",
              "shortDescription": {
                "text": "dcl37-c"
              },
              "fullDescription": {
                "text": "dcl37-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.DynamicMemoryModeling",
              "name": "clang-analyzer-unix.DynamicMemoryModeling",
              "shortDescription": {
                "text": "DynamicMemoryModeling"
              },
              "fullDescription": {
                "text": "DynamicMemoryModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc24-c",
              "name": "cert-msc24-c",
              "shortDescription": {
                "text": "msc24-c"
              },
              "fullDescription": {
                "text": "msc24-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-6",
              "name": "clion-misra-c2012-13-6",
              "shortDescription": {
                "text": "misra-c2012-13-6"
              },
              "fullDescription": {
                "text": "misra-c2012-13-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-redundant-branch-condition",
              "name": "bugprone-redundant-branch-condition",
              "shortDescription": {
                "text": "redundant-branch-condition"
              },
              "fullDescription": {
                "text": "redundant-branch-condition"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-5",
              "name": "clion-misra-c2012-12-5",
              "shortDescription": {
                "text": "misra-c2012-12-5"
              },
              "fullDescription": {
                "text": "misra-c2012-12-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-casting-through-void",
              "name": "bugprone-casting-through-void",
              "shortDescription": {
                "text": "casting-through-void"
              },
              "fullDescription": {
                "text": "casting-through-void"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err60-cpp",
              "name": "cert-err60-cpp",
              "shortDescription": {
                "text": "err60-cpp"
              },
              "fullDescription": {
                "text": "err60-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.deadcode.UnreachableCode",
              "name": "clang-analyzer-alpha.deadcode.UnreachableCode",
              "shortDescription": {
                "text": "UnreachableCode"
              },
              "fullDescription": {
                "text": "UnreachableCode"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.deadcode",
                    "index": 60,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.NonnilStringConstants",
              "name": "clang-analyzer-core.NonnilStringConstants",
              "shortDescription": {
                "text": "NonnilStringConstants"
              },
              "fullDescription": {
                "text": "NonnilStringConstants"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-macro-usage",
              "name": "cppcoreguidelines-macro-usage",
              "shortDescription": {
                "text": "macro-usage"
              },
              "fullDescription": {
                "text": "macro-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-undelegated-constructor",
              "name": "hicpp-undelegated-constructor",
              "shortDescription": {
                "text": "undelegated-constructor"
              },
              "fullDescription": {
                "text": "undelegated-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.BitwiseShift",
              "name": "clang-analyzer-core.BitwiseShift",
              "shortDescription": {
                "text": "BitwiseShift"
              },
              "fullDescription": {
                "text": "BitwiseShift"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-new-delete-overloads",
              "name": "misc-new-delete-overloads",
              "shortDescription": {
                "text": "new-delete-overloads"
              },
              "fullDescription": {
                "text": "new-delete-overloads"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-5-2",
              "name": "clion-misra-cpp2008-4-5-2",
              "shortDescription": {
                "text": "misra-cpp2008-4-5-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-5-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-4",
              "name": "clion-misra-c2012-13-4",
              "shortDescription": {
                "text": "misra-c2012-13-4"
              },
              "fullDescription": {
                "text": "misra-c2012-13-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.NoUncountedMemberChecker",
              "name": "clang-analyzer-webkit.NoUncountedMemberChecker",
              "shortDescription": {
                "text": "NoUncountedMemberChecker"
              },
              "fullDescription": {
                "text": "NoUncountedMemberChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp-use-default-none",
              "name": "openmp-use-default-none",
              "shortDescription": {
                "text": "use-default-none"
              },
              "fullDescription": {
                "text": "use-default-none"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "index": 57,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-5",
              "name": "clion-misra-cpp2008-6-6-5",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-forwarding-reference-overload",
              "name": "bugprone-forwarding-reference-overload",
              "shortDescription": {
                "text": "forwarding-reference-overload"
              },
              "fullDescription": {
                "text": "forwarding-reference-overload"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-incorrect-roundings",
              "name": "bugprone-incorrect-roundings",
              "shortDescription": {
                "text": "incorrect-roundings"
              },
              "fullDescription": {
                "text": "incorrect-roundings"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-duplicate-include",
              "name": "readability-duplicate-include",
              "shortDescription": {
                "text": "duplicate-include"
              },
              "fullDescription": {
                "text": "duplicate-include"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-5",
              "name": "clion-misra-c2012-15-5",
              "shortDescription": {
                "text": "misra-c2012-15-5"
              },
              "fullDescription": {
                "text": "misra-c2012-15-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-use-anonymous-namespace",
              "name": "misc-use-anonymous-namespace",
              "shortDescription": {
                "text": "use-anonymous-namespace"
              },
              "fullDescription": {
                "text": "use-anonymous-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-transparent-functors",
              "name": "modernize-use-transparent-functors",
              "shortDescription": {
                "text": "use-transparent-functors"
              },
              "fullDescription": {
                "text": "use-transparent-functors"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-pointer-arithmetic-in-alloc",
              "name": "bugprone-misplaced-pointer-arithmetic-in-alloc",
              "shortDescription": {
                "text": "misplaced-pointer-arithmetic-in-alloc"
              },
              "fullDescription": {
                "text": "misplaced-pointer-arithmetic-in-alloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.DirectIvarAssignment",
              "name": "clang-analyzer-alpha.osx.cocoa.DirectIvarAssignment",
              "shortDescription": {
                "text": "DirectIvarAssignment"
              },
              "fullDescription": {
                "text": "DirectIvarAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err09-cpp",
              "name": "cert-err09-cpp",
              "shortDescription": {
                "text": "err09-cpp"
              },
              "fullDescription": {
                "text": "err09-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-macro-repeated-side-effects",
              "name": "bugprone-macro-repeated-side-effects",
              "shortDescription": {
                "text": "macro-repeated-side-effects"
              },
              "fullDescription": {
                "text": "macro-repeated-side-effects"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-10-2",
              "name": "clion-misra-cpp2008-4-10-2",
              "shortDescription": {
                "text": "misra-cpp2008-4-10-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-10-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-flp37-c",
              "name": "cert-flp37-c",
              "shortDescription": {
                "text": "flp37-c"
              },
              "fullDescription": {
                "text": "flp37-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-webkit.RefCntblBaseVirtualDtor",
              "name": "clang-analyzer-webkit.RefCntblBaseVirtualDtor",
              "shortDescription": {
                "text": "RefCntblBaseVirtualDtor"
              },
              "fullDescription": {
                "text": "RefCntblBaseVirtualDtor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "index": 39,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-13",
              "name": "clion-misra-cpp2008-5-0-13",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-13"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-13"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.builtin.BuiltinFunctions",
              "name": "clang-analyzer-core.builtin.BuiltinFunctions",
              "shortDescription": {
                "text": "BuiltinFunctions"
              },
              "fullDescription": {
                "text": "BuiltinFunctions"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "index": 36,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.ObjCGenerics",
              "name": "clang-analyzer-osx.cocoa.ObjCGenerics",
              "shortDescription": {
                "text": "ObjCGenerics"
              },
              "fullDescription": {
                "text": "ObjCGenerics"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-simd-intrinsics",
              "name": "portability-simd-intrinsics",
              "shortDescription": {
                "text": "simd-intrinsics"
              },
              "fullDescription": {
                "text": "simd-intrinsics"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc51-cpp",
              "name": "cert-msc51-cpp",
              "shortDescription": {
                "text": "msc51-cpp"
              },
              "fullDescription": {
                "text": "msc51-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-non-const-global-variables",
              "name": "cppcoreguidelines-avoid-non-const-global-variables",
              "shortDescription": {
                "text": "avoid-non-const-global-variables"
              },
              "fullDescription": {
                "text": "avoid-non-const-global-variables"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-19",
              "name": "clion-misra-cpp2008-5-0-19",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-19"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-19"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-12",
              "name": "clion-misra-cpp2008-5-2-12",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-12"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-12"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-explicit-make-pair",
              "name": "google-build-explicit-make-pair",
              "shortDescription": {
                "text": "build-explicit-make-pair"
              },
              "fullDescription": {
                "text": "build-explicit-make-pair"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-addition",
              "name": "abseil-duration-addition",
              "shortDescription": {
                "text": "duration-addition"
              },
              "fullDescription": {
                "text": "duration-addition"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.osx.OSObjectCStyleCast",
              "name": "clang-analyzer-optin.osx.OSObjectCStyleCast",
              "shortDescription": {
                "text": "OSObjectCStyleCast"
              },
              "fullDescription": {
                "text": "OSObjectCStyleCast"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx",
                    "index": 61,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-build-using-namespace",
              "name": "google-build-using-namespace",
              "shortDescription": {
                "text": "build-using-namespace"
              },
              "fullDescription": {
                "text": "build-using-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-todo",
              "name": "google-readability-todo",
              "shortDescription": {
                "text": "readability-todo"
              },
              "fullDescription": {
                "text": "readability-todo"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-replace-disallow-copy-and-assign-macro",
              "name": "modernize-replace-disallow-copy-and-assign-macro",
              "shortDescription": {
                "text": "replace-disallow-copy-and-assign-macro"
              },
              "fullDescription": {
                "text": "replace-disallow-copy-and-assign-macro"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-else-after-return",
              "name": "readability-else-after-return",
              "shortDescription": {
                "text": "else-after-return"
              },
              "fullDescription": {
                "text": "do not use 'else' after 'continue'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-function-size",
              "name": "readability-function-size",
              "shortDescription": {
                "text": "function-size"
              },
              "fullDescription": {
                "text": "function 'printDouble' exceeds recommended size/complexity thresholds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-stringview-nullptr",
              "name": "bugprone-stringview-nullptr",
              "shortDescription": {
                "text": "stringview-nullptr"
              },
              "fullDescription": {
                "text": "stringview-nullptr"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc32-c",
              "name": "cert-msc32-c",
              "shortDescription": {
                "text": "msc32-c"
              },
              "fullDescription": {
                "text": "msc32-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err34-c",
              "name": "cert-err34-c",
              "shortDescription": {
                "text": "err34-c"
              },
              "fullDescription": {
                "text": "err34-c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Errno",
              "name": "clang-analyzer-unix.Errno",
              "shortDescription": {
                "text": "Errno"
              },
              "fullDescription": {
                "text": "Errno"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-3",
              "name": "clion-misra-c2012-11-3",
              "shortDescription": {
                "text": "misra-c2012-11-3"
              },
              "fullDescription": {
                "text": "misra-c2012-11-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-magic-numbers",
              "name": "cppcoreguidelines-avoid-magic-numbers",
              "shortDescription": {
                "text": "avoid-magic-numbers"
              },
              "fullDescription": {
                "text": "avoid-magic-numbers"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unhandled-self-assignment",
              "name": "bugprone-unhandled-self-assignment",
              "shortDescription": {
                "text": "unhandled-self-assignment"
              },
              "fullDescription": {
                "text": "unhandled-self-assignment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-simplify-boolean-expr",
              "name": "readability-simplify-boolean-expr",
              "shortDescription": {
                "text": "simplify-boolean-expr"
              },
              "fullDescription": {
                "text": "simplify-boolean-expr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-open",
              "name": "android-cloexec-open",
              "shortDescription": {
                "text": "cloexec-open"
              },
              "fullDescription": {
                "text": "cloexec-open"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.IvarInvalidationModeling",
              "name": "clang-analyzer-alpha.osx.cocoa.IvarInvalidationModeling",
              "shortDescription": {
                "text": "IvarInvalidationModeling"
              },
              "fullDescription": {
                "text": "IvarInvalidationModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-forward-declaration-namespace",
              "name": "bugprone-forward-declaration-namespace",
              "shortDescription": {
                "text": "forward-declaration-namespace"
              },
              "fullDescription": {
                "text": "forward-declaration-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-subtraction",
              "name": "abseil-duration-subtraction",
              "shortDescription": {
                "text": "duration-subtraction"
              },
              "fullDescription": {
                "text": "duration-subtraction"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-no-malloc",
              "name": "cppcoreguidelines-no-malloc",
              "shortDescription": {
                "text": "no-malloc"
              },
              "fullDescription": {
                "text": "no-malloc"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.StackAddressEscape",
              "name": "clang-analyzer-core.StackAddressEscape",
              "shortDescription": {
                "text": "StackAddressEscape"
              },
              "fullDescription": {
                "text": "StackAddressEscape"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PthreadLockBase",
              "name": "clang-analyzer-alpha.core.PthreadLockBase",
              "shortDescription": {
                "text": "PthreadLockBase"
              },
              "fullDescription": {
                "text": "PthreadLockBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-return-braced-init-list",
              "name": "modernize-return-braced-init-list",
              "shortDescription": {
                "text": "return-braced-init-list"
              },
              "fullDescription": {
                "text": "return-braced-init-list"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.UnusedIvars",
              "name": "clang-analyzer-osx.cocoa.UnusedIvars",
              "shortDescription": {
                "text": "UnusedIvars"
              },
              "fullDescription": {
                "text": "UnusedIvars"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multi-level-implicit-pointer-conversion",
              "name": "bugprone-multi-level-implicit-pointer-conversion",
              "shortDescription": {
                "text": "multi-level-implicit-pointer-conversion"
              },
              "fullDescription": {
                "text": "multi-level-implicit-pointer-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.InnerPointer",
              "name": "clang-analyzer-cplusplus.InnerPointer",
              "shortDescription": {
                "text": "InnerPointer"
              },
              "fullDescription": {
                "text": "InnerPointer"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.vfork",
              "name": "clang-analyzer-security.insecureAPI.vfork",
              "shortDescription": {
                "text": "vfork"
              },
              "fullDescription": {
                "text": "vfork"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.MismatchedIterator",
              "name": "clang-analyzer-alpha.cplusplus.MismatchedIterator",
              "shortDescription": {
                "text": "MismatchedIterator"
              },
              "fullDescription": {
                "text": "MismatchedIterator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-15-1-3",
              "name": "clion-misra-cpp2008-15-1-3",
              "shortDescription": {
                "text": "misra-cpp2008-15-1-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-15-1-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-macro-to-enum",
              "name": "cppcoreguidelines-macro-to-enum",
              "shortDescription": {
                "text": "macro-to-enum"
              },
              "fullDescription": {
                "text": "macro-to-enum"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-twine-local",
              "name": "llvm-twine-local",
              "shortDescription": {
                "text": "twine-local"
              },
              "fullDescription": {
                "text": "twine-local"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-macro-parentheses",
              "name": "bugprone-macro-parentheses",
              "shortDescription": {
                "text": "macro-parentheses"
              },
              "fullDescription": {
                "text": "macro-parentheses"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.coreFoundation.CFNumber",
              "name": "clang-analyzer-osx.coreFoundation.CFNumber",
              "shortDescription": {
                "text": "CFNumber"
              },
              "fullDescription": {
                "text": "CFNumber"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "index": 30,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera-unroll-loops",
              "name": "altera-unroll-loops",
              "shortDescription": {
                "text": "unroll-loops"
              },
              "fullDescription": {
                "text": "unroll-loops"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "index": 33,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-virtual-inheritance",
              "name": "fuchsia-virtual-inheritance",
              "shortDescription": {
                "text": "virtual-inheritance"
              },
              "fullDescription": {
                "text": "virtual-inheritance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-noexcept-destructor",
              "name": "performance-noexcept-destructor",
              "shortDescription": {
                "text": "noexcept-destructor"
              },
              "fullDescription": {
                "text": "noexcept-destructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-21-10",
              "name": "clion-misra-c2012-21-10",
              "shortDescription": {
                "text": "misra-c2012-21-10"
              },
              "fullDescription": {
                "text": "misra-c2012-21-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-8-14",
              "name": "clion-misra-c2012-8-14",
              "shortDescription": {
                "text": "misra-c2012-8-14"
              },
              "fullDescription": {
                "text": "misra-c2012-8-14"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-not-null-terminated-result",
              "name": "bugprone-not-null-terminated-result",
              "shortDescription": {
                "text": "not-null-terminated-result"
              },
              "fullDescription": {
                "text": "not-null-terminated-result"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.SmartPtr",
              "name": "clang-analyzer-alpha.cplusplus.SmartPtr",
              "shortDescription": {
                "text": "SmartPtr"
              },
              "fullDescription": {
                "text": "SmartPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.UncheckedReturn",
              "name": "clang-analyzer-security.insecureAPI.UncheckedReturn",
              "shortDescription": {
                "text": "UncheckedReturn"
              },
              "fullDescription": {
                "text": "UncheckedReturn"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc-callee-namespace",
              "name": "llvmlibc-callee-namespace",
              "shortDescription": {
                "text": "callee-namespace"
              },
              "fullDescription": {
                "text": "callee-namespace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "index": 8,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-avoid-nserror-init",
              "name": "objc-avoid-nserror-init",
              "shortDescription": {
                "text": "avoid-nserror-init"
              },
              "fullDescription": {
                "text": "avoid-nserror-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.BoolAssignment",
              "name": "clang-analyzer-alpha.core.BoolAssignment",
              "shortDescription": {
                "text": "BoolAssignment"
              },
              "fullDescription": {
                "text": "BoolAssignment"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PointerSub",
              "name": "clang-analyzer-alpha.core.PointerSub",
              "shortDescription": {
                "text": "PointerSub"
              },
              "fullDescription": {
                "text": "PointerSub"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-default-arguments-declarations",
              "name": "fuchsia-default-arguments-declarations",
              "shortDescription": {
                "text": "default-arguments-declarations"
              },
              "fullDescription": {
                "text": "default-arguments-declarations"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-semicolon",
              "name": "bugprone-suspicious-semicolon",
              "shortDescription": {
                "text": "suspicious-semicolon"
              },
              "fullDescription": {
                "text": "suspicious-semicolon"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-13-5",
              "name": "clion-misra-c2012-13-5",
              "shortDescription": {
                "text": "misra-c2012-13-5"
              },
              "fullDescription": {
                "text": "misra-c2012-13-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-branch-clone",
              "name": "bugprone-branch-clone",
              "shortDescription": {
                "text": "branch-clone"
              },
              "fullDescription": {
                "text": "branch-clone"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-fold-init-type",
              "name": "bugprone-fold-init-type",
              "shortDescription": {
                "text": "fold-init-type"
              },
              "fullDescription": {
                "text": "fold-init-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl03-c",
              "name": "cert-dcl03-c",
              "shortDescription": {
                "text": "dcl03-c"
              },
              "fullDescription": {
                "text": "dcl03-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullabilityBase",
              "name": "clang-analyzer-nullability.NullabilityBase",
              "shortDescription": {
                "text": "NullabilityBase"
              },
              "fullDescription": {
                "text": "NullabilityBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-macro-to-enum",
              "name": "modernize-macro-to-enum",
              "shortDescription": {
                "text": "macro-to-enum"
              },
              "fullDescription": {
                "text": "macro-to-enum"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-4",
              "name": "clion-misra-cpp2008-2-13-4",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.BlockInCriticalSection",
              "name": "clang-analyzer-alpha.unix.BlockInCriticalSection",
              "shortDescription": {
                "text": "BlockInCriticalSection"
              },
              "fullDescription": {
                "text": "BlockInCriticalSection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-init-variables",
              "name": "cppcoreguidelines-init-variables",
              "shortDescription": {
                "text": "init-variables"
              },
              "fullDescription": {
                "text": "variable 'parameters' is not initialized"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-no-int-to-ptr",
              "name": "performance-no-int-to-ptr",
              "shortDescription": {
                "text": "no-int-to-ptr"
              },
              "fullDescription": {
                "text": "no-int-to-ptr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-argument-selection-defects",
              "name": "clion-argument-selection-defects",
              "shortDescription": {
                "text": "argument-selection-defects"
              },
              "fullDescription": {
                "text": "argument-selection-defects"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-assignment-in-if-condition",
              "name": "bugprone-assignment-in-if-condition",
              "shortDescription": {
                "text": "assignment-in-if-condition"
              },
              "fullDescription": {
                "text": "assignment-in-if-condition"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-undelegated-constructor",
              "name": "bugprone-undelegated-constructor",
              "shortDescription": {
                "text": "undelegated-constructor"
              },
              "fullDescription": {
                "text": "undelegated-constructor"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-terminating-continue",
              "name": "bugprone-terminating-continue",
              "shortDescription": {
                "text": "terminating-continue"
              },
              "fullDescription": {
                "text": "terminating-continue"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.CastSize",
              "name": "clang-analyzer-alpha.core.CastSize",
              "shortDescription": {
                "text": "CastSize"
              },
              "fullDescription": {
                "text": "CastSize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.NotNullTerminated",
              "name": "clang-analyzer-alpha.unix.cstring.NotNullTerminated",
              "shortDescription": {
                "text": "NotNullTerminated"
              },
              "fullDescription": {
                "text": "NotNullTerminated"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-2",
              "name": "clion-misra-c2012-7-2",
              "shortDescription": {
                "text": "misra-c2012-7-2"
              },
              "fullDescription": {
                "text": "misra-c2012-7-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.rand",
              "name": "clang-analyzer-security.insecureAPI.rand",
              "shortDescription": {
                "text": "rand"
              },
              "fullDescription": {
                "text": "rand"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-inotify-init1",
              "name": "android-cloexec-inotify-init1",
              "shortDescription": {
                "text": "cloexec-inotify-init1"
              },
              "fullDescription": {
                "text": "cloexec-inotify-init1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-misplaced-operator-in-strlen-in-alloc",
              "name": "bugprone-misplaced-operator-in-strlen-in-alloc",
              "shortDescription": {
                "text": "misplaced-operator-in-strlen-in-alloc"
              },
              "fullDescription": {
                "text": "misplaced-operator-in-strlen-in-alloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-6",
              "name": "clion-misra-cpp2008-6-4-6",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misleading-bidirectional",
              "name": "misc-misleading-bidirectional",
              "shortDescription": {
                "text": "misleading-bidirectional"
              },
              "fullDescription": {
                "text": "misleading-bidirectional"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-6-1",
              "name": "clion-misra-c2012-6-1",
              "shortDescription": {
                "text": "misra-c2012-6-1"
              },
              "fullDescription": {
                "text": "misra-c2012-6-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-10",
              "name": "clion-misra-cpp2008-5-2-10",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-10"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-10"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.AtSync",
              "name": "clang-analyzer-osx.cocoa.AtSync",
              "shortDescription": {
                "text": "AtSync"
              },
              "fullDescription": {
                "text": "AtSync"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-unnecessary-copy-initialization",
              "name": "performance-unnecessary-copy-initialization",
              "shortDescription": {
                "text": "unnecessary-copy-initialization"
              },
              "fullDescription": {
                "text": "unnecessary-copy-initialization"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.PointerArithm",
              "name": "clang-analyzer-alpha.core.PointerArithm",
              "shortDescription": {
                "text": "PointerArithm"
              },
              "fullDescription": {
                "text": "PointerArithm"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-faster-string-find",
              "name": "performance-faster-string-find",
              "shortDescription": {
                "text": "faster-string-find"
              },
              "fullDescription": {
                "text": "faster-string-find"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-3-1-2",
              "name": "clion-misra-cpp2008-3-1-2",
              "shortDescription": {
                "text": "misra-cpp2008-3-1-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-3-1-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-rvalue-reference-param-not-moved",
              "name": "cppcoreguidelines-rvalue-reference-param-not-moved",
              "shortDescription": {
                "text": "rvalue-reference-param-not-moved"
              },
              "fullDescription": {
                "text": "rvalue-reference-param-not-moved"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-sizeof-expression",
              "name": "bugprone-sizeof-expression",
              "shortDescription": {
                "text": "sizeof-expression"
              },
              "fullDescription": {
                "text": "sizeof-expression"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-9-3",
              "name": "clion-misra-c2012-9-3",
              "shortDescription": {
                "text": "misra-c2012-9-3"
              },
              "fullDescription": {
                "text": "misra-c2012-9-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.DeleteWithNonVirtualDtor",
              "name": "clang-analyzer-alpha.cplusplus.DeleteWithNonVirtualDtor",
              "shortDescription": {
                "text": "DeleteWithNonVirtualDtor"
              },
              "fullDescription": {
                "text": "DeleteWithNonVirtualDtor"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-9-5",
              "name": "clion-misra-c2012-9-5",
              "shortDescription": {
                "text": "misra-c2012-9-5"
              },
              "fullDescription": {
                "text": "misra-c2012-9-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-11",
              "name": "clion-misra-cpp2008-5-2-11",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-11"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-11"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-3",
              "name": "clion-misra-cpp2008-5-3-3",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-use-after-move",
              "name": "bugprone-use-after-move",
              "shortDescription": {
                "text": "use-after-move"
              },
              "fullDescription": {
                "text": "use-after-move"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-nullability.NullablePassedToNonnull",
              "name": "clang-analyzer-nullability.NullablePassedToNonnull",
              "shortDescription": {
                "text": "NullablePassedToNonnull"
              },
              "fullDescription": {
                "text": "NullablePassedToNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "index": 42,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-stringview-data-usage",
              "name": "bugprone-suspicious-stringview-data-usage",
              "shortDescription": {
                "text": "suspicious-stringview-data-usage"
              },
              "fullDescription": {
                "text": "suspicious-stringview-data-usage"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.NewDeleteLeaks",
              "name": "clang-analyzer-cplusplus.NewDeleteLeaks",
              "shortDescription": {
                "text": "NewDeleteLeaks"
              },
              "fullDescription": {
                "text": "NewDeleteLeaks"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.Loops",
              "name": "clang-analyzer-osx.cocoa.Loops",
              "shortDescription": {
                "text": "Loops"
              },
              "fullDescription": {
                "text": "Loops"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.cstring.NullArg",
              "name": "clang-analyzer-unix.cstring.NullArg",
              "shortDescription": {
                "text": "NullArg"
              },
              "fullDescription": {
                "text": "NullArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "index": 31,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-12-3",
              "name": "clion-misra-c2012-12-3",
              "shortDescription": {
                "text": "misra-c2012-12-3"
              },
              "fullDescription": {
                "text": "misra-c2012-12-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-2-13-1",
              "name": "clion-misra-cpp2008-2-13-1",
              "shortDescription": {
                "text": "misra-cpp2008-2-13-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-2-13-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-16-6",
              "name": "clion-misra-c2012-16-6",
              "shortDescription": {
                "text": "misra-c2012-16-6"
              },
              "fullDescription": {
                "text": "misra-c2012-16-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
              "name": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
              "shortDescription": {
                "text": "DeprecatedOrUnsafeBufferHandling"
              },
              "fullDescription": {
                "text": "DeprecatedOrUnsafeBufferHandling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-4",
              "name": "clion-misra-c2012-11-4",
              "shortDescription": {
                "text": "misra-c2012-11-4"
              },
              "fullDescription": {
                "text": "misra-c2012-11-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-str-cat-append",
              "name": "abseil-str-cat-append",
              "shortDescription": {
                "text": "str-cat-append"
              },
              "fullDescription": {
                "text": "str-cat-append"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bzero",
              "name": "clang-analyzer-security.insecureAPI.bzero",
              "shortDescription": {
                "text": "bzero"
              },
              "fullDescription": {
                "text": "bzero"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-definitions-in-headers",
              "name": "misc-definitions-in-headers",
              "shortDescription": {
                "text": "definitions-in-headers"
              },
              "fullDescription": {
                "text": "definitions-in-headers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-8",
              "name": "clion-misra-cpp2008-6-4-8",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-8"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-4-5",
              "name": "clion-misra-cpp2008-6-4-5",
              "shortDescription": {
                "text": "misra-cpp2008-6-4-5"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-4-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.OutOfBounds",
              "name": "clang-analyzer-alpha.unix.cstring.OutOfBounds",
              "shortDescription": {
                "text": "OutOfBounds"
              },
              "fullDescription": {
                "text": "OutOfBounds"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability-restrict-system-includes",
              "name": "portability-restrict-system-includes",
              "shortDescription": {
                "text": "restrict-system-includes"
              },
              "fullDescription": {
                "text": "restrict-system-includes"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "index": 49,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-multiple-statement-macro",
              "name": "bugprone-multiple-statement-macro",
              "shortDescription": {
                "text": "multiple-statement-macro"
              },
              "fullDescription": {
                "text": "multiple-statement-macro"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-make-member-function-const",
              "name": "readability-make-member-function-const",
              "shortDescription": {
                "text": "make-member-function-const"
              },
              "fullDescription": {
                "text": "make-member-function-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-4-3",
              "name": "clion-misra-c2012-4-3",
              "shortDescription": {
                "text": "misra-c2012-4-3"
              },
              "fullDescription": {
                "text": "misra-c2012-4-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-special-member-functions",
              "name": "cppcoreguidelines-special-member-functions",
              "shortDescription": {
                "text": "special-member-functions"
              },
              "fullDescription": {
                "text": "special-member-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-namespace-comment",
              "name": "llvm-namespace-comment",
              "shortDescription": {
                "text": "namespace-comment"
              },
              "fullDescription": {
                "text": "namespace-comment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-inefficient-algorithm",
              "name": "performance-inefficient-algorithm",
              "shortDescription": {
                "text": "inefficient-algorithm"
              },
              "fullDescription": {
                "text": "inefficient-algorithm"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-14-1",
              "name": "clion-misra-cpp2008-5-14-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-14-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-14-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-type-traits",
              "name": "modernize-type-traits",
              "shortDescription": {
                "text": "type-traits"
              },
              "fullDescription": {
                "text": "type-traits"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-container-size-empty",
              "name": "readability-container-size-empty",
              "shortDescription": {
                "text": "container-size-empty"
              },
              "fullDescription": {
                "text": "container-size-empty"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-2-1",
              "name": "clion-misra-cpp2008-18-2-1",
              "shortDescription": {
                "text": "misra-cpp2008-18-2-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-2-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-braces-around-statements",
              "name": "hicpp-braces-around-statements",
              "shortDescription": {
                "text": "braces-around-statements"
              },
              "fullDescription": {
                "text": "braces-around-statements"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-implicit-bool-conversion",
              "name": "readability-implicit-bool-conversion",
              "shortDescription": {
                "text": "implicit-bool-conversion"
              },
              "fullDescription": {
                "text": "implicit-bool-conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-unused-raii",
              "name": "bugprone-unused-raii",
              "shortDescription": {
                "text": "unused-raii"
              },
              "fullDescription": {
                "text": "unused-raii"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-operators-representation",
              "name": "readability-operators-representation",
              "shortDescription": {
                "text": "operators-representation"
              },
              "fullDescription": {
                "text": "operators-representation"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.Stream",
              "name": "clang-analyzer-alpha.unix.Stream",
              "shortDescription": {
                "text": "Stream"
              },
              "fullDescription": {
                "text": "Stream"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-18-0-4",
              "name": "clion-misra-cpp2008-18-0-4",
              "shortDescription": {
                "text": "misra-cpp2008-18-0-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-18-0-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-standalone-empty",
              "name": "bugprone-standalone-empty",
              "shortDescription": {
                "text": "standalone-empty"
              },
              "fullDescription": {
                "text": "standalone-empty"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-emplace",
              "name": "hicpp-use-emplace",
              "shortDescription": {
                "text": "use-emplace"
              },
              "fullDescription": {
                "text": "use-emplace"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-virtual-near-miss",
              "name": "bugprone-virtual-near-miss",
              "shortDescription": {
                "text": "virtual-near-miss"
              },
              "fullDescription": {
                "text": "virtual-near-miss"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-function-size",
              "name": "hicpp-function-size",
              "shortDescription": {
                "text": "function-size"
              },
              "fullDescription": {
                "text": "function-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.getpw",
              "name": "clang-analyzer-security.insecureAPI.getpw",
              "shortDescription": {
                "text": "getpw"
              },
              "fullDescription": {
                "text": "getpw"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-fopen",
              "name": "android-cloexec-fopen",
              "shortDescription": {
                "text": "cloexec-fopen"
              },
              "fullDescription": {
                "text": "cloexec-fopen"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.StdVariant",
              "name": "clang-analyzer-alpha.core.StdVariant",
              "shortDescription": {
                "text": "StdVariant"
              },
              "fullDescription": {
                "text": "StdVariant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-static-accessed-through-instance",
              "name": "readability-static-accessed-through-instance",
              "shortDescription": {
                "text": "static-accessed-through-instance"
              },
              "fullDescription": {
                "text": "static-accessed-through-instance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android-cloexec-creat",
              "name": "android-cloexec-creat",
              "shortDescription": {
                "text": "cloexec-creat"
              },
              "fullDescription": {
                "text": "cloexec-creat"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "index": 29,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.cert.pos.34c",
              "name": "clang-analyzer-alpha.security.cert.pos.34c",
              "shortDescription": {
                "text": "34c"
              },
              "fullDescription": {
                "text": "34c"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.cert.pos",
                    "index": 62,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.cplusplus.IteratorModeling",
              "name": "clang-analyzer-alpha.cplusplus.IteratorModeling",
              "shortDescription": {
                "text": "IteratorModeling"
              },
              "fullDescription": {
                "text": "IteratorModeling"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "index": 7,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.mktemp",
              "name": "clang-analyzer-security.insecureAPI.mktemp",
              "shortDescription": {
                "text": "mktemp"
              },
              "fullDescription": {
                "text": "mktemp"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.osx.cocoa.MissingInvalidationMethod",
              "name": "clang-analyzer-alpha.osx.cocoa.MissingInvalidationMethod",
              "shortDescription": {
                "text": "MissingInvalidationMethod"
              },
              "fullDescription": {
                "text": "MissingInvalidationMethod"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "index": 24,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.NilArg",
              "name": "clang-analyzer-osx.cocoa.NilArg",
              "shortDescription": {
                "text": "NilArg"
              },
              "fullDescription": {
                "text": "NilArg"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc33-c",
              "name": "cert-msc33-c",
              "shortDescription": {
                "text": "msc33-c"
              },
              "fullDescription": {
                "text": "msc33-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-4",
              "name": "clion-misra-cpp2008-5-3-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-coroutine-hostile-raii",
              "name": "misc-coroutine-hostile-raii",
              "shortDescription": {
                "text": "coroutine-hostile-raii"
              },
              "fullDescription": {
                "text": "coroutine-hostile-raii"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-starts-ends-with",
              "name": "modernize-use-starts-ends-with",
              "shortDescription": {
                "text": "use-starts-ends-with"
              },
              "fullDescription": {
                "text": "use-starts-ends-with"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-magic-numbers",
              "name": "readability-magic-numbers",
              "shortDescription": {
                "text": "magic-numbers"
              },
              "fullDescription": {
                "text": "10 is a magic number; consider replacing it with a named constant"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-non-const-parameter",
              "name": "readability-non-const-parameter",
              "shortDescription": {
                "text": "non-const-parameter"
              },
              "fullDescription": {
                "text": "non-const-parameter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-redundant-member-init",
              "name": "readability-redundant-member-init",
              "shortDescription": {
                "text": "redundant-member-init"
              },
              "fullDescription": {
                "text": "redundant-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-use-auto",
              "name": "hicpp-use-auto",
              "shortDescription": {
                "text": "use-auto"
              },
              "fullDescription": {
                "text": "use-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-special-member-functions",
              "name": "hicpp-special-member-functions",
              "shortDescription": {
                "text": "special-member-functions"
              },
              "fullDescription": {
                "text": "special-member-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-18-1",
              "name": "clion-misra-cpp2008-5-18-1",
              "shortDescription": {
                "text": "misra-cpp2008-5-18-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-18-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-replace-enable-if",
              "name": "clion-replace-enable-if",
              "shortDescription": {
                "text": "replace-enable-if"
              },
              "fullDescription": {
                "text": "replace-enable-if"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-noexcept",
              "name": "modernize-use-noexcept",
              "shortDescription": {
                "text": "use-noexcept"
              },
              "fullDescription": {
                "text": "use-noexcept"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-explicit-virtual-functions",
              "name": "cppcoreguidelines-explicit-virtual-functions",
              "shortDescription": {
                "text": "explicit-virtual-functions"
              },
              "fullDescription": {
                "text": "explicit-virtual-functions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-named-parameter",
              "name": "hicpp-named-parameter",
              "shortDescription": {
                "text": "named-parameter"
              },
              "fullDescription": {
                "text": "named-parameter"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.cplusplus.VirtualCall",
              "name": "clang-analyzer-optin.cplusplus.VirtualCall",
              "shortDescription": {
                "text": "VirtualCall"
              },
              "fullDescription": {
                "text": "VirtualCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "index": 63,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.cstring.BufferOverlap",
              "name": "clang-analyzer-alpha.unix.cstring.BufferOverlap",
              "shortDescription": {
                "text": "BufferOverlap"
              },
              "fullDescription": {
                "text": "BufferOverlap"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "index": 58,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.TrustNonnull",
              "name": "clang-analyzer-apiModeling.TrustNonnull",
              "shortDescription": {
                "text": "TrustNonnull"
              },
              "fullDescription": {
                "text": "TrustNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-22-5",
              "name": "clion-misra-c2012-22-5",
              "shortDescription": {
                "text": "misra-c2012-22-5"
              },
              "fullDescription": {
                "text": "misra-c2012-22-5"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.TrustReturnsNonnull",
              "name": "clang-analyzer-apiModeling.TrustReturnsNonnull",
              "shortDescription": {
                "text": "TrustReturnsNonnull"
              },
              "fullDescription": {
                "text": "TrustReturnsNonnull"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-c-arrays",
              "name": "cppcoreguidelines-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-include",
              "name": "bugprone-suspicious-include",
              "shortDescription": {
                "text": "suspicious-include"
              },
              "fullDescription": {
                "text": "suspicious-include"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-make-unique",
              "name": "modernize-make-unique",
              "shortDescription": {
                "text": "make-unique"
              },
              "fullDescription": {
                "text": "make-unique"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-4-5-1",
              "name": "clion-misra-cpp2008-4-5-1",
              "shortDescription": {
                "text": "misra-cpp2008-4-5-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-4-5-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-4",
              "name": "clion-misra-c2012-18-4",
              "shortDescription": {
                "text": "misra-c2012-18-4"
              },
              "fullDescription": {
                "text": "misra-c2012-18-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-new-delete-operators",
              "name": "hicpp-new-delete-operators",
              "shortDescription": {
                "text": "new-delete-operators"
              },
              "fullDescription": {
                "text": "new-delete-operators"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.ValistBase",
              "name": "clang-analyzer-valist.ValistBase",
              "shortDescription": {
                "text": "ValistBase"
              },
              "fullDescription": {
                "text": "ValistBase"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-19-2",
              "name": "clion-misra-c2012-19-2",
              "shortDescription": {
                "text": "misra-c2012-19-2"
              },
              "fullDescription": {
                "text": "misra-c2012-19-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-uppercase-literal-suffix",
              "name": "readability-uppercase-literal-suffix",
              "shortDescription": {
                "text": "uppercase-literal-suffix"
              },
              "fullDescription": {
                "text": "uppercase-literal-suffix"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.CastToStruct",
              "name": "clang-analyzer-alpha.core.CastToStruct",
              "shortDescription": {
                "text": "CastToStruct"
              },
              "fullDescription": {
                "text": "CastToStruct"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-missing-hash",
              "name": "objc-missing-hash",
              "shortDescription": {
                "text": "missing-hash"
              },
              "fullDescription": {
                "text": "missing-hash"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-property-declaration",
              "name": "objc-property-declaration",
              "shortDescription": {
                "text": "property-declaration"
              },
              "fullDescription": {
                "text": "property-declaration"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-loop-convert",
              "name": "modernize-loop-convert",
              "shortDescription": {
                "text": "loop-convert"
              },
              "fullDescription": {
                "text": "loop-convert"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.Conversion",
              "name": "clang-analyzer-alpha.core.Conversion",
              "shortDescription": {
                "text": "Conversion"
              },
              "fullDescription": {
                "text": "Conversion"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-3",
              "name": "clion-misra-cpp2008-6-5-3",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-valist.Unterminated",
              "name": "clang-analyzer-valist.Unterminated",
              "shortDescription": {
                "text": "Unterminated"
              },
              "fullDescription": {
                "text": "Initialized va_list 'parameters' is leaked"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "index": 38,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-casting",
              "name": "google-readability-casting",
              "shortDescription": {
                "text": "readability-casting"
              },
              "fullDescription": {
                "text": "readability-casting"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-suspicious-call-argument",
              "name": "readability-suspicious-call-argument",
              "shortDescription": {
                "text": "suspicious-call-argument"
              },
              "fullDescription": {
                "text": "suspicious-call-argument"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-default-arguments",
              "name": "google-default-arguments",
              "shortDescription": {
                "text": "default-arguments"
              },
              "fullDescription": {
                "text": "default-arguments"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-uniqueptr-delete-release",
              "name": "readability-uniqueptr-delete-release",
              "shortDescription": {
                "text": "uniqueptr-delete-release"
              },
              "fullDescription": {
                "text": "uniqueptr-delete-release"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance-avoid-endl",
              "name": "performance-avoid-endl",
              "shortDescription": {
                "text": "avoid-endl"
              },
              "fullDescription": {
                "text": "avoid-endl"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "index": 9,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-0-6",
              "name": "clion-misra-cpp2008-5-0-6",
              "shortDescription": {
                "text": "misra-cpp2008-5-0-6"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-0-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-trailing-return-type",
              "name": "modernize-use-trailing-return-type",
              "shortDescription": {
                "text": "use-trailing-return-type"
              },
              "fullDescription": {
                "text": "use-trailing-return-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.MmapWriteExec",
              "name": "clang-analyzer-alpha.security.MmapWriteExec",
              "shortDescription": {
                "text": "MmapWriteExec"
              },
              "fullDescription": {
                "text": "MmapWriteExec"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "index": 2,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.UndefinedBinaryOperatorResult",
              "name": "clang-analyzer-core.UndefinedBinaryOperatorResult",
              "shortDescription": {
                "text": "UndefinedBinaryOperatorResult"
              },
              "fullDescription": {
                "text": "UndefinedBinaryOperatorResult"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.nondeterminism.PointerSorting",
              "name": "clang-analyzer-alpha.nondeterminism.PointerSorting",
              "shortDescription": {
                "text": "PointerSorting"
              },
              "fullDescription": {
                "text": "PointerSorting"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "index": 54,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RetainCount",
              "name": "clang-analyzer-osx.cocoa.RetainCount",
              "shortDescription": {
                "text": "RetainCount"
              },
              "fullDescription": {
                "text": "RetainCount"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "linuxkernel-must-check-errs",
              "name": "linuxkernel-must-check-errs",
              "shortDescription": {
                "text": "must-check-errs"
              },
              "fullDescription": {
                "text": "must-check-errs"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "linuxkernel",
                    "index": 65,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-apiModeling.Errno",
              "name": "clang-analyzer-apiModeling.Errno",
              "shortDescription": {
                "text": "Errno"
              },
              "fullDescription": {
                "text": "Errno"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "index": 64,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-11-6",
              "name": "clion-misra-c2012-11-6",
              "shortDescription": {
                "text": "misra-c2012-11-6"
              },
              "fullDescription": {
                "text": "misra-c2012-11-6"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-invalid-access-moved",
              "name": "hicpp-invalid-access-moved",
              "shortDescription": {
                "text": "invalid-access-moved"
              },
              "fullDescription": {
                "text": "invalid-access-moved"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-4",
              "name": "clion-misra-cpp2008-5-2-4",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-4",
              "name": "clion-misra-c2012-7-4",
              "shortDescription": {
                "text": "misra-c2012-7-4"
              },
              "fullDescription": {
                "text": "misra-c2012-7-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-0-1-7",
              "name": "clion-misra-cpp2008-0-1-7",
              "shortDescription": {
                "text": "misra-cpp2008-0-1-7"
              },
              "fullDescription": {
                "text": "misra-cpp2008-0-1-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-include-cleaner",
              "name": "misc-include-cleaner",
              "shortDescription": {
                "text": "include-cleaner"
              },
              "fullDescription": {
                "text": "include-cleaner"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency-mt-unsafe",
              "name": "concurrency-mt-unsafe",
              "shortDescription": {
                "text": "mt-unsafe"
              },
              "fullDescription": {
                "text": "mt-unsafe"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "index": 43,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-argument-comment",
              "name": "bugprone-argument-comment",
              "shortDescription": {
                "text": "argument-comment"
              },
              "fullDescription": {
                "text": "argument-comment"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.IdenticalExpr",
              "name": "clang-analyzer-alpha.core.IdenticalExpr",
              "shortDescription": {
                "text": "IdenticalExpr"
              },
              "fullDescription": {
                "text": "IdenticalExpr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-nested-conditional-operator",
              "name": "readability-avoid-nested-conditional-operator",
              "shortDescription": {
                "text": "avoid-nested-conditional-operator"
              },
              "fullDescription": {
                "text": "avoid-nested-conditional-operator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-slicing",
              "name": "cppcoreguidelines-slicing",
              "shortDescription": {
                "text": "slicing"
              },
              "fullDescription": {
                "text": "slicing"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.DynamicTypeChecker",
              "name": "clang-analyzer-alpha.core.DynamicTypeChecker",
              "shortDescription": {
                "text": "DynamicTypeChecker"
              },
              "fullDescription": {
                "text": "DynamicTypeChecker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.unix.PthreadLock",
              "name": "clang-analyzer-alpha.unix.PthreadLock",
              "shortDescription": {
                "text": "PthreadLock"
              },
              "fullDescription": {
                "text": "PthreadLock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "index": 23,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-dcl54-cpp",
              "name": "cert-dcl54-cpp",
              "shortDescription": {
                "text": "dcl54-cpp"
              },
              "fullDescription": {
                "text": "dcl54-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-cplusplus.PureVirtualCall",
              "name": "clang-analyzer-cplusplus.PureVirtualCall",
              "shortDescription": {
                "text": "PureVirtualCall"
              },
              "fullDescription": {
                "text": "PureVirtualCall"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "index": 1,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin-avoid-spinlock",
              "name": "darwin-avoid-spinlock",
              "shortDescription": {
                "text": "avoid-spinlock"
              },
              "fullDescription": {
                "text": "avoid-spinlock"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "index": 44,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Malloc",
              "name": "clang-analyzer-unix.Malloc",
              "shortDescription": {
                "text": "Malloc"
              },
              "fullDescription": {
                "text": "Malloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-avoid-capturing-lambda-coroutines",
              "name": "cppcoreguidelines-avoid-capturing-lambda-coroutines",
              "shortDescription": {
                "text": "avoid-capturing-lambda-coroutines"
              },
              "fullDescription": {
                "text": "avoid-capturing-lambda-coroutines"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-dealloc-in-category",
              "name": "objc-dealloc-in-category",
              "shortDescription": {
                "text": "dealloc-in-category"
              },
              "fullDescription": {
                "text": "dealloc-in-category"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-11-0-1",
              "name": "clion-misra-cpp2008-11-0-1",
              "shortDescription": {
                "text": "misra-cpp2008-11-0-1"
              },
              "fullDescription": {
                "text": "misra-cpp2008-11-0-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-15-2",
              "name": "clion-misra-c2012-15-2",
              "shortDescription": {
                "text": "misra-c2012-15-2"
              },
              "fullDescription": {
                "text": "misra-c2012-15-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-env33-c",
              "name": "cert-env33-c",
              "shortDescription": {
                "text": "env33-c"
              },
              "fullDescription": {
                "text": "env33-c"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-msc50-cpp",
              "name": "cert-msc50-cpp",
              "shortDescription": {
                "text": "msc50-cpp"
              },
              "fullDescription": {
                "text": "msc50-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-narrowing-conversions",
              "name": "bugprone-narrowing-conversions",
              "shortDescription": {
                "text": "narrowing-conversions"
              },
              "fullDescription": {
                "text": "narrowing-conversions"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google-readability-function-size",
              "name": "google-readability-function-size",
              "shortDescription": {
                "text": "readability-function-size"
              },
              "fullDescription": {
                "text": "readability-function-size"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "index": 5,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.decodeValueOfObjCType",
              "name": "clang-analyzer-security.insecureAPI.decodeValueOfObjCType",
              "shortDescription": {
                "text": "decodeValueOfObjCType"
              },
              "fullDescription": {
                "text": "decodeValueOfObjCType"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-18-7",
              "name": "clion-misra-c2012-18-7",
              "shortDescription": {
                "text": "misra-c2012-18-7"
              },
              "fullDescription": {
                "text": "misra-c2012-18-7"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-7-1",
              "name": "clion-misra-c2012-7-1",
              "shortDescription": {
                "text": "misra-c2012-7-1"
              },
              "fullDescription": {
                "text": "misra-c2012-7-1"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-lambda-function-name",
              "name": "bugprone-lambda-function-name",
              "shortDescription": {
                "text": "lambda-function-name"
              },
              "fullDescription": {
                "text": "lambda-function-name"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.cplusplus.UninitializedObject",
              "name": "clang-analyzer-optin.cplusplus.UninitializedObject",
              "shortDescription": {
                "text": "UninitializedObject"
              },
              "fullDescription": {
                "text": "UninitializedObject"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "index": 63,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-use-anyofallof",
              "name": "readability-use-anyofallof",
              "shortDescription": {
                "text": "use-anyofallof"
              },
              "fullDescription": {
                "text": "use-anyofallof"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-default-member-init",
              "name": "modernize-use-default-member-init",
              "shortDescription": {
                "text": "use-default-member-init"
              },
              "fullDescription": {
                "text": "use-default-member-init"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-function-cognitive-complexity",
              "name": "readability-function-cognitive-complexity",
              "shortDescription": {
                "text": "function-cognitive-complexity"
              },
              "fullDescription": {
                "text": "function 'os_libc_printf' has cognitive complexity of 27 (threshold 25)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-avoid-c-arrays",
              "name": "modernize-avoid-c-arrays",
              "shortDescription": {
                "text": "avoid-c-arrays"
              },
              "fullDescription": {
                "text": "avoid-c-arrays"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-qualified-auto",
              "name": "readability-qualified-auto",
              "shortDescription": {
                "text": "qualified-auto"
              },
              "fullDescription": {
                "text": "qualified-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-misplaced-const",
              "name": "misc-misplaced-const",
              "shortDescription": {
                "text": "misplaced-const"
              },
              "fullDescription": {
                "text": "misplaced-const"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-parent-virtual-call",
              "name": "bugprone-parent-virtual-call",
              "shortDescription": {
                "text": "parent-virtual-call"
              },
              "fullDescription": {
                "text": "parent-virtual-call"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia-multiple-inheritance",
              "name": "fuchsia-multiple-inheritance",
              "shortDescription": {
                "text": "multiple-inheritance"
              },
              "fullDescription": {
                "text": "multiple-inheritance"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "index": 13,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-9",
              "name": "clion-misra-cpp2008-5-2-9",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-9"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-9"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-7-4-3",
              "name": "clion-misra-cpp2008-7-4-3",
              "shortDescription": {
                "text": "misra-cpp2008-7-4-3"
              },
              "fullDescription": {
                "text": "misra-cpp2008-7-4-3"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability-avoid-return-with-void-value",
              "name": "readability-avoid-return-with-void-value",
              "shortDescription": {
                "text": "avoid-return-with-void-value"
              },
              "fullDescription": {
                "text": "avoid-return-with-void-value"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "index": 12,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.MIG",
              "name": "clang-analyzer-osx.MIG",
              "shortDescription": {
                "text": "MIG"
              },
              "fullDescription": {
                "text": "MIG"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "index": 25,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-optin.performance.Padding",
              "name": "clang-analyzer-optin.performance.Padding",
              "shortDescription": {
                "text": "Padding"
              },
              "fullDescription": {
                "text": "Padding"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "index": 47,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-suspicious-missing-comma",
              "name": "bugprone-suspicious-missing-comma",
              "shortDescription": {
                "text": "suspicious-missing-comma"
              },
              "fullDescription": {
                "text": "suspicious-missing-comma"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-no-array-decay",
              "name": "hicpp-no-array-decay",
              "shortDescription": {
                "text": "no-array-decay"
              },
              "fullDescription": {
                "text": "no-array-decay"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-2-8",
              "name": "clion-misra-cpp2008-5-2-8",
              "shortDescription": {
                "text": "misra-cpp2008-5-2-8"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-2-8"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.Vfork",
              "name": "clang-analyzer-unix.Vfork",
              "shortDescription": {
                "text": "Vfork"
              },
              "fullDescription": {
                "text": "Vfork"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-5-3-2",
              "name": "clion-misra-cpp2008-5-3-2",
              "shortDescription": {
                "text": "misra-cpp2008-5-3-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-5-3-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-prefer-register-over-unsigned",
              "name": "llvm-prefer-register-over-unsigned",
              "shortDescription": {
                "text": "prefer-register-over-unsigned"
              },
              "fullDescription": {
                "text": "prefer-register-over-unsigned"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc-assert-equals",
              "name": "objc-assert-equals",
              "shortDescription": {
                "text": "assert-equals"
              },
              "fullDescription": {
                "text": "assert-equals"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "index": 40,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.core.SizeofPtr",
              "name": "clang-analyzer-alpha.core.SizeofPtr",
              "shortDescription": {
                "text": "SizeofPtr"
              },
              "fullDescription": {
                "text": "SizeofPtr"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "index": 4,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.Dealloc",
              "name": "clang-analyzer-osx.cocoa.Dealloc",
              "shortDescription": {
                "text": "Dealloc"
              },
              "fullDescription": {
                "text": "Dealloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-6-2",
              "name": "clion-misra-cpp2008-6-6-2",
              "shortDescription": {
                "text": "misra-cpp2008-6-6-2"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-6-2"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-exception-baseclass",
              "name": "hicpp-exception-baseclass",
              "shortDescription": {
                "text": "exception-baseclass"
              },
              "fullDescription": {
                "text": "exception-baseclass"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp-multiway-paths-covered",
              "name": "hicpp-multiway-paths-covered",
              "shortDescription": {
                "text": "multiway-paths-covered"
              },
              "fullDescription": {
                "text": "multiway-paths-covered"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "index": 15,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-cpp2008-6-5-4",
              "name": "clion-misra-cpp2008-6-5-4",
              "shortDescription": {
                "text": "misra-cpp2008-6-5-4"
              },
              "fullDescription": {
                "text": "misra-cpp2008-6-5-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-confusable-identifiers",
              "name": "misc-confusable-identifiers",
              "shortDescription": {
                "text": "confusable-identifiers"
              },
              "fullDescription": {
                "text": "confusable-identifiers"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.fuchsia.Lock",
              "name": "clang-analyzer-alpha.fuchsia.Lock",
              "shortDescription": {
                "text": "Lock"
              },
              "fullDescription": {
                "text": "Lock"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.fuchsia",
                    "index": 66,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-security.insecureAPI.bcopy",
              "name": "clang-analyzer-security.insecureAPI.bcopy",
              "shortDescription": {
                "text": "bcopy"
              },
              "fullDescription": {
                "text": "bcopy"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "index": 14,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-misra-c2012-14-4",
              "name": "clion-misra-c2012-14-4",
              "shortDescription": {
                "text": "misra-c2012-14-4"
              },
              "fullDescription": {
                "text": "misra-c2012-14-4"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil-duration-unnecessary-conversion",
              "name": "abseil-duration-unnecessary-conversion",
              "shortDescription": {
                "text": "duration-unnecessary-conversion"
              },
              "fullDescription": {
                "text": "duration-unnecessary-conversion"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "index": 22,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-unconstrained-variable-type",
              "name": "clion-unconstrained-variable-type",
              "shortDescription": {
                "text": "unconstrained-variable-type"
              },
              "fullDescription": {
                "text": "unconstrained-variable-type"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-unix.MismatchedDeallocator",
              "name": "clang-analyzer-unix.MismatchedDeallocator",
              "shortDescription": {
                "text": "MismatchedDeallocator"
              },
              "fullDescription": {
                "text": "MismatchedDeallocator"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "index": 27,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-no-suspend-with-lock",
              "name": "cppcoreguidelines-no-suspend-with-lock",
              "shortDescription": {
                "text": "no-suspend-with-lock"
              },
              "fullDescription": {
                "text": "no-suspend-with-lock"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone-bad-signal-to-kill-thread",
              "name": "bugprone-bad-signal-to-kill-thread",
              "shortDescription": {
                "text": "bad-signal-to-kill-thread"
              },
              "fullDescription": {
                "text": "bad-signal-to-kill-thread"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "index": 10,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.VLASize",
              "name": "clang-analyzer-core.VLASize",
              "shortDescription": {
                "text": "VLASize"
              },
              "fullDescription": {
                "text": "VLASize"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines-pro-bounds-constant-array-index",
              "name": "cppcoreguidelines-pro-bounds-constant-array-index",
              "shortDescription": {
                "text": "pro-bounds-constant-array-index"
              },
              "fullDescription": {
                "text": "pro-bounds-constant-array-index"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "index": 6,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm-qualified-auto",
              "name": "llvm-qualified-auto",
              "shortDescription": {
                "text": "qualified-auto"
              },
              "fullDescription": {
                "text": "qualified-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "index": 18,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion-empty-decl-or-stmt",
              "name": "clion-empty-decl-or-stmt",
              "shortDescription": {
                "text": "empty-decl-or-stmt"
              },
              "fullDescription": {
                "text": "empty-decl-or-stmt"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "index": 3,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
              "name": "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
              "shortDescription": {
                "text": "RunLoopAutoreleaseLeak"
              },
              "fullDescription": {
                "text": "RunLoopAutoreleaseLeak"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize-use-auto",
              "name": "modernize-use-auto",
              "shortDescription": {
                "text": "use-auto"
              },
              "fullDescription": {
                "text": "use-auto"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "index": 11,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-core.CallAndMessage",
              "name": "clang-analyzer-core.CallAndMessage",
              "shortDescription": {
                "text": "CallAndMessage"
              },
              "fullDescription": {
                "text": "CallAndMessage"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "index": 37,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err58-cpp",
              "name": "cert-err58-cpp",
              "shortDescription": {
                "text": "err58-cpp"
              },
              "fullDescription": {
                "text": "err58-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-alpha.security.taint.TaintPropagation",
              "name": "clang-analyzer-alpha.security.taint.TaintPropagation",
              "shortDescription": {
                "text": "TaintPropagation"
              },
              "fullDescription": {
                "text": "TaintPropagation"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.taint",
                    "index": 67,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clang-analyzer-osx.cocoa.SuperDealloc",
              "name": "clang-analyzer-osx.cocoa.SuperDealloc",
              "shortDescription": {
                "text": "SuperDealloc"
              },
              "fullDescription": {
                "text": "SuperDealloc"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "index": 17,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert-err61-cpp",
              "name": "cert-err61-cpp",
              "shortDescription": {
                "text": "err61-cpp"
              },
              "fullDescription": {
                "text": "err61-cpp"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "index": 16,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc-throw-by-value-catch-by-reference",
              "name": "misc-throw-by-value-catch-by-reference",
              "shortDescription": {
                "text": "throw-by-value-catch-by-reference"
              },
              "fullDescription": {
                "text": "throw-by-value-catch-by-reference"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "index": 28,
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "taxa": [
            {
              "id": "C",
              "name": "C"
            },
            {
              "id": "cplusplus",
              "name": "cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security",
              "name": "alpha.security",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "clion",
              "name": "clion",
              "relationships": [
                {
                  "target": {
                    "id": "clion",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.core",
              "name": "alpha.core",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "google",
              "name": "google",
              "relationships": [
                {
                  "target": {
                    "id": "google",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cppcoreguidelines",
              "name": "cppcoreguidelines",
              "relationships": [
                {
                  "target": {
                    "id": "cppcoreguidelines",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.cplusplus",
              "name": "alpha.cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvmlibc",
              "name": "llvmlibc",
              "relationships": [
                {
                  "target": {
                    "id": "llvmlibc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "performance",
              "name": "performance",
              "relationships": [
                {
                  "target": {
                    "id": "performance",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "bugprone",
              "name": "bugprone",
              "relationships": [
                {
                  "target": {
                    "id": "bugprone",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "modernize",
              "name": "modernize",
              "relationships": [
                {
                  "target": {
                    "id": "modernize",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "readability",
              "name": "readability",
              "relationships": [
                {
                  "target": {
                    "id": "readability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "fuchsia",
              "name": "fuchsia",
              "relationships": [
                {
                  "target": {
                    "id": "fuchsia",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security.insecureAPI",
              "name": "security.insecureAPI",
              "relationships": [
                {
                  "target": {
                    "id": "security.insecureAPI",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "hicpp",
              "name": "hicpp",
              "relationships": [
                {
                  "target": {
                    "id": "hicpp",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "cert",
              "name": "cert",
              "relationships": [
                {
                  "target": {
                    "id": "cert",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.cocoa",
              "name": "osx.cocoa",
              "relationships": [
                {
                  "target": {
                    "id": "osx.cocoa",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "llvm",
              "name": "llvm",
              "relationships": [
                {
                  "target": {
                    "id": "llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.osx.cocoa.localizability",
              "name": "alpha.osx.cocoa.localizability",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa.localizability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "zircon",
              "name": "zircon",
              "relationships": [
                {
                  "target": {
                    "id": "zircon",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "boost",
              "name": "boost",
              "relationships": [
                {
                  "target": {
                    "id": "boost",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "abseil",
              "name": "abseil",
              "relationships": [
                {
                  "target": {
                    "id": "abseil",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.unix",
              "name": "alpha.unix",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.osx.cocoa",
              "name": "alpha.osx.cocoa",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.osx.cocoa",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx",
              "name": "osx",
              "relationships": [
                {
                  "target": {
                    "id": "osx",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.mpi",
              "name": "optin.mpi",
              "relationships": [
                {
                  "target": {
                    "id": "optin.mpi",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "unix",
              "name": "unix",
              "relationships": [
                {
                  "target": {
                    "id": "unix",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "misc",
              "name": "misc",
              "relationships": [
                {
                  "target": {
                    "id": "misc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "android",
              "name": "android",
              "relationships": [
                {
                  "target": {
                    "id": "android",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.coreFoundation",
              "name": "osx.coreFoundation",
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "unix.cstring",
              "name": "unix.cstring",
              "relationships": [
                {
                  "target": {
                    "id": "unix.cstring",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling.llvm",
              "name": "apiModeling.llvm",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "altera",
              "name": "altera",
              "relationships": [
                {
                  "target": {
                    "id": "altera",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "mpi",
              "name": "mpi",
              "relationships": [
                {
                  "target": {
                    "id": "mpi",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core.uninitialized",
              "name": "core.uninitialized",
              "relationships": [
                {
                  "target": {
                    "id": "core.uninitialized",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core.builtin",
              "name": "core.builtin",
              "relationships": [
                {
                  "target": {
                    "id": "core.builtin",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "core",
              "name": "core",
              "relationships": [
                {
                  "target": {
                    "id": "core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "valist",
              "name": "valist",
              "relationships": [
                {
                  "target": {
                    "id": "valist",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "webkit",
              "name": "webkit",
              "relationships": [
                {
                  "target": {
                    "id": "webkit",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "objc",
              "name": "objc",
              "relationships": [
                {
                  "target": {
                    "id": "objc",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.llvm",
              "name": "alpha.llvm",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.llvm",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "nullability",
              "name": "nullability",
              "relationships": [
                {
                  "target": {
                    "id": "nullability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "concurrency",
              "name": "concurrency",
              "relationships": [
                {
                  "target": {
                    "id": "concurrency",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "darwin",
              "name": "darwin",
              "relationships": [
                {
                  "target": {
                    "id": "darwin",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "deadcode",
              "name": "deadcode",
              "relationships": [
                {
                  "target": {
                    "id": "deadcode",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.webkit",
              "name": "alpha.webkit",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.webkit",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.performance",
              "name": "optin.performance",
              "relationships": [
                {
                  "target": {
                    "id": "optin.performance",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.core",
              "name": "optin.core",
              "relationships": [
                {
                  "target": {
                    "id": "optin.core",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "portability",
              "name": "portability",
              "relationships": [
                {
                  "target": {
                    "id": "portability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security",
              "name": "security",
              "relationships": [
                {
                  "target": {
                    "id": "security",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling.google",
              "name": "apiModeling.google",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling.google",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "security.cert.env",
              "name": "security.cert.env",
              "relationships": [
                {
                  "target": {
                    "id": "security.cert.env",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.clone",
              "name": "alpha.clone",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.clone",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.nondeterminism",
              "name": "alpha.nondeterminism",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.nondeterminism",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.osx.cocoa.localizability",
              "name": "optin.osx.cocoa.localizability",
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx.cocoa.localizability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.portability",
              "name": "optin.portability",
              "relationships": [
                {
                  "target": {
                    "id": "optin.portability",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "openmp",
              "name": "openmp",
              "relationships": [
                {
                  "target": {
                    "id": "openmp",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.unix.cstring",
              "name": "alpha.unix.cstring",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.unix.cstring",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "osx.coreFoundation.containers",
              "name": "osx.coreFoundation.containers",
              "relationships": [
                {
                  "target": {
                    "id": "osx.coreFoundation.containers",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.deadcode",
              "name": "alpha.deadcode",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.deadcode",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.osx",
              "name": "optin.osx",
              "relationships": [
                {
                  "target": {
                    "id": "optin.osx",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security.cert.pos",
              "name": "alpha.security.cert.pos",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.cert.pos",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "optin.cplusplus",
              "name": "optin.cplusplus",
              "relationships": [
                {
                  "target": {
                    "id": "optin.cplusplus",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "apiModeling",
              "name": "apiModeling",
              "relationships": [
                {
                  "target": {
                    "id": "apiModeling",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "linuxkernel",
              "name": "linuxkernel",
              "relationships": [
                {
                  "target": {
                    "id": "linuxkernel",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.fuchsia",
              "name": "alpha.fuchsia",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.fuchsia",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "alpha.security.taint",
              "name": "alpha.security.taint",
              "relationships": [
                {
                  "target": {
                    "id": "alpha.security.taint",
                    "toolComponent": {
                      "name": "clang-tidy"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/LandryNorris/os.git",
          "revisionId": "59783374841fb9e629d424caf73f8b28952efe24",
          "branch": "chore/use-qodana",
          "properties": {
            "repoUrl": "https://github.com/LandryNorris/os.git",
            "lastAuthorName": "Landry Norris",
            "vcsType": "Git",
            "lastAuthorEmail": "37489471+LandryNorris@users.noreply.github.com"
          }
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "libc/src/c/stdio/printf.c"
          },
          "length": 4096,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libk/src/c/file/buffer.c"
          },
          "length": 2208,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/stdio/puts.c"
          },
          "length": 129,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/stdio/stdbuf.c"
          },
          "length": 164,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/memutils.c"
          },
          "length": 1301,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strcat.c"
          },
          "length": 218,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strcmp.c"
          },
          "length": 229,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/src/c/string/strlen.c"
          },
          "length": 153,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/test/src/stdio_tests.cpp"
          },
          "length": 3668,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libc/test/src/string_tests.cpp"
          },
          "length": 1213,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "libk/test/src/buffer_test.cpp"
          },
          "length": 2688,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/acpi/rsdp.c"
          },
          "length": 847,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/cpuid/cpuid.c"
          },
          "length": 766,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/file/createbuffer.c"
          },
          "length": 363,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/font/psf/defaultfont.c"
          },
          "length": 59434,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/fs/ext2/ext2.c"
          },
          "length": 8057,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/fs/vfs/vfs.c"
          },
          "length": 1555,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/gdt/gdt.c"
          },
          "length": 2417,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/graphics/canvas.c"
          },
          "length": 2369,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/include/idt.h"
          },
          "length": 520,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/idt/idt.c"
          },
          "length": 3333,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/interrupts/keyboard.c"
          },
          "length": 1782,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/isr/exception.c"
          },
          "length": 1319,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/isr/interrupt.c"
          },
          "length": 581,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/kernel.c"
          },
          "length": 2646,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/bucket/malloc.c"
          },
          "length": 13715,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/malloc.c"
          },
          "length": 1247,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/page.c"
          },
          "length": 8017,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/mem/pmm.c"
          },
          "length": 1351,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/multiboot2/multiboot2.c"
          },
          "length": 1424,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/initialize.c"
          },
          "length": 3587,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/read.c"
          },
          "length": 1545,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/ide/write.c"
          },
          "length": 1645,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/read.c"
          },
          "length": 1738,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pci/scan.c"
          },
          "length": 2296,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/pic/pic.c"
          },
          "length": 1692,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/portio/portio.c"
          },
          "length": 816,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/serial/serial.c"
          },
          "length": 1978,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/terminal/initialize.c"
          },
          "length": 330,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/terminal/terminal_state.c"
          },
          "length": 210,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/src/c/terminal/write.c"
          },
          "length": 2099,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/cpuid_mock.cpp"
          },
          "length": 1005,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/cpuid_test.cpp"
          },
          "length": 990,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/idt_test.cpp"
          },
          "length": 1792,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/portio_mock.cpp"
          },
          "length": 1390,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/rsdp.cpp"
          },
          "length": 1510,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "kernel/test/src/serial_test.cpp"
          },
          "length": 2971,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
          },
          "length": 2107,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        },
        {
          "location": {
            "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
          },
          "length": 2201,
          "roles": [
            "resultFile"
          ],
          "mimeType": "text/plain"
        }
      ],
      "results": [
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 124,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 9,
                  "charOffset": 66,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle negative numbers\n    if (num < 0) {\n        putchar('-');\n        num = -num;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b970c9fa76faaa0911fb04cb35c740c8ad3f09e93a66f46593dd13f8e1051cb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 9,
                  "charOffset": 223,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 9,
                  "charOffset": 165,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle zero separately\n    if (num == 0) {\n        putchar('0');\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d234aac4d3ad09ee98c4b695cc7bcc9cb74fbbd8dfdc8d2cb2f941c8c1d426b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 38,
                  "charOffset": 355,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 38,
                  "charOffset": 260,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long integralPart = (long) num;\n    long divisor = 1;\n    while (divisor <= integralPart / 10) {\n        divisor *= 10;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00e0b155d638c271731d9d55dadcf02a0182395b5f51f70e13927b6657d955a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "charOffset": 380,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 20,
                  "charOffset": 296,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long divisor = 1;\n    while (divisor <= integralPart / 10) {\n        divisor *= 10;\n    }\n    while (divisor > 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2dd8d001f4e7d59364a9eca6ab0e208e624db7115f13268c94c38a4f7b22b79"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "charOffset": 436,
                  "charLength": 12,
                  "snippet": {
                    "text": "integralPart"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 21,
                  "charOffset": 384,
                  "charLength": 12,
                  "snippet": {
                    "text": "    }\n    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdffb9b9be1999a34433056b009b849e32dbb628e81b4cb40b140bc3f194840b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "charOffset": 468,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 9,
                  "charOffset": 390,
                  "charLength": 7,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cbfed4b814b398e73ec84e18412ae400f0b313f04bc43367655c09988404e3f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'int' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 476,
                  "charLength": 5,
                  "snippet": {
                    "text": "digit"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 390,
                  "charLength": 5,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0352a287934406bc327c378395aa688064c04de2bf2cfea013c190efbe529622"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 20,
                  "charOffset": 542,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 20,
                  "charOffset": 460,
                  "charLength": 2,
                  "snippet": {
                    "text": "        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ba7235cf890d59b830f4400cb10ae4b08d98dfe652e92a5b182e1f84962e4b3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 816,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 673,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for (int i = (numDigits - 1) * 4; i >= 0; i -= 4) {\n        // Get the current hex digit value\n        uint32_t hex_digit = (value >> i) & 0xF;\n\n        // Convert the hex digit to its ASCII representation"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "658d48dea21ef90b9b25d38934e83e17b1efa5ab96999c8c59d52074cc68a9de"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 41,
                  "charOffset": 923,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 41,
                  "charOffset": 821,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        // Convert the hex digit to its ASCII representation\n        uint32_t hex_char = hex_digit < 10 ? '0' + hex_digit : 'A' + (hex_digit - 10);\n\n        // Print the hex digit"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e09c0759f2c0d2eb0ccaa703befd243db7d46d619d9007778be116268ab5a22d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 83,
                  "charOffset": 965,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 83,
                  "charOffset": 821,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        // Convert the hex digit to its ASCII representation\n        uint32_t hex_char = hex_digit < 10 ? '0' + hex_digit : 'A' + (hex_digit - 10);\n\n        // Print the hex digit"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1043c468984a551ab4b599fafc2b46350ec4f85ec96674e68add24fe13227861"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1010,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 970,
                  "charLength": 7,
                  "snippet": {
                    "text": "\n        // Print the hex digit\n        putchar((int) hex_char);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d05a5f27ec40ed056301f7a3a7ab26fe1d05eccfcc9797f43a0a95d975dd2a54"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'int' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1018,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 970,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n        // Print the hex digit\n        putchar((int) hex_char);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "343e176fd3b5e5828cca930c546fff318cb761735a0c8d94d83cbaedd66bcb32"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printDouble' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "charOffset": 1049,
                  "charLength": 11,
                  "snippet": {
                    "text": "printDouble"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 6,
                  "charOffset": 1041,
                  "charLength": 11,
                  "snippet": {
                    "text": "}\n\nvoid printDouble(double num, int minDigitsBeforeDecimal, int minDigitsAfterDecimal) {\n    // Handle negative numbers\n    if (num < 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3f0c1e70ecc334be966fe72dbb3d1a31283563972bbd275e61d2a6b3faf7451"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 9,
                  "charOffset": 1188,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 9,
                  "charOffset": 1130,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle negative numbers\n    if (num < 0) {\n        putchar('-');\n        num = -num;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40c3e8b4474309e4363f73e537eed7cb947978b5517ce37d79dc6a95a3952edc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 9,
                  "charOffset": 1287,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1229,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle zero separately\n    if (num == 0) {\n        putchar('0');\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0ee021fca412230fca999b03c3c9090df87d16196d387684b1c606328174546"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 1534,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 1423,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long temp = (long) num;  // Typecast to integer for counting digits\n    while (temp > 0) {\n        temp /= 10;\n        numDigitsBeforeDecimal++;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20d577a3c6f903f1767cbe4cf68a7e80f8a02f03430b40fee680a3b2bc5ddb20"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 22,
                  "charOffset": 1632,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 22,
                  "charOffset": 1578,
                  "snippet": {
                    "text": "\n    long integral = (long) num;\n    if (integral < 0) integral *= -1;\n\n    // Print leading zeroes"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f26e45e48132c49910001f17b4d886df9458cbb1304bb7fb2f9c7205b43aa93"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 13,
                  "charOffset": 1860,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 13,
                  "charOffset": 1737,
                  "charLength": 7,
                  "snippet": {
                    "text": "        int leadingZeros = minDigitsBeforeDecimal - numDigitsBeforeDecimal;\n        while (leadingZeros > 0) {\n            putchar('0');\n            leadingZeros--;\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8bb44e79b9072eb457e1ff3eb8411fcc7fb030fa249a4ab43d49204a0dad733"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 5,
                  "charOffset": 1990,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 1961,
                  "charLength": 7,
                  "snippet": {
                    "text": "    printInt(integral);\n\n    putchar('.');\n\n    // Print digits after the decimal point"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be1584cec7192d185fc6ee9d94a465988f9a11fdc348c40be46629bced241934"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 16,
                  "charOffset": 2159,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 16,
                  "charOffset": 2049,
                  "charLength": 2,
                  "snippet": {
                    "text": "    int numDigitsAfterDecimal = minDigitsAfterDecimal;\n    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "863bea16dda04520b082ff5b393789316e3f0f4b3aa453a80e4825f24d93941b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 18,
                  "charOffset": 2180,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 18,
                  "charOffset": 2104,
                  "charLength": 1,
                  "snippet": {
                    "text": "    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f739ebc72c28b9675c0fabe8bcc9fdbeb5b79c4eab6b23a79a07c32b5753f31"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 32,
                  "charOffset": 2194,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 32,
                  "charOffset": 2104,
                  "charLength": 2,
                  "snippet": {
                    "text": "    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "491eca2a57c8d673a463212620735f71f8cd996e3c7860709e13cbeebf3966c0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 21,
                  "charOffset": 2225,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 21,
                  "charOffset": 2144,
                  "snippet": {
                    "text": "        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);\n        numDigitsAfterDecimal--;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43d1625015e3ce8a2a6cb3f39276e29af07107f7d2d154d87bfba149782e1fd2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "charOffset": 2274,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 2163,
                  "charLength": 7,
                  "snippet": {
                    "text": "        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);\n        numDigitsAfterDecimal--;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb62f2353b3946a3f848fde9e7bfaaaec3832bca1f4031115a784295c43b240b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' has cognitive complexity of 27 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f89eb112d00f1eaaedeb3e14f1e33985e8892cd30ec286b8a662c60e7ee6c66d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' has cognitive complexity of 27 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "336e9c9ccf0c88a2bb5c1002bdab1bf6083946cf20269d05fd7004e4fca9f8f6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c190db2e82c03f5f69bf10bd94a351b5a1f3be892ed591def3b100c6708b5170"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faa8f9a5d59a82d6d2e60e3bbd97c88c0fb333f6910789e14f6593e749a3b4fa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'parameters' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 13,
                  "charOffset": 2384,
                  "charLength": 10,
                  "snippet": {
                    "text": "parameters"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 13,
                  "charOffset": 2327,
                  "charLength": 10,
                  "snippet": {
                    "text": "\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2900a8e506d1acfe05f8760b271b333851a1fa97e16dfea7f2cc2e513350a5e6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'continue'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 11,
                  "charOffset": 2665,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 11,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "            isParsingFormat = 1;\n            continue;\n        } else if (!isEscaped && c == '\\\\') {\n            isEscaped = 1;\n            continue;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e96970cfcc634e6b6f8e28925b8ebde4a731358596a055a090bd6706d1d6025"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "charOffset": 2836,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 17,
                  "charOffset": 2761,
                  "charLength": 7,
                  "snippet": {
                    "text": "        if (isParsingFormat) {\n            if (c == '%') {\n                putchar('%');\n                isParsingFormat = 0;\n            } else if (c == 'd') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36d420f9a1e93111c32089ad1779e117dea9fe580c8483968f9afbd001583d40"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 35,
                  "charOffset": 3161,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 35,
                  "charOffset": 3037,
                  "charLength": 1,
                  "snippet": {
                    "text": "            } else if (c == 'f') {\n                double d = va_arg(parameters, double);\n                printDouble(d, 1, 6);\n                isParsingFormat = 0;\n            } else if (c == 's') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d150bad7f651b3a264677dec03d56fa944f1a71edd0c367393ee689298b5ae6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 17,
                  "charOffset": 3584,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 17,
                  "charOffset": 3475,
                  "charLength": 7,
                  "snippet": {
                    "text": "            } else if (c == 'c') {\n                char character = va_arg(parameters, int);\n                putchar(character);\n                isParsingFormat = 0;\n            } else if (c == 'x') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "869a50fa1f8c9d98e1c2f5c3448760f57bb12a8f4f41e10d30ecdee2cbc3264b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "charOffset": 3900,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 17,
                  "charOffset": 3823,
                  "charLength": 7,
                  "snippet": {
                    "text": "        } else if (isEscaped) {\n            if (c == '\\\\') {\n                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f56829f676d86e6ea9e62b6b702b005060e614f243f8fda364e2fab257cc4ba3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "charOffset": 3966,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 17,
                  "charOffset": 3884,
                  "charLength": 7,
                  "snippet": {
                    "text": "                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');\n            }\n            isEscaped = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39f5beba0e62b2471940bf3a249e484f2f55673200ab254ed1f20d79c659b615"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 13,
                  "charOffset": 4051,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 13,
                  "charOffset": 3995,
                  "charLength": 7,
                  "snippet": {
                    "text": "            isEscaped = 0;\n        } else {\n            putchar(c);\n        }\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78f2ba652f4b763ed046677fdbb6ddb783bebb95b4fbd9c5488ced9b4af16394"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-valist.Unterminated",
          "ruleIndex": 327,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Initialized va_list 'parameters' is leaked"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 12,
                  "charOffset": 4091,
                  "charLength": 1,
                  "snippet": {
                    "text": "0"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 12,
                  "charOffset": 4073,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return 0;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dff64426fe6362c8e3b4959b0fd909866e1cd9fc168d2943ea4bed9fbd9e3a39"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 124,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 9,
                  "charOffset": 66,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle negative numbers\n    if (num < 0) {\n        putchar('-');\n        num = -num;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b970c9fa76faaa0911fb04cb35c740c8ad3f09e93a66f46593dd13f8e1051cb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 9,
                  "charOffset": 223,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 9,
                  "charOffset": 165,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle zero separately\n    if (num == 0) {\n        putchar('0');\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d234aac4d3ad09ee98c4b695cc7bcc9cb74fbbd8dfdc8d2cb2f941c8c1d426b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 38,
                  "charOffset": 355,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 38,
                  "charOffset": 260,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long integralPart = (long) num;\n    long divisor = 1;\n    while (divisor <= integralPart / 10) {\n        divisor *= 10;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00e0b155d638c271731d9d55dadcf02a0182395b5f51f70e13927b6657d955a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "charOffset": 380,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 20,
                  "charOffset": 296,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long divisor = 1;\n    while (divisor <= integralPart / 10) {\n        divisor *= 10;\n    }\n    while (divisor > 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2dd8d001f4e7d59364a9eca6ab0e208e624db7115f13268c94c38a4f7b22b79"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "charOffset": 436,
                  "charLength": 12,
                  "snippet": {
                    "text": "integralPart"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 21,
                  "charOffset": 384,
                  "charLength": 12,
                  "snippet": {
                    "text": "    }\n    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdffb9b9be1999a34433056b009b849e32dbb628e81b4cb40b140bc3f194840b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "charOffset": 468,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 9,
                  "charOffset": 390,
                  "charLength": 7,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cbfed4b814b398e73ec84e18412ae400f0b313f04bc43367655c09988404e3f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'int' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 476,
                  "charLength": 5,
                  "snippet": {
                    "text": "digit"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 390,
                  "charLength": 5,
                  "snippet": {
                    "text": "    while (divisor > 0) {\n        int digit = integralPart / divisor;\n        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0352a287934406bc327c378395aa688064c04de2bf2cfea013c190efbe529622"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 20,
                  "charOffset": 542,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 20,
                  "charOffset": 460,
                  "charLength": 2,
                  "snippet": {
                    "text": "        putchar(digit + '0');\n        integralPart %= divisor;\n        divisor /= 10;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ba7235cf890d59b830f4400cb10ae4b08d98dfe652e92a5b182e1f84962e4b3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 816,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 673,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for (int i = (numDigits - 1) * 4; i >= 0; i -= 4) {\n        // Get the current hex digit value\n        uint32_t hex_digit = (value >> i) & 0xF;\n\n        // Convert the hex digit to its ASCII representation"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "658d48dea21ef90b9b25d38934e83e17b1efa5ab96999c8c59d52074cc68a9de"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 41,
                  "charOffset": 923,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 41,
                  "charOffset": 821,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        // Convert the hex digit to its ASCII representation\n        uint32_t hex_char = hex_digit < 10 ? '0' + hex_digit : 'A' + (hex_digit - 10);\n\n        // Print the hex digit"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e09c0759f2c0d2eb0ccaa703befd243db7d46d619d9007778be116268ab5a22d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 83,
                  "charOffset": 965,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 83,
                  "charOffset": 821,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        // Convert the hex digit to its ASCII representation\n        uint32_t hex_char = hex_digit < 10 ? '0' + hex_digit : 'A' + (hex_digit - 10);\n\n        // Print the hex digit"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1043c468984a551ab4b599fafc2b46350ec4f85ec96674e68add24fe13227861"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1010,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 970,
                  "charLength": 7,
                  "snippet": {
                    "text": "\n        // Print the hex digit\n        putchar((int) hex_char);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d05a5f27ec40ed056301f7a3a7ab26fe1d05eccfcc9797f43a0a95d975dd2a54"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'int' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1018,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 970,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n        // Print the hex digit\n        putchar((int) hex_char);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "343e176fd3b5e5828cca930c546fff318cb761735a0c8d94d83cbaedd66bcb32"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printDouble' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "charOffset": 1049,
                  "charLength": 11,
                  "snippet": {
                    "text": "printDouble"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 6,
                  "charOffset": 1041,
                  "charLength": 11,
                  "snippet": {
                    "text": "}\n\nvoid printDouble(double num, int minDigitsBeforeDecimal, int minDigitsAfterDecimal) {\n    // Handle negative numbers\n    if (num < 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3f0c1e70ecc334be966fe72dbb3d1a31283563972bbd275e61d2a6b3faf7451"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 9,
                  "charOffset": 1188,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 9,
                  "charOffset": 1130,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle negative numbers\n    if (num < 0) {\n        putchar('-');\n        num = -num;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40c3e8b4474309e4363f73e537eed7cb947978b5517ce37d79dc6a95a3952edc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 9,
                  "charOffset": 1287,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1229,
                  "charLength": 7,
                  "snippet": {
                    "text": "    // Handle zero separately\n    if (num == 0) {\n        putchar('0');\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0ee021fca412230fca999b03c3c9090df87d16196d387684b1c606328174546"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 1534,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 1423,
                  "charLength": 2,
                  "snippet": {
                    "text": "    long temp = (long) num;  // Typecast to integer for counting digits\n    while (temp > 0) {\n        temp /= 10;\n        numDigitsBeforeDecimal++;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20d577a3c6f903f1767cbe4cf68a7e80f8a02f03430b40fee680a3b2bc5ddb20"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 22,
                  "charOffset": 1632,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 22,
                  "charOffset": 1578,
                  "snippet": {
                    "text": "\n    long integral = (long) num;\n    if (integral < 0) integral *= -1;\n\n    // Print leading zeroes"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f26e45e48132c49910001f17b4d886df9458cbb1304bb7fb2f9c7205b43aa93"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 13,
                  "charOffset": 1860,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 13,
                  "charOffset": 1737,
                  "charLength": 7,
                  "snippet": {
                    "text": "        int leadingZeros = minDigitsBeforeDecimal - numDigitsBeforeDecimal;\n        while (leadingZeros > 0) {\n            putchar('0');\n            leadingZeros--;\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8bb44e79b9072eb457e1ff3eb8411fcc7fb030fa249a4ab43d49204a0dad733"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 5,
                  "charOffset": 1990,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 1961,
                  "charLength": 7,
                  "snippet": {
                    "text": "    printInt(integral);\n\n    putchar('.');\n\n    // Print digits after the decimal point"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be1584cec7192d185fc6ee9d94a465988f9a11fdc348c40be46629bced241934"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 16,
                  "charOffset": 2159,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 16,
                  "charOffset": 2049,
                  "charLength": 2,
                  "snippet": {
                    "text": "    int numDigitsAfterDecimal = minDigitsAfterDecimal;\n    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "863bea16dda04520b082ff5b393789316e3f0f4b3aa453a80e4825f24d93941b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'long' to signed type 'char' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 18,
                  "charOffset": 2180,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 18,
                  "charOffset": 2104,
                  "charLength": 1,
                  "snippet": {
                    "text": "    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f739ebc72c28b9675c0fabe8bcc9fdbeb5b79c4eab6b23a79a07c32b5753f31"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 32,
                  "charOffset": 2194,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 32,
                  "charOffset": 2104,
                  "charLength": 2,
                  "snippet": {
                    "text": "    while (numDigitsAfterDecimal > 0) {\n        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "491eca2a57c8d673a463212620735f71f8cd996e3c7860709e13cbeebf3966c0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 21,
                  "charOffset": 2225,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 21,
                  "charOffset": 2144,
                  "snippet": {
                    "text": "        num *= 10;\n        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);\n        numDigitsAfterDecimal--;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43d1625015e3ce8a2a6cb3f39276e29af07107f7d2d154d87bfba149782e1fd2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "charOffset": 2274,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 2163,
                  "charLength": 7,
                  "snippet": {
                    "text": "        char c = ((long) num % 10) + '0';\n        if (c < '0') c = '0'; //hack for bug due to overflow\n        putchar(c);\n        numDigitsAfterDecimal--;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb62f2353b3946a3f848fde9e7bfaaaec3832bca1f4031115a784295c43b240b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' has cognitive complexity of 27 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f89eb112d00f1eaaedeb3e14f1e33985e8892cd30ec286b8a662c60e7ee6c66d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' has cognitive complexity of 27 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "336e9c9ccf0c88a2bb5c1002bdab1bf6083946cf20269d05fd7004e4fca9f8f6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'os_libc_printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c190db2e82c03f5f69bf10bd94a351b5a1f3be892ed591def3b100c6708b5170"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'printf' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2332,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf"
                  }
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 5,
                  "charOffset": 2325,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faa8f9a5d59a82d6d2e60e3bbd97c88c0fb333f6910789e14f6593e749a3b4fa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'parameters' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 13,
                  "charOffset": 2384,
                  "charLength": 10,
                  "snippet": {
                    "text": "parameters"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 13,
                  "charOffset": 2327,
                  "charLength": 10,
                  "snippet": {
                    "text": "\nint printf(const char* __restrict s, ...) {\n    va_list parameters;\n    va_start(parameters, s);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2900a8e506d1acfe05f8760b271b333851a1fa97e16dfea7f2cc2e513350a5e6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'continue'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 11,
                  "charOffset": 2665,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 11,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "            isParsingFormat = 1;\n            continue;\n        } else if (!isEscaped && c == '\\\\') {\n            isEscaped = 1;\n            continue;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e96970cfcc634e6b6f8e28925b8ebde4a731358596a055a090bd6706d1d6025"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "charOffset": 2836,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 17,
                  "charOffset": 2761,
                  "charLength": 7,
                  "snippet": {
                    "text": "        if (isParsingFormat) {\n            if (c == '%') {\n                putchar('%');\n                isParsingFormat = 0;\n            } else if (c == 'd') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36d420f9a1e93111c32089ad1779e117dea9fe580c8483968f9afbd001583d40"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 35,
                  "charOffset": 3161,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 35,
                  "charOffset": 3037,
                  "charLength": 1,
                  "snippet": {
                    "text": "            } else if (c == 'f') {\n                double d = va_arg(parameters, double);\n                printDouble(d, 1, 6);\n                isParsingFormat = 0;\n            } else if (c == 's') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d150bad7f651b3a264677dec03d56fa944f1a71edd0c367393ee689298b5ae6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 17,
                  "charOffset": 3584,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 17,
                  "charOffset": 3475,
                  "charLength": 7,
                  "snippet": {
                    "text": "            } else if (c == 'c') {\n                char character = va_arg(parameters, int);\n                putchar(character);\n                isParsingFormat = 0;\n            } else if (c == 'x') {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "869a50fa1f8c9d98e1c2f5c3448760f57bb12a8f4f41e10d30ecdee2cbc3264b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "charOffset": 3900,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 17,
                  "charOffset": 3823,
                  "charLength": 7,
                  "snippet": {
                    "text": "        } else if (isEscaped) {\n            if (c == '\\\\') {\n                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f56829f676d86e6ea9e62b6b702b005060e614f243f8fda364e2fab257cc4ba3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "charOffset": 3966,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 17,
                  "charOffset": 3884,
                  "charLength": 7,
                  "snippet": {
                    "text": "                putchar('\\\\');\n            } else if (c == 'n') {\n                putchar('\\n');\n            }\n            isEscaped = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39f5beba0e62b2471940bf3a249e484f2f55673200ab254ed1f20d79c659b615"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 13,
                  "charOffset": 4051,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 13,
                  "charOffset": 3995,
                  "charLength": 7,
                  "snippet": {
                    "text": "            isEscaped = 0;\n        } else {\n            putchar(c);\n        }\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78f2ba652f4b763ed046677fdbb6ddb783bebb95b4fbd9c5488ced9b4af16394"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-valist.Unterminated",
          "ruleIndex": 327,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Initialized va_list 'parameters' is leaked"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/printf.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 12,
                  "charOffset": 4091,
                  "charLength": 1,
                  "snippet": {
                    "text": "0"
                  }
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 12,
                  "charOffset": 4073,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return 0;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dff64426fe6362c8e3b4959b0fd909866e1cd9fc168d2943ea4bed9fbd9e3a39"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/puts.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 92,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 46,
                  "charLength": 7,
                  "snippet": {
                    "text": "    int i = 0;\n    for(; s[i]; i++) {\n        putchar(s[i]);\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c03ece3d341a845ffd025143086ab966131eb9e96b556345ead08b02073ae34f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e43ebef7d8ee8e647f429d125cd244640e5f3d487de0d37b24ba4521aa1beb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82f3d844c017c0ccecd9f1edd909bd3cc696f3db88ac997764dc38f88c7e3baf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31de782a01735d592d30a0e0ddbc2d5e57c90e961478e57d550f156b3b517bb5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dd8b3d9c0ded2acb9169d45851bfa810ae37f170b9cfa813b9136d3db604e60"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f250b5271345debe634c64f42c95b9a053fa022a8ee2a9a9431e1bb017a5e2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49596ca335f451153b4932f904891e79e0a0cbe94c2f88d7ebb0011885e89204"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea5a09c2a5b446e19d55c53a6b61dc1d86aaf08a192a86ec53d08861856096ca"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d63a7de04ffc7a9bac60f2d1a61510241217fa298136ac0faec5161e7e241d9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 23,
                  "charOffset": 360,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 23,
                  "charOffset": 305,
                  "snippet": {
                    "text": "        int diff = a[i] - b[i];\n\n        if (diff != 0) return diff;\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f390ff12666a4f6de7dc657c358c28d61a302dd9d0bba2d4cf52a405926c453"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 42,
                  "charOffset": 937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 42,
                  "charOffset": 817,
                  "snippet": {
                    "text": "    const unsigned char* src = (const unsigned char*) p2;\n    if (dst < src) {\n        for (size_t i = 0; i < size; i++)\n            dst[i] = src[i];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66c828df062eac1f37516985f9196cff86b98622d56250d1d1f87e9647753951"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "charOffset": 1022,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 43,
                  "charOffset": 938,
                  "snippet": {
                    "text": "            dst[i] = src[i];\n    } else {\n        for (size_t i = size; i != 0; i--)\n            dst[i - 1] = src[i - 1];\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec52af0d54aea32ee6def231ed55f1448a5186dc0f245f2de5b7ad6255cecbf6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "charOffset": 1242,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 38,
                  "charOffset": 1084,
                  "snippet": {
                    "text": "__attribute__((unused)) void* memset(void* ptr, int value, size_t size) {\n    unsigned char* dst = (unsigned char*) ptr;\n    for (size_t i = 0; i < size; i++)\n        dst[i] = (unsigned char) value;\n    return ptr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "829ecafd69f47d65a777776dc4bf754cf8e4fb700d72cd964001ea379f34e301"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcat.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "charOffset": 116,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 20,
                  "charOffset": 59,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char* s = src;\n    char* d = dst;\n    for (; *d; d++);\n\n    for (char c = *s; c != '\\0'; c = *++s) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73fae25e621de58c83561c57cfe63a5293e58b1144d674b9949b74e6c8e83255"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcmp.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 22,
                  "charOffset": 184,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 22,
                  "charOffset": 105,
                  "snippet": {
                    "text": "    while(*p1 && *p2) {\n        int diff = *p1++ - *p2++;\n        if(diff != 0) return diff;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e15377698c0b391499b890b8236a4ac361cf8470cc598c1d65709f80b71e72"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cert-err33-c",
          "ruleIndex": 134,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "the value returned by this function should not be disregarded; neglecting it may lead to errors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/puts.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 92,
                  "charLength": 7,
                  "snippet": {
                    "text": "putchar"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 46,
                  "charLength": 7,
                  "snippet": {
                    "text": "    int i = 0;\n    for(; s[i]; i++) {\n        putchar(s[i]);\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c03ece3d341a845ffd025143086ab966131eb9e96b556345ead08b02073ae34f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strlen.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "charOffset": 119,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 21,
                  "charOffset": 22,
                  "snippet": {
                    "text": "__attribute__((unused)) size_t strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fef9f9ddc0f2b75bed099b8facfddb13964940ae031916f4d3292d6131532421"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "charOffset": 456,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 10,
                  "charOffset": 418,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PutChar) {\n    char c;\n\n    FileBuffer* buffer = allocateBuffer(5);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9d3ef6d3d3880753665d30c071640f56c68a13e45d0d002365015707060f0be"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 41,
                  "charOffset": 500,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 41,
                  "charOffset": 447,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char c;\n\n    FileBuffer* buffer = allocateBuffer(5);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b2ef133ce2fb77f77fe3b53a215d2f740ce4b241eac4a0fae8dc81996f10c67"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 41,
                  "charOffset": 796,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 41,
                  "charOffset": 717,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfLiteralTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6271fbc9b92be366ee74875f679d290ec78c301bb63c404759e5a266e830a6af"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 16,
                  "charOffset": 906,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 16,
                  "charOffset": 843,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Printing literal string\");\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7eab6aff3e51bb78619b63f500224f8852e20c620e70fe034b5910bab370c019"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "charOffset": 928,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 10,
                  "charOffset": 891,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0767605ddbaacf31d354915e98ebe04775596aeb93e5ad5c80402c9b827ce9eb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 20,
                  "charOffset": 950,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 20,
                  "charOffset": 918,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27021455edfb2525dfabc39aac2a5316206b20b6fe3df29ba82841335926bca8"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1166,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 41,
                  "charOffset": 1081,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfIntConversionTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de91793fcc96b9469a06a217a50e81612284e2a5886979b77522a91c1bced9e0"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'x' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1217,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 1172,
                  "charLength": 3,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90d11a04c5f7540467042eb29f8a9cd8d79710c33fdfe2fbedecce6748ed150d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1232,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1212,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91c18a19ed6a1549cbee92d09f21f8ca9d0e47d6a0195dc225b5a2c46f2b2778"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'negativeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 1269,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1213,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int x = 4;\n    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;\n    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "502cfb797d2e55c7caf7c0ac2b24e78b3789262d472158c93b717f06432e3554"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNegativeNumber' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "charOffset": 1298,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1228,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int largeNumber = INT32_MAX - 1;\n    int negativeNumber = -1;\n    int largeNegativeNumber = INT32_MIN;\n    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1885697bbf8acfec56526be6fa7812bd4e4691372bff65ee8da2cee35cab9458"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "charOffset": 1454,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 16,
                  "charOffset": 1335,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %d %d %d %d %d\\n\", 0, x, largeNumber, negativeNumber, largeNegativeNumber);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "000b2c46f60220a4a286a179f0ccc1491dc7d95e1f9418976bf265442d2223c6"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "charOffset": 1476,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 10,
                  "charOffset": 1439,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e554c87fb1fef9f04f18cfa7657b79c282135b35f6efbf7489136ecc33d99c2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 20,
                  "charOffset": 1498,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 20,
                  "charOffset": 1466,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "734e767bf8b1986547de6bcf4b60dbb4efd61e2b5eb79f34c01b30eabaec4b7a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 41,
                  "charOffset": 1731,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 41,
                  "charOffset": 1644,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfFloatConversionTest) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2addb86d754283b1ee087510fca41dff853ae970fd00cb2668745eb5b2554cb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'f' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1782,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 1737,
                  "charLength": 5,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb1732028716ec84a4f56362fb82b101dea7264ef63be50b2a80fe48cc49e8d9"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1801,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 5,
                  "charOffset": 1777,
                  "charLength": 5,
                  "snippet": {
                    "text": "\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c783f961c37fe6cb2d7c4215062668be2b9dca1b9ba3f822b94d8972e054c2d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1234567890.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 24,
                  "charOffset": 1820,
                  "charLength": 12,
                  "snippet": {
                    "text": "1234567890.0"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 24,
                  "charOffset": 1777,
                  "charLength": 12,
                  "snippet": {
                    "text": "\n    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0be7927d9de1780c364c99967661e21733a12516737144b28511ecbfc4fd5e56"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'negativeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 5,
                  "charOffset": 1838,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 1778,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3385db22a01858c2ea30f2399c8ceea51534d6dc030b4ba1e78bf81fb78e0b23"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 28,
                  "charOffset": 1861,
                  "charLength": 3,
                  "snippet": {
                    "text": "2.0"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 28,
                  "charOffset": 1778,
                  "charLength": 3,
                  "snippet": {
                    "text": "    float f = 1.0;\n    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fc3e44fcf61286de3199a3b85a14209f7c9974e44df7b107817e691a5736a84"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'largeNegativeFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 1870,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1797,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float largeFloat = 1234567890.0;\n    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5176b39ed339c71aaba5489ca0b5eb1a7aefc6e26e4117c96243ead2da660e26"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'fractionalFloat' of type 'float' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "charOffset": 1914,
                  "charLength": 5,
                  "snippet": {
                    "text": "float"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 5,
                  "charOffset": 1834,
                  "charLength": 5,
                  "snippet": {
                    "text": "    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "194eaaa7ccf2537cf4b2f47d3a45851d18201d24dd7cddac5ddaec03ca955e58"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "123.45678 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 29,
                  "charOffset": 1938,
                  "charLength": 9,
                  "snippet": {
                    "text": "123.45678"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 29,
                  "charOffset": 1834,
                  "charLength": 9,
                  "snippet": {
                    "text": "    float negativeFloat = -2.0;\n    float largeNegativeFloat = -largeFloat;\n    float fractionalFloat = 123.45678;\n    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b949c7ec7c32cb485501963df4b469237da9a89b1ed747e786229fa694a294f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 16,
                  "charOffset": 2087,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 16,
                  "charOffset": 1949,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %f %f %f %f %f %f\\n\", 0.0, f, largeFloat, negativeFloat, largeNegativeFloat, fractionalFloat);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a1b49a85226f46af08bfebbc17083182329b7239707b87dd408352afe73ac22"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 10,
                  "charOffset": 2109,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 10,
                  "charOffset": 2072,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b2d3144ca7891852b45103a012bf13a55c90bcd5aa774c19140efc9b64a63e5"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "charOffset": 2131,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 20,
                  "charOffset": 2099,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9a2c7bda5ab4b04cf0e57a42be8ffd585a702b1f2816cf95a73b9788abab662"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 41,
                  "charOffset": 2392,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 41,
                  "charOffset": 2316,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfHexTests) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eccf955a19913a4338cab365bd8819c8c2fe8816e15c8d29e879174a5a731485"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value1' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "charOffset": 2443,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 5,
                  "charOffset": 2398,
                  "charLength": 3,
                  "snippet": {
                    "text": "    initializeBuffers(nullptr, buffer);\n\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "808006fa0d26404b31c3330702c5dd9b368f7bb658b89406cbd95bbb20f2a32a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value2' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "charOffset": 2463,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2438,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0a6090746c536cbc9355659a4f3e663f17cad4b32b2734f4152812e7c79c711"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123ABC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2476,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123ABC"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 18,
                  "charOffset": 2438,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3a53e8a19061a07509cee3bc444ab75961519badf582c5d1487dd220e40a89"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value3' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "charOffset": 2490,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 5,
                  "charOffset": 2439,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4ac132aba9decf8b747ce2ef611b5b0e5a653a0c0ff4d3faf54884620e5215e"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xABC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 18,
                  "charOffset": 2503,
                  "charLength": 5,
                  "snippet": {
                    "text": "0xABC"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 18,
                  "charOffset": 2439,
                  "charLength": 5,
                  "snippet": {
                    "text": "    int value1 = 1;\n    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa02a6224a7b7d0d9930bd0d5ea73ccd8bbc8c930270c4f80dbc4e404b5a4904"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'value4' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "charOffset": 2514,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 5,
                  "charOffset": 2459,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "875768a90ebbcd18421b6c2e5f144c3a739afa12dbe0cd2681ae804214c4e4ee"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xDEF1 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 18,
                  "charOffset": 2527,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xDEF1"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2459,
                  "charLength": 6,
                  "snippet": {
                    "text": "    int value2 = 0x123ABC;\n    int value3 = 0xABC;\n    int value4 = 0xDEF1;\n    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e94fb5054207b39423c48076681ee5e2dc26c19e5b65082d7989e5837aa092d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 16,
                  "charOffset": 2627,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 16,
                  "charOffset": 2535,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %x %x %x %x\\n\", value1, value2, value3, value4);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d05e00d2cf89c41cb7a612a2927945ad18fc05fbec7e550d545574e345166c9"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 10,
                  "charOffset": 2649,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 10,
                  "charOffset": 2612,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7be4e277068dd1d54c46147b75d32914785be694e6682e07fb8529b10ffbec21"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 20,
                  "charOffset": 2671,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 20,
                  "charOffset": 2639,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14ff1fc83506776df7ca5fa6cb5f35eb2c650b46f48c68fd817af0eacac1735a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 41,
                  "charOffset": 2900,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 41,
                  "charOffset": 2823,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfMultiLine) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7831491c121dc48bc2f59416426961a199a0a8a6d8d03093e5c91e6bc0d28933"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 16,
                  "charOffset": 3026,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 16,
                  "charOffset": 2947,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\nString\\nWith\\nSeveral\\nLines\");\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "584d40c0aad4773003b981fdaceb293bb1fcd88fdb09a729f966f54bb04c68d6"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 10,
                  "charOffset": 3048,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 10,
                  "charOffset": 3011,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee7f96b14e162bf7d4e3fbeeb0318bff86b841b5d64524802e9bcb64c68ae4d8"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 20,
                  "charOffset": 3070,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 20,
                  "charOffset": 3038,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60835cc45e227a5329327772a3854ab1b416eeb874f1d17b02b6ccef1060ab06"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 41,
                  "charOffset": 3294,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 41,
                  "charOffset": 3217,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nTEST(PrintTests, PrintfMultiCall) {\n    FileBuffer* buffer = allocateBuffer(100);\n    initializeBuffers(nullptr, buffer);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfa8363661e40281ad8f6d14636c003ce64756569bcfc249fb4c72d83504a97f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 38,
                  "charOffset": 3445,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 38,
                  "charOffset": 3341,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\n\");\n    os_libc_printf(\"String\\n\");\n    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de148718246dfb35328f8e6d42782f804d64e260b8dbed8de654987dda444959"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30.0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 44,
                  "charOffset": 3451,
                  "charLength": 4,
                  "snippet": {
                    "text": "30.0"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 44,
                  "charOffset": 3341,
                  "charLength": 4,
                  "snippet": {
                    "text": "    os_libc_printf(\"Multiline\\n\");\n    os_libc_printf(\"String\\n\");\n    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fcfa8f987c36fd60df0df6cabb71c18cc27100f56918a330a52d72ee6eb7f1f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "charOffset": 3474,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 16,
                  "charOffset": 3408,
                  "charLength": 3,
                  "snippet": {
                    "text": "    os_libc_printf(\"Value: %d %f\\n\", 100, -30.0);\n\n    char value[100] = {0};\n\n    char c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4f8d4a97183680db58c8e9a878b961d5571dc236b7127a8f370245a22995a8d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 10,
                  "charOffset": 3496,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 10,
                  "charOffset": 3459,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char value[100] = {0};\n\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "175aefd155c1700024d4fb785d21361fa05dad841ec8c9be144699bd6b68ebfe"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-implicit-bool-conversion",
          "ruleIndex": 708,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "implicit conversion 'int' -> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/stdio_tests.cpp"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 20,
                  "charOffset": 3518,
                  "charLength": 8,
                  "snippet": {
                    "text": "readChar"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 20,
                  "charOffset": 3486,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n    char c;\n    for(int i = 0; readChar(buffer, &c); i++) {\n        value[i] = c;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fdc0a7dc0bb1c55c97ccee4de8c9a37809106c13e1d11c149a6168f8f49e87e"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/string_tests.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 15,
                  "charOffset": 324,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 15,
                  "charOffset": 229,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(StringTests, StringCopyTest) {\n    char* str1 = (char*)\"some text to copy\";\n    char str2[50] = {0};\n\n    ASSERT_STRNE(str1, str2);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa62b537b0ddc0fe187e3364b815fdf9a6f8959d80dae7025263d6a4a06b3f59"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/test/src/string_tests.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 15,
                  "charOffset": 490,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 15,
                  "charOffset": 432,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(StringTests, StringConcatenateTest) {\n    char str1[50] = {0};\n    char* str2 = (char*) \"World\";\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7d032e7c47cc7f2808dd6f1dcba99c810c863e7798f9ae411d12c7aa734fbcb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 41,
                  "charOffset": 467,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 41,
                  "charOffset": 394,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, emptyBuffer) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    ASSERT_EQ(0, bufferAvailable(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1a0c4b0d48bdac4c3fa18e1757ebd43598d68c5da62dfcf15e2cccde07eb74a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 29 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 582,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 579,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, write) {\n    FileBuffer* buffer = allocateBuffer(10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86c2f8558ca6814ef82df99b54e4f1bcfee0f9cd76d54497f50e96d7d1050b30"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 41,
                  "charOffset": 648,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 41,
                  "charOffset": 581,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, write) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb1c15c545232504c345a84ba8c403b7c3b5671a7b7b65f6ee043819e1ddd8f2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 24,
                  "charOffset": 677,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 24,
                  "charOffset": 608,
                  "charLength": 2,
                  "snippet": {
                    "text": "    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {\n        ASSERT_EQ(1, writeByte(buffer, i));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eb355ccfa6b652189cb09370f3394ef8fcacd65042bd74b637decc112870036"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 30 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 940,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 937,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, read) {\n    FileBuffer* buffer = allocateBuffer(10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86748eeba6b377abcdc0f4a33b7a811c78d0d24065283eeccf4683a2a6e014de"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 41,
                  "charOffset": 1005,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 41,
                  "charOffset": 939,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, read) {\n    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9bc2c4d23670a5c12d602b375fb59908165d681e884711f6467fb0f19fac0b42"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 1034,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 24,
                  "charOffset": 965,
                  "charLength": 2,
                  "snippet": {
                    "text": "    FileBuffer* buffer = allocateBuffer(10);\n\n    for(int i = 0; i < 10; i++) {\n        writeByte(buffer, i*2);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a00a09156fbca6161ea1666266850c01b168bce391354637d2fee2e0aee7c818"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "charOffset": 1107,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 24,
                  "charOffset": 1077,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for(int i = 0; i < 10; i++) {\n        uint8_t result;\n        ASSERT_EQ(1, readByte(buffer, &result));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00a746868f2db6563b4d85f4d03c30c679d79673d0231617a55ff908cdc11a75"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 1134,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 1083,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < 10; i++) {\n        uint8_t result;\n        ASSERT_EQ(1, readByte(buffer, &result));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147bc1d308566774c2b4dba1656ef27ffb4f9d5e8bc6024faaad151a04dcef5a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "charOffset": 1341,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1322,
                  "charLength": 6,
                  "snippet": {
                    "text": "    }\n\n    uint8_t result;\n    ASSERT_EQ(0, readByte(buffer, &result));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbba76b814968685fab4b94230f0b30727e3bd88e037e8d16570cbb2acabf6f9"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 47 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1413,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d1c97e8f7c0ad773277b214e0e764019c0a26601e34cebbd3c3082827cd5866"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 41,
                  "charOffset": 1489,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 41,
                  "charOffset": 1415,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a9d9498f0e4dcdfcdd7f06e79216f9f7d9e6eb0195598c11a04641b34d3b501"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 24,
                  "charOffset": 1517,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 24,
                  "charOffset": 1416,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(BufferTest, longCharTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2918ecbdf5000aec782e0c2f592d107c02dfbb00966283ae15ccfbf8c077d111"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 21,
                  "charOffset": 1572,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 21,
                  "charOffset": 1494,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "805f40d887f84b50baf1a71b08dbfe50992ba3ef22d9594559f9c82350808cfe"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 24,
                  "charOffset": 1575,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 24,
                  "charOffset": 1494,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73d96d66f14a749f9ea0dd17349cf26dc56ec1130e37e00d85c1b53b77759ea4"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 34,
                  "charOffset": 1585,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 34,
                  "charOffset": 1494,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeChar(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90b889011f15974668834c2d5ea2e014f4173b06eb16f6860dfe310cba81d8b0"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 18,
                  "charOffset": 1751,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 18,
                  "charOffset": 1691,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n        for(int j = 0; j < length; j++) {\n            char result;\n            ASSERT_EQ(1, readChar(buffer, &result));\n            ASSERT_EQ(j*3, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79fae429adfbf684d7cf5ba0ea1ba4138502aab31f74f52592db725d266ea28d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'notInTest' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 13,
                  "charOffset": 1861,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 13,
                  "charOffset": 1812,
                  "charLength": 3,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c51ce50335e60a7d2662127bdac85298ca70c4c69d8a1aea09e80a2ba77a53f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 29,
                  "charOffset": 1877,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 29,
                  "charOffset": 1812,
                  "charLength": 2,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eabd669dbe8c0880cd6db8395f21c685df3678ecad6e5272f3b9317fc7201a66"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-function-cognitive-complexity",
          "ruleIndex": 704,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'TestBody' has cognitive complexity of 47 (threshold 25)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2051,
                  "charLength": 4,
                  "snippet": {
                    "text": "TEST"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2048,
                  "charLength": 4,
                  "snippet": {
                    "text": "}\n\nTEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d2eae491d2ca510eef44853b5619a8f9a84ff35a897d6a36250a0d9d8cc2984"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 41,
                  "charOffset": 2124,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 41,
                  "charOffset": 2050,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nTEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "610f6b7742167ccadbf86ab732a18e9a1610bb373036f8bcc3f8ab375407c9d5"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "charOffset": 2152,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 24,
                  "charOffset": 2051,
                  "charLength": 2,
                  "snippet": {
                    "text": "TEST(BufferTest, longByteTest) {\n    FileBuffer* buffer = allocateBuffer(10);\n    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3940a67a07c90b904a33bb1e717f271c519c2858942aff6f7a58a39c8f8f290"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 21,
                  "charOffset": 2207,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 21,
                  "charOffset": 2129,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5f00c5669dee94170863f6881c5b16f10d582fd0f7991e472aa99b8847af962"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 24,
                  "charOffset": 2210,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 24,
                  "charOffset": 2129,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be945ae5048a7ffd6c4bcf4ac5f8312c149954710c06e4afea1c1f015906d85f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 34,
                  "charOffset": 2220,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 34,
                  "charOffset": 2129,
                  "charLength": 2,
                  "snippet": {
                    "text": "    for(int i = 1; i < 50; i++) {\n        int length = i;\n        if(length > 10) length = 10;\n        for(int j = 0; j < length; j++) {\n            ASSERT_EQ(1, writeByte(buffer, j*3));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b83a97a158354e46715228e1aa1887a48872b4277112e41648832537d0ee350b"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 21,
                  "charOffset": 2389,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 21,
                  "charOffset": 2326,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n        for(int j = 0; j < length; j++) {\n            uint8_t result;\n            ASSERT_EQ(1, readByte(buffer, &result));\n            ASSERT_EQ(j*3, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bd2e4ae532519f3cfb82392c3e4264f3a8822dbbd4990b6efbc1c7317e535b0"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'notInTest' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 13,
                  "charOffset": 2499,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 13,
                  "charOffset": 2450,
                  "charLength": 3,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca5064f5d3c7f69d435deb35dda8a7af098a125881e1fb7478483268af542435"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/test/src/buffer_test.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 29,
                  "charOffset": 2515,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 29,
                  "charOffset": 2450,
                  "charLength": 2,
                  "snippet": {
                    "text": "            ASSERT_EQ(j*3, result);\n\n            int notInTest = 10 - length;\n            ASSERT_EQ(length-j-1, bufferAvailable(buffer));\n            ASSERT_EQ(notInTest+j+1, bufferRemaining(buffer));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1a0c4b0d48bdac4c3fa18e1757ebd43598d68c5da62dfcf15e2cccde07eb74a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 613,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(buffer->writeHead >= buffer->readHead) {\n        return buffer->writeHead - buffer->readHead;\n    } else {\n        return buffer->length - (buffer->readHead - buffer->writeHead);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63268f6bd39ebfbb9300aa22f9cf9fe22695edd06418e4f35cbfffa965ed9df0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 43,
                  "charOffset": 1092,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 43,
                  "charOffset": 917,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = byte;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70732519a2f939bf4c130da626c637666ab59001af2a7e66e46327bb44b4fded"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 44,
                  "charOffset": 1193,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 44,
                  "charOffset": 1103,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = byte;\n    if(buffer->writeHead == buffer->length) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "438d9f7f4c2c28a0959a4f8c63149361fd40537d2d72366c7d7688bed1741a6e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "charOffset": 1396,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 46,
                  "charOffset": 1235,
                  "snippet": {
                    "text": "int readByte(FileBuffer* buffer, uint8_t* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2cb25dc8a4d47d2a572b7ebe63d46f9c14b1334a56d71ee6bd30627fef20719"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "charOffset": 1499,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 43,
                  "charOffset": 1408,
                  "snippet": {
                    "text": "    *result = buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59c771960bf07a8120755ac1cc54abe3433f6ea5b47209b4179ecde15daeb852"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1759,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 43,
                  "charOffset": 1584,
                  "snippet": {
                    "text": "    //check if the write head has caught up with the read head.\n    int nextWriteIndex = (buffer->writeHead + 1) % (buffer->length);\n    if(nextWriteIndex == buffer->readHead) return 0;\n\n    buffer->data[buffer->writeHead++] = c;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b259634a62923481928dc018aad87a3b41aa21c9f8d59d953e2141dc11053f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "charOffset": 1859,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 46,
                  "charOffset": 1770,
                  "snippet": {
                    "text": "\n    buffer->data[buffer->writeHead++] = c;\n    if(buffer->writeHead == (buffer->length)) buffer->writeHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0432ff6b6ddd2c44e743edcedb1c4bace263e1bf3c4bfe87683cda538cc2fb4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 46,
                  "charOffset": 2059,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 46,
                  "charOffset": 1901,
                  "snippet": {
                    "text": "int readChar(FileBuffer* buffer, char* result) {\n    //check if the read head has caught up with the write head.\n    if(buffer->readHead == buffer->writeHead) return 0;\n\n    *result = (char)buffer->data[buffer->readHead++];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab2f2d342562b284a135df3fd45fc8bb846b07bcd9c4c9aad17c33cb1f498fe9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libk/src/c/file/buffer.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "charOffset": 2168,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 43,
                  "charOffset": 2071,
                  "snippet": {
                    "text": "    *result = (char)buffer->data[buffer->readHead++];\n\n    if(buffer->readHead == buffer->length) buffer->readHead = 0;\n\n    return 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5da22d8d4c597c0d3b0690cc31d56ddd68a5656c8eede4191a79b0c94b919fb2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "charOffset": 102,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 51,
                  "charOffset": 18,
                  "snippet": {
                    "text": "\nint getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24eb28dfdefb158108833546499805fef3efc10c3343108295c03cb4733583d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 117,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 19,
                  "charLength": 4,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d565aff294ff630a2329db27b87d9dc516a09f9fc008e076574a294276a5edaa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 33,
                  "charOffset": 145,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 33,
                  "charOffset": 19,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b9c151fa53ad1bb849f88cb972cc50391c14a3f2c07be681152a1a716f68cfd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 164,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 52,
                  "snippet": {
                    "text": "    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ed36e02c74363c13182d5f4dddfc12635e1a488f87c29fe937a3b06de844810"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 29,
                  "charOffset": 358,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[3] == ' ' &&\n            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a981ce6d2213aee8743abda02e02174204dba7d435bc236c71651e497c9f407e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 399,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a1696312402099c2960a31324073d157821d811a149454115c34018c6c69b19"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 29,
                  "charOffset": 550,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 440,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n\n    int versionCheck = rsdp->revision == 0 || rsdp->revision == 2;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34d2e15769405e4c8ae894e94514efab9eaf29b9e4a67ee2dfbafff0ff36f69f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 95,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 39,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2523a4fb695964680fdd0eef7b9be66c51a6d9e8aac671b49223236994d8ba49"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ebx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "charOffset": 104,
                  "charLength": 3,
                  "snippet": {
                    "text": "ebx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 14,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90829785eb9953e384e811abc1f38b87d57c199829e61eb8858636b679e165bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 109,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 19,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89a4763f6cd6b0622af6085ab7e76e2af7dfc3b48220ff777e59eb92ec1102c7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 114,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 24,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9f64c03a035eaeeffa626745fc0be71052f78fc329c480f2a5b294ce312c7a7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17,
                  "charOffset": 247,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 17,
                  "charOffset": 157,
                  "charLength": 1,
                  "snippet": {
                    "text": "    // write 4 characters at a time, only if the provided length allows.\n\n    if(length < 5) {\n        string[0] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f043a330dc90bfe07bb63f2bd4141ec88c01245c93371aa21bf5b8526912bc54"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 17,
                  "charOffset": 351,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 17,
                  "charOffset": 301,
                  "charLength": 1,
                  "snippet": {
                    "text": "    *((uint32_t*) string) = ebx;\n\n    if(length < 9) {\n        string[4] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80cfbc1c1317d84e75dcf22931ec587f437a8f8b082761d7c411647b82f9fb4f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 461,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 405,
                  "charLength": 2,
                  "snippet": {
                    "text": "    *((uint32_t*) (string + 4)) = edx;\n\n    if(length < 13) {\n        string[8] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f887089b723ce25dcf8e89df256ffa1ddd1f8115368929fb9fa12ebd358564"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 482,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 16,
                  "charOffset": 444,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    if(length < 13) {\n        string[8] = '\\0';\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12914f5a76631d1a6d08e18a63b199092338d5340028dfa779d4ab2e7c49f6e8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 29,
                  "charOffset": 544,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a40b4a9028ec66f898336cc0fc6726547c2f1c43c4fdd56289767f21a89059bc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "charOffset": 566,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 12,
                  "charOffset": 515,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a06943203d5c9ffd0482a76fb00c52472e0b8e9a1923a77a5bb7559001d53d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 630,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 5,
                  "charOffset": 580,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2ade6cbc07cea5b6eb11688b49cad453cca8dc5e0a9721f5a236227a29a5dfe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "charOffset": 639,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 14,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fb3d0a7055ea31944325f253c3a2c6882a3b331f08c2b982cc2ba981473c8b5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 644,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc74a75ae735f4f5d89878b330f95c0023dd233f7570f65d821bfbd402c05a74"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e43ebef7d8ee8e647f429d125cd244640e5f3d487de0d37b24ba4521aa1beb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82f3d844c017c0ccecd9f1edd909bd3cc696f3db88ac997764dc38f88c7e3baf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31de782a01735d592d30a0e0ddbc2d5e57c90e961478e57d550f156b3b517bb5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdin' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 34,
                  "charLength": 5,
                  "snippet": {
                    "text": "stdin"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 1,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"buffer.h\"\n\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dd8b3d9c0ded2acb9169d45851bfa810ae37f170b9cfa813b9136d3db604e60"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f250b5271345debe634c64f42c95b9a053fa022a8ee2a9a9431e1bb017a5e2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'os_libc_stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49596ca335f451153b4932f904891e79e0a0cbe94c2f88d7ebb0011885e89204"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea5a09c2a5b446e19d55c53a6b61dc1d86aaf08a192a86ec53d08861856096ca"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'stdout' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/stdio/stdbuf.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 13,
                  "charOffset": 21,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nFileBuffer* stdin = 0;\nFileBuffer* stdout = 0;\n\nvoid initializeBuffers(FileBuffer* in, FileBuffer* out) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d63a7de04ffc7a9bac60f2d1a61510241217fa298136ac0faec5161e7e241d9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/file/createbuffer.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <mem.h>\n#include \"buffer.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d763186c0cc385c0bb5256c20164d7dd28f6d2c48ddb706d11d2d7ec94dca4cc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'defaultFont' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/font/psf/defaultfont.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 27,
                  "charLength": 11,
                  "snippet": {
                    "text": "defaultFont"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 9,
                  "charOffset": 1,
                  "charLength": 11,
                  "snippet": {
                    "text": "#include \"psf.h\"\n\nPsfFont defaultFont = {\n        .characterTable = {\n                PCF_CHAR( //"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2318311081ca0756ab2bf2f43b9c753c9911af84760ba2f989ddbb28c3f6ecd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include <mem.h>\n#include <string.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35ec52e51dd1cc984cf028b40c3d435afc5b4eaa0dbcb7ff66d9c706b09cb7e0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 22,
                  "charOffset": 337,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 22,
                  "charOffset": 252,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint16_t numUnallocatedInodes;\n    uint16_t numDirectories;\n    uint8_t reserved[14];\n} __attribute__((packed)) Ext2RawBlockDescriptor;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a745ebda7ceacb979d0d7d2a7d9fd12bc5aaebd6294edc21fadffdcb6ccd92fe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 52,
                  "charOffset": 1022,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 52,
                  "charOffset": 838,
                  "charLength": 3,
                  "snippet": {
                    "text": "void readBlock(IdeDevice* device, Ext2Fs* fs, int block, uint8_t* buffer) {\n    uint32_t address = fs->superBlock.blockSize * block;\n    uint32_t numSectors = fs->superBlock.blockSize/512;\n\n    for(uint32_t sector = 0; sector < numSectors; sector++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b108a276016e674dd66ca24a0230f1ed77c28aac1a57178061e2779ee7f9447"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1098,
                  "charLength": 50,
                  "snippet": {
                    "text": "// TODO: Figure out why we need to call this twice"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1027,
                  "charLength": 50,
                  "snippet": {
                    "text": "\n    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59f987313a237ca4c4565295d639258f859b93e6ab2a9aa407362266e13cf3a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 40,
                  "charOffset": 1188,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 40,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e32c21d5f58bebe076bc49dfb783261225c4327d44775d981b43b17bd9f600f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 70,
                  "charOffset": 1218,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 70,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf1f04ff6f3a334d09293725d132c78f915f9db92523971802664f9996868624"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 75,
                  "charOffset": 1223,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 75,
                  "charOffset": 1028,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(uint32_t sector = 0; sector < numSectors; sector++) {\n        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0c62c83899bf59c51b342d76fa3547b8e016b3f50e166d42fae1a416371c3c4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 40,
                  "charOffset": 1268,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 40,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c9bda2f85686ffb79bb49dbeda0c1505ca16cb8562197197647d9cfa86ca589"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 70,
                  "charOffset": 1298,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 70,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b585f520a456783a5b0ceeb6df7757ba39f029e1d728933e94a7dc6cbe254faf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 75,
                  "charOffset": 1303,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 75,
                  "charOffset": 1090,
                  "charLength": 3,
                  "snippet": {
                    "text": "        // TODO: Figure out why we need to call this twice\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n        ataReadSectors(device, address/512 + sector, buffer + sector*512, 512);\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7abf46b1ade16199ba1cb900fb1989da4a4eb8a8ac84c9fdc1c980a5e86d295"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 18,
                  "charOffset": 1429,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 18,
                  "charOffset": 1370,
                  "charLength": 4,
                  "snippet": {
                    "text": "    printf(\"Initializing ext2 drive\\n\");\n\n    uint8_t data[1024];\n    ataReadSectors(device, 2, data, 1024);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "adf4c7636ba20bcb4eb36a34cc73f993a6159e4bc2c96778dba94139b99958cd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 37,
                  "charOffset": 1472,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 37,
                  "charOffset": 1411,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint8_t data[1024];\n    ataReadSectors(device, 2, data, 1024);\n\n    uint16_t signature = readUint16(data, 56);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23781e269b8a5e3b490ef8d8d428613b80644d6cfa07cc3f540b4138fead2d5d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "56 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 43,
                  "charOffset": 1522,
                  "charLength": 2,
                  "snippet": {
                    "text": "56"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 43,
                  "charOffset": 1436,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataReadSectors(device, 2, data, 1024);\n\n    uint16_t signature = readUint16(data, 56);\n\n    if(signature != 0xef53) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71cb68d779edf71a8596e74f3fde8523c8ca5b55c1aa4814bf08db24add0dbde"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xef53 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "charOffset": 1548,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xef53"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 21,
                  "charOffset": 1480,
                  "charLength": 6,
                  "snippet": {
                    "text": "    uint16_t signature = readUint16(data, 56);\n\n    if(signature != 0xef53) {\n        printf(\"Signature does not match! this is not an ext2 drive\\n\");\n        printf(\"Signature is %x\\n\", signature);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21710d6d9e6ca71262e35993af5d3506db50afada8dcd0dd9d844d4b00d39401"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 32,
                  "charOffset": 1841,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 32,
                  "charOffset": 1704,
                  "charLength": 4,
                  "snippet": {
                    "text": "    fs->superBlock.inodeCount = readUint32(data, 0);\n    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3bd9b475668952652a220da90ed945f293a4a7a96293fa3ffa10b0e5ed8b744"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 58,
                  "charOffset": 1867,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 58,
                  "charOffset": 1704,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.inodeCount = readUint32(data, 0);\n    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c5ffcc2672baba76ca99a35659dfcf28258d51248476d64f6150cd2f24fb227"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 56,
                  "charOffset": 1928,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 56,
                  "charOffset": 1757,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.blockCount = readUint32(data, 4);\n    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1d9d3caccc9c4d33a888b8b76d6ee3abee274315d15633a51a442214ff5e5a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 56,
                  "charOffset": 1988,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 56,
                  "charOffset": 1810,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.blockSize = 1024 << (readUint32(data, 24));\n    fs->superBlock.numBlocksInGroup = readUint32(data, 32);\n    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n\n    uint32_t major = readUint32(data, 76);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebeef769258ddc7c7e688f52dceb4f5c7c98831de86d22cb96c00df08d9b960"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "76 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 39,
                  "charOffset": 2032,
                  "charLength": 2,
                  "snippet": {
                    "text": "76"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 39,
                  "charOffset": 1933,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->superBlock.numInodesInGroup = readUint32(data, 40);\n\n    uint32_t major = readUint32(data, 76);\n\n    //TODO: read extended fields"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "677d660e3e8d312e10f56e01f136ff953799612dc8c6e0d2050d2fb8c615e33f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 5,
                  "charOffset": 2042,
                  "charLength": 28,
                  "snippet": {
                    "text": "//TODO: read extended fields"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 5,
                  "charOffset": 1994,
                  "charLength": 28,
                  "snippet": {
                    "text": "    uint32_t major = readUint32(data, 76);\n\n    //TODO: read extended fields\n    if(major >= 1) {\n        fs->superBlock.inodeSize = readUint16(data, 88);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "584e83efb26f68671acbf2bc796dd303934a3625f3e300a38ff824b3fb9cf2b1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "88 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 53,
                  "charOffset": 2144,
                  "charLength": 2,
                  "snippet": {
                    "text": "88"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 53,
                  "charOffset": 2038,
                  "charLength": 2,
                  "snippet": {
                    "text": "    //TODO: read extended fields\n    if(major >= 1) {\n        fs->superBlock.inodeSize = readUint16(data, 88);\n    } else {\n        fs->superBlock.inodeSize = 128;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6969bdbb08d07483cb971ed7aec7e8ea9ce4a5e0e57dce82be77ae5c6311aea"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 36,
                  "charOffset": 2197,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 36,
                  "charOffset": 2092,
                  "charLength": 3,
                  "snippet": {
                    "text": "        fs->superBlock.inodeSize = readUint16(data, 88);\n    } else {\n        fs->superBlock.inodeSize = 128;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a62ff1b987b3e3c460df899034635116ddddc7fbd4193f4b4e216d6f216f4eb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'readBlockGroupDescriptor' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 6,
                  "charOffset": 2231,
                  "charLength": 24,
                  "snippet": {
                    "text": "readBlockGroupDescriptor"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 6,
                  "charOffset": 2223,
                  "charLength": 24,
                  "snippet": {
                    "text": "}\n\nvoid readBlockGroupDescriptor(IdeDevice* device, Ext2Fs* fs) {\n    fs->numGroups = fs->superBlock.blockCount / fs->superBlock.numBlocksInGroup;\n    if(fs->superBlock.numBlocksInGroup*fs->superBlock.blockCount < fs->numGroups) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "865152b9fbcc31d33b47557fd517e1095e8e0d9741760e97ec0401e866b9de58"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 31,
                  "charOffset": 2680,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 31,
                  "charOffset": 2486,
                  "charLength": 2,
                  "snippet": {
                    "text": "    fs->blockDescriptors = malloc(fs->numGroups * sizeof(Ext2BlockDescriptor));\n    // SuperBlock starts at 1024, and the block group descriptor is the block after\n    int blockDescriptorSize = 32;\n\n    uint32_t blockTableSize = (blockDescriptorSize*fs->numGroups);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d70fe73d1955085314d2bbb88cc48498c39a1274855992f6e3f3236e809ca2a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 31,
                  "charOffset": 3161,
                  "charLength": 1,
                  "snippet": {
                    "text": "1"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 31,
                  "charOffset": 2993,
                  "charLength": 1,
                  "snippet": {
                    "text": "    Ext2RawBlockDescriptor* rawDescriptors = (Ext2RawBlockDescriptor*) descriptorData;\n    for(uint32_t j = 0; j < numBlocksTaken; j++) {\n        readBlock(device, fs, 1+j, (uint8_t*) rawDescriptors + j*fs->superBlock.blockSize);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3ef50cc76f3e41cc59e4af0674a2c99a249290ca631dee7419043583c6134e5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-core.uninitialized.Assign",
          "ruleIndex": 233,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Assigned value is garbage or undefined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 48,
                  "charOffset": 3327,
                  "charLength": 1,
                  "snippet": {
                    "text": "="
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 48,
                  "charOffset": 3229,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    for(uint32_t i = 0; i < fs->numGroups; i++) {\n        fs->blockDescriptors[i].numDirectories = rawDescriptors[i].numDirectories;\n        fs->blockDescriptors[i].inodeTableAddress = rawDescriptors[i].inodeTableAddress;\n        fs->blockDescriptors[i].inodeUsageBitmapAddress = rawDescriptors[i].inodeUsageBitmapAddress;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3acfe2de66ef568f7f9300f7f1decad28a5bdf2ce8a82e803bcb4b40bbff33d7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'readInode' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 6,
                  "charOffset": 3858,
                  "charLength": 9,
                  "snippet": {
                    "text": "readInode"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 6,
                  "charOffset": 3850,
                  "charLength": 9,
                  "snippet": {
                    "text": "}\n\nvoid readInode(IdeDevice* device, Ext2Fs* fs, int inodeAddress, Ext2Inode* inode) {\n    uint32_t group = inodeAddress / fs->superBlock.numInodesInGroup;\n    uint32_t tableAddress = fs->blockDescriptors[group].inodeTableAddress;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50e1de8db81818a7491a1aff84970eec194bd20ee9f933abbd5a0cc405593829"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-core.uninitialized.Assign",
          "ruleIndex": 233,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Assigned value is garbage or undefined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 5,
                  "charOffset": 4010,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 5,
                  "charOffset": 3853,
                  "charLength": 8,
                  "snippet": {
                    "text": "void readInode(IdeDevice* device, Ext2Fs* fs, int inodeAddress, Ext2Inode* inode) {\n    uint32_t group = inodeAddress / fs->superBlock.numInodesInGroup;\n    uint32_t tableAddress = fs->blockDescriptors[group].inodeTableAddress;\n\n    // inode index is 1-indexed"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f88218a96cf1a4aa0f3691dceb066fea9d5e1f6ef35fa81831b5a49b50590d6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 27,
                  "charOffset": 4487,
                  "charLength": 12,
                  "snippet": {
                    "text": "tableAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 27,
                  "charOffset": 4402,
                  "charLength": 12,
                  "snippet": {
                    "text": "\n    uint8_t* fileData = malloc(fs->superBlock.blockSize);\n    readBlock(device, fs, tableAddress + blockIndex, fileData);\n\n    uint8_t* data = fileData + blockOffset*fs->superBlock.inodeSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0ac3441e27e5310ca5da7ea3a4621a26cde4ca5719754205ea19b050e5053a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 42,
                  "charOffset": 4692,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 42,
                  "charOffset": 4595,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1853fe0f122c83ad7e7dc7328a5b0a4932cbffd0bd5d3fc9e5ff00069450b984"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 48,
                  "charOffset": 4698,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xF"
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 48,
                  "charOffset": 4595,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ad05b24181edc4682af3495bef7493a4d4eea40ca529ed271b66a20cb3c7108"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 47,
                  "charOffset": 4749,
                  "charLength": 5,
                  "snippet": {
                    "text": "0xFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 47,
                  "charOffset": 4596,
                  "charLength": 5,
                  "snippet": {
                    "text": "    uint16_t typeAndPermissions = readUint16(data, 0);\n    inode->type = (typeAndPermissions >> 12) & 0xF;\n    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);\n    inode->creationTime = readUint32(data, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a15ce19d674339c654351e5cd04cf5728bc9a7a050e4eba56cd2067be7ae0ff5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 44,
                  "charOffset": 4838,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 44,
                  "charOffset": 4703,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->permissions = typeAndPermissions & 0xFFF;\n    inode->size = readUint32(data, 4);\n    inode->creationTime = readUint32(data, 12);\n\n    for(int i = 0; i < 12; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c99d69f3243027886771bbb8e17a089d350b2a8c2c02a23baa167ccb0f67c8fd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 24,
                  "charOffset": 4867,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 24,
                  "charOffset": 4795,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->creationTime = readUint32(data, 12);\n\n    for(int i = 0; i < 12; i++) {\n        inode->directPointers[i] = readUint32(data, 40 + 4*i);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a537dd4de8add5ad24a70164d9e165244d40bf40eb4bd77d78b9d046833fac45"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 53,
                  "charOffset": 4930,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 53,
                  "charOffset": 4843,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < 12; i++) {\n        inode->directPointers[i] = readUint32(data, 40 + 4*i);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5dbcf75a110870c332b4458e950bebd9cbd5b8cb5b4731fd745c5daed6b5cc2c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "88 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 53,
                  "charOffset": 5000,
                  "charLength": 2,
                  "snippet": {
                    "text": "88"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 53,
                  "charOffset": 4941,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "033a159c117581bf07a6ba66dd6e4ca37f5faaba1cc34393073f9cf72967fc30"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "92 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 53,
                  "charOffset": 5057,
                  "charLength": 2,
                  "snippet": {
                    "text": "92"
                  }
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 53,
                  "charOffset": 4947,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8bb58ef13e7a077587a01be581797b599ac4577813388b67d1f22fa4ee3622b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 53,
                  "charOffset": 5114,
                  "charLength": 2,
                  "snippet": {
                    "text": "96"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 53,
                  "charOffset": 4948,
                  "charLength": 2,
                  "snippet": {
                    "text": "    inode->singlyIndirectPointer = readUint32(data, 88);\n    inode->doublyIndirectPointer = readUint32(data, 92);\n    inode->triplyIndirectPointer = readUint32(data, 96);\n\n    inode->tableAddress = tableAddress;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7339051d66bce1e5f5836d819a3ac7eeccd73e6e08394717722e1172f3c9666"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 16,
                  "charOffset": 5258,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 16,
                  "charOffset": 5183,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t getBlockIndex(Ext2Inode* inode, uint32_t block) {\n    if(block < 12) {\n        return inode->directPointers[block];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6852a0a2f0adae893099ac932b3ad50e2c6a913f671bce52f691ed6ba11ba0db"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 7,
                  "charOffset": 5315,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 7,
                  "charOffset": 5243,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if(block < 12) {\n        return inode->directPointers[block];\n    } else {\n        //TODO: handle indirect blocks\n        return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8b37d9f20ad18c8286215cc94766184b0de17bbf4741cdf8ac8695c0daa1157"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "charOffset": 5330,
                  "charLength": 30,
                  "snippet": {
                    "text": "//TODO: handle indirect blocks"
                  }
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 9,
                  "charOffset": 5264,
                  "charLength": 30,
                  "snippet": {
                    "text": "        return inode->directPointers[block];\n    } else {\n        //TODO: handle indirect blocks\n        return -1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "418658ac8f56397e44e70f4a9d2aa86ef8762dbc1763e6d61827957bac7a4f78"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 24,
                  "charOffset": 5448,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 24,
                  "charOffset": 5388,
                  "snippet": {
                    "text": "\nint isPseudoDirectory(char* name) {\n    if(name[0] == '\\0') return 0; //we should allow empty strings\n    int nameIsDot = (name[0] == '.' && name[1] == '\\0');\n    int nameIsDotDot = (name[0] == '.' && name[1] == '.' && name[2] == '\\0');"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d244baaa9ff0e58da96c2508b68b936dcb7b666bbc7adb7c97cb646f01950ad8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'addChildNodes' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 6,
                  "charOffset": 5673,
                  "charLength": 13,
                  "snippet": {
                    "text": "addChildNodes"
                  }
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 6,
                  "charOffset": 5665,
                  "charLength": 13,
                  "snippet": {
                    "text": "}\n\nvoid addChildNodes(IdeDevice* device, Ext2Fs* fs, VfsNode* parentVfsNode, Ext2Inode* parentExtNode) {\n    if(parentVfsNode->numChildren > 0) {\n        printf(\"Parent node already has children\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff3111d550b2c3178dd29a91d31de96e863d90d71dde9fa96217bfb36bacac5f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "charOffset": 5946,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 5,
                  "charOffset": 5881,
                  "charLength": 6,
                  "snippet": {
                    "text": "    }\n    uint8_t* block = malloc(fs->superBlock.blockSize);\n    memset(block, 0, fs->superBlock.blockSize);\n\n    uint32_t address = getBlockIndex(parentExtNode, 0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31ad70e21595b4feb388f05ff56e2a517f856d77bfc9068335c1190b427b9a08"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 31,
                  "charOffset": 6398,
                  "charLength": 10,
                  "snippet": {
                    "text": "inodeIndex"
                  }
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 31,
                  "charOffset": 6309,
                  "charLength": 10,
                  "snippet": {
                    "text": "\n        Ext2Inode* ext2Inode = malloc(sizeof(Ext2Inode));\n        readInode(device, fs, inodeIndex, ext2Inode);\n\n        // Todo: handle empty directory node in middle"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9d4064cbad89578e56b48b9bb01894eed894f092ff9beb4f5d0af31e76b5dc3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 9,
                  "charOffset": 6546,
                  "charLength": 60,
                  "snippet": {
                    "text": "// TODO: handle if directory entries have a second name byte"
                  }
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 9,
                  "charOffset": 6527,
                  "charLength": 60,
                  "snippet": {
                    "text": "        }\n\n        // TODO: handle if directory entries have a second name byte\n        uint16_t nameLength = ptr[6];\n        uint16_t size = readUint16(ptr, 4);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c60df3b7ab08ec1f14054480c06fa5bb61bf4137fb751bdca2de12c2dfe7abd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 35,
                  "charOffset": 6641,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 35,
                  "charOffset": 6537,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n        // TODO: handle if directory entries have a second name byte\n        uint16_t nameLength = ptr[6];\n        uint16_t size = readUint16(ptr, 4);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cec6e6df9a56d143183f99f31422111f790bcf293fc8bc2d880b2109b21feae3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 9,
                  "charOffset": 6698,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 9,
                  "charOffset": 6645,
                  "charLength": 6,
                  "snippet": {
                    "text": "        uint16_t size = readUint16(ptr, 4);\n\n        memcpy(vfsChild->name, ptr + 8, nameLength);\n        vfsChild->name[nameLength] = '\\0';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dcb1deb0c73cbea7cc489fb9a228620b3a80be67b9e13bffbdbd786eeb665a95"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 38,
                  "charOffset": 6727,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 38,
                  "charOffset": 6645,
                  "charLength": 1,
                  "snippet": {
                    "text": "        uint16_t size = readUint16(ptr, 4);\n\n        memcpy(vfsChild->name, ptr + 8, nameLength);\n        vfsChild->name[nameLength] = '\\0';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3136cfdb897739b247aee678b4e504708734b3fe7d54b9806c603e830c1058"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/ext2/ext2.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 54,
                  "charOffset": 7586,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 54,
                  "charOffset": 7479,
                  "snippet": {
                    "text": "        Ext2Inode* ext2Inode = childVfsNode->device;\n\n        if(!ext2Inode || !isExt2Directory(ext2Inode)) continue;\n\n        addChildNodesRecursive(device, fs, childVfsNode, ext2Inode);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6013ee329c4c436a90300e8ba2d3da514a88c189a4a43a42b73da70f44434790"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <string.h>\n#include <mem.h>\n#include \"vfs.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a7b9995ce6cbe06655a45c7cba6fea48f9598c309c0158dc131ce752b1ca31e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'vfsRoot' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 96,
                  "charLength": 7,
                  "snippet": {
                    "text": "vfsRoot"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 9,
                  "charOffset": 55,
                  "charLength": 7,
                  "snippet": {
                    "text": "#define DEFAULT_NUM_CHILDREN 10\n\nVfsNode vfsRoot;\n\nvoid initializeVfsRoot() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b22494237ba51fcae3a8244140b7a7b5b4a47fdc920a47e6a64097aa4a1c0d1f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 56,
                  "charOffset": 548,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 56,
                  "charOffset": 438,
                  "snippet": {
                    "text": "\nVfsNode* getVfsNode(VfsNode* directory, char* name) {\n    if(!isDirectory(directory) || !directory->children) return 0;\n\n    for(VfsNode* node = (VfsNode*) directory->children[0]; node; node++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bc9f60a0720b1eaa8febcca18436e5eb1f0f91bafcb7083ce9a283d4167ab0b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 32,
                  "charOffset": 821,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 32,
                  "charOffset": 737,
                  "snippet": {
                    "text": "\nvoid addChild(VfsNode* directory, VfsNode* child) {\n    if(!isDirectory(directory)) return;\n\n    if(!directory->children) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eeb5acb7b9fd29cb33d5e0a492895d451d81fa5ace18a8d4be1e2e281b3b75a5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-multi-level-implicit-pointer-conversion",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multilevel pointer conversion from 'void *' to 'struct VfsNode **', please use explicit cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 31,
                  "charOffset": 892,
                  "charLength": 6,
                  "snippet": {
                    "text": "malloc"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 31,
                  "charOffset": 830,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    if(!directory->children) {\n        directory->children = malloc(DEFAULT_NUM_CHILDREN*sizeof(VfsNode));\n        directory->numChildrenReserved = DEFAULT_NUM_CHILDREN;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa54334dc380d60db003da0a73caa54b73cc981ad070e3d23abcb039054bc7b8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-unix.MallocSizeof",
          "ruleIndex": 318,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'malloc' is converted to a pointer of type 'struct VfsNode *', which is incompatible with sizeof operand type 'VfsNode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 31,
                  "charOffset": 892,
                  "charLength": 6,
                  "snippet": {
                    "text": "malloc"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 31,
                  "charOffset": 830,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    if(!directory->children) {\n        directory->children = malloc(DEFAULT_NUM_CHILDREN*sizeof(VfsNode));\n        directory->numChildrenReserved = DEFAULT_NUM_CHILDREN;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a114a6b35b60ac66087685745277021d9cdf0e5ffe92e6c4a32230560ffa381"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1.5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 60,
                  "charOffset": 1237,
                  "charLength": 3,
                  "snippet": {
                    "text": "1.5"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 60,
                  "charOffset": 1048,
                  "charLength": 3,
                  "snippet": {
                    "text": "    if(directory->numChildren+1 > directory->numChildrenReserved) {\n        VfsNode** previous = (VfsNode**) directory->children;\n        int newSize = (int)(directory->numChildrenReserved*1.5);\n        directory->children = malloc(newSize*sizeof(VfsNode));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd375f08171c1a1c3a0158bcd1b7b8bc048918d0f162365500f3a3020f068b56"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-multi-level-implicit-pointer-conversion",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multilevel pointer conversion from 'void *' to 'struct VfsNode **', please use explicit cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 31,
                  "charOffset": 1273,
                  "charLength": 6,
                  "snippet": {
                    "text": "malloc"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 31,
                  "charOffset": 1116,
                  "charLength": 6,
                  "snippet": {
                    "text": "        VfsNode** previous = (VfsNode**) directory->children;\n        int newSize = (int)(directory->numChildrenReserved*1.5);\n        directory->children = malloc(newSize*sizeof(VfsNode));\n\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a148fffe9193e32ffd42321bd3ab2e7793da23041d394a503a2b34de0ab26657"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-unix.MallocSizeof",
          "ruleIndex": 318,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'malloc' is converted to a pointer of type 'struct VfsNode *', which is incompatible with sizeof operand type 'VfsNode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 31,
                  "charOffset": 1273,
                  "charLength": 6,
                  "snippet": {
                    "text": "malloc"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 31,
                  "charOffset": 1116,
                  "charLength": 6,
                  "snippet": {
                    "text": "        VfsNode** previous = (VfsNode**) directory->children;\n        int newSize = (int)(directory->numChildrenReserved*1.5);\n        directory->children = malloc(newSize*sizeof(VfsNode));\n\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69d3e733bc68a89b5c21be2333f04ac09e20e7f1766b36484121884e9c3a698a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1315,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 9,
                  "charOffset": 1243,
                  "charLength": 6,
                  "snippet": {
                    "text": "        directory->children = malloc(newSize*sizeof(VfsNode));\n\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));\n        free(previous);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e4dbfdd96c375b572768449421407086ac464854cff7f09a923b004252ecf07"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-multi-level-implicit-pointer-conversion",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multilevel pointer conversion from 'struct VfsNode **' to 'void *', please use explicit cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "charOffset": 1322,
                  "charLength": 9,
                  "snippet": {
                    "text": "directory"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 16,
                  "charOffset": 1243,
                  "charLength": 9,
                  "snippet": {
                    "text": "        directory->children = malloc(newSize*sizeof(VfsNode));\n\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));\n        free(previous);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b02f71e34886f017482bc85e5f4d6bedd41cabe1b34ad9c28c3b9109d93a6f7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-multi-level-implicit-pointer-conversion",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multilevel pointer conversion from 'VfsNode **' to 'const void *', please use explicit cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 37,
                  "charOffset": 1343,
                  "charLength": 8,
                  "snippet": {
                    "text": "previous"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 37,
                  "charOffset": 1243,
                  "charLength": 8,
                  "snippet": {
                    "text": "        directory->children = malloc(newSize*sizeof(VfsNode));\n\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));\n        free(previous);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ff42b53a7dfd7b2cc1f04abaf21a07618754ffe3ff846b20779bc7a18efbddd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-multi-level-implicit-pointer-conversion",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multilevel pointer conversion from 'VfsNode **' to 'void *', please use explicit cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/fs/vfs/vfs.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "charOffset": 1407,
                  "charLength": 8,
                  "snippet": {
                    "text": "previous"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 14,
                  "charOffset": 1306,
                  "charLength": 8,
                  "snippet": {
                    "text": "\n        memcpy(directory->children, previous, directory->numChildren*sizeof(VfsNode));\n        free(previous);\n\n        directory->numChildrenReserved = newSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f50b3079ef3a1036a96952175e93f25ec35b58a875fff4a458806b958e650cf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'gdt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "charOffset": 27,
                  "charLength": 3,
                  "snippet": {
                    "text": "gdt"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 10,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include <gdt.h>\n\nGdtEntry gdt[DESCRIPTOR_COUNT];\nGdtPtr gdtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "540f5dbd9c1117e17d34c3594983225fec5d5929bea2a35d33dd1f2b5258bcff"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'gdtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 8,
                  "charOffset": 57,
                  "charLength": 6,
                  "snippet": {
                    "text": "gdtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 8,
                  "charOffset": 17,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nGdtEntry gdt[DESCRIPTOR_COUNT];\nGdtPtr gdtPtr;\n\nvoid initializeGdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "695cb9abb8f9e806196e91d47188daf5a68cecc92d3a7f292f643cfd6c05e07e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeGdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "charOffset": 71,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeGdt"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 6,
                  "charOffset": 50,
                  "charLength": 13,
                  "snippet": {
                    "text": "GdtPtr gdtPtr;\n\nvoid initializeGdt() {\n    gdtPtr.limit = sizeof(gdt)-1;\n    gdtPtr.base = (uint32_t) gdt;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "113a8dda487d538d6b1f71382255452eb8b5b69b0e577f944c829636c7d0abb4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 23,
                  "charOffset": 549,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 23,
                  "charOffset": 443,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1a9f36c3e3c0ce2547f5cbe6289501f68c0b4ae35cd90f5a8b9b642e96444fc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x9A is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 35,
                  "charOffset": 561,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x9A"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 35,
                  "charOffset": 443,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "410616308634af53e00cc8783da52c42c2bb28484f5ea93c48148afc3ccecb6c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 41,
                  "charOffset": 567,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 41,
                  "charOffset": 443,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d55cd187703bde99007814277055bcf7d4d8b8330f531e648288e6c429d1a8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 23,
                  "charOffset": 866,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 23,
                  "charOffset": 760,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0165165ad22c6c975d06b37d145a1f1334034e7d981414b48ec92d4db247ce5f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x92 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 35,
                  "charOffset": 878,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x92"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 35,
                  "charOffset": 760,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a70d5f6386816b15f4f222d9ec0774e97d54f3bb2f4ac561d7320007c93ad60"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 41,
                  "charOffset": 884,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 41,
                  "charOffset": 760,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(2, 0, 0xFFFFFFFF, 0x92, 0xCF);\n\n    //User code and data"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74aad77d7794f4726ccecb18ff9fdd32f83134f24fc75751e5d3d7f58870b105"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 23,
                  "charOffset": 1235,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 23,
                  "charOffset": 1129,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6951a2ab60090763612a402c4ac3c588a6454ed305c34eda89e8f06036e320f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFA is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "charOffset": 1247,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFA"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 35,
                  "charOffset": 1129,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3650724e0008c0da43f5a126901f241ed4aa75244f6ff4944fdb8227a54c1b5b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 41,
                  "charOffset": 1253,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 41,
                  "charOffset": 1129,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31af49bd2ac8e1cd3dd320361a082813fc71abdfddf16f8cc081ab1bc857de9c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 23,
                  "charOffset": 1552,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 23,
                  "charOffset": 1446,
                  "charLength": 10,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f67ead6ced8cc8392524af1a0dc66c20b7f3cb76925703a23170940e619d5cf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF2 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 35,
                  "charOffset": 1564,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xF2"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 35,
                  "charOffset": 1446,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e5738f0307a9a5a6cb166d171dca0965b8ad611fe63b22c8fd1cfdae474e2c6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xCF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 41,
                  "charOffset": 1570,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xCF"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 41,
                  "charOffset": 1446,
                  "charLength": 4,
                  "snippet": {
                    "text": "     * 0 access bit, always 0, cpu set this to 1 when accessing this sector\n     */\n    setGdtEntry(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);\n\n    setGdt((uint32_t) &gdtPtr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc5fe77c6c2a9022f4b6d76ce9c62bb17ce6fd4cd46695d2e85fd8cd34988204"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 40,
                  "charOffset": 1839,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 40,
                  "charOffset": 1741,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b8b5ec996f01f2c428281cb9f5d5c2069cfd9633d49b7ff2daf41c4ba15e992"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "charOffset": 1888,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 42,
                  "charOffset": 1742,
                  "charLength": 2,
                  "snippet": {
                    "text": "    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6b8e1c0da7aff52433684dbdf3ca6aa39fb7f10421193d66529d8f566ed7075"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "charOffset": 1894,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 48,
                  "charOffset": 1742,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // Low 16 bits, middle 8 bits and high 8 bits of base\n    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51de87223049b8a7ae3b1a66573cbc180c2e061155d4ea416140f6db973a66eb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 43,
                  "charOffset": 1942,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 43,
                  "charOffset": 1800,
                  "charLength": 2,
                  "snippet": {
                    "text": "    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147412d4f0009179b389b5245d16a8c04e0863fcb9d43a7e091d46cb477e8291"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 48,
                  "charOffset": 1947,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 48,
                  "charOffset": 1800,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->baseAddressLowByte = base & 0xFFFF;\n    entry->baseAddressMidByte = (base >> 16) & 0xFF;\n    entry->baseAddressHighByte = (base >> 24 & 0xFF);\n\n    /*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "081ecc3eb28c619357630ea3fb0f0a603f3629763f121feb974ec57ab8825394"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 35,
                  "charOffset": 2244,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 35,
                  "charOffset": 2185,
                  "charLength": 6,
                  "snippet": {
                    "text": "     * of limit.\n     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dc53345362b67e4e3c2eca1f786947570478ca150320569614e14c660734d4a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 30,
                  "charOffset": 2281,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 30,
                  "charOffset": 2202,
                  "charLength": 2,
                  "snippet": {
                    "text": "     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n\n    entry->access = access;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36977ad52d2c619b8f8eb6d6b27b57f910e28665331f195be618b69be5f68516"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 36,
                  "charOffset": 2287,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 36,
                  "charOffset": 2202,
                  "charLength": 4,
                  "snippet": {
                    "text": "     */\n    entry->limitLowByte = limit & 0xFFFF;\n    entry->flags = (limit >> 16) & 0x0F;\n\n    entry->access = access;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2faae89574ba51e116297b8c453d7520327cc59c90d19aad63fcad622c37bcb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xF0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/gdt/gdt.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 44,
                  "charOffset": 2408,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xF0"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 44,
                  "charOffset": 2322,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Only need the high 4 bits of flags\n    entry->flags = entry->flags | (flags & 0xF0);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "626b9a67333e3fca36972e5ef60baf46313c33649c2c679e5cb9d710664b9aa2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 384,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 292,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->buffer = buffer;\n    canvas->colorSpace = colorSpace;\n    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2920aef57038417c491d8f583bcee735d97a078f6b4f837ed8cde2d24eefbb0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 415,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 321,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->colorSpace = colorSpace;\n    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec2ff26ab30c0cf9ddc1d79e3901edc5e151ee75d53ed088a1e5598584583099"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "charOffset": 446,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 358,
                  "charLength": 3,
                  "snippet": {
                    "text": "    canvas->textColor.r = 255;\n    canvas->textColor.g = 255;\n    canvas->textColor.b = 255;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8168fdd204505e803c56a6c74c663b2ec5a1f0c6c378cb4f0ac520bfc5aa912f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "charOffset": 657,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 42,
                  "charOffset": 530,
                  "charLength": 1,
                  "snippet": {
                    "text": "    for(int row = y; row < y+h; row++) {\n        for(int col = x; col < x+w; col++) {\n            uint32_t index = canvas->bpp/8*col + row*canvas->pitch;\n            canvas->buffer[index+2] = color.r;\n            canvas->buffer[index+1] = color.g;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7932300b79f9916f6a047ae99f61eb7a4763e253a8a7d4518b48f666ab6d5cf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'drawCharacter' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 847,
                  "charLength": 13,
                  "snippet": {
                    "text": "drawCharacter"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 6,
                  "charOffset": 839,
                  "charLength": 13,
                  "snippet": {
                    "text": "}\n\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d33e2b2eba26eb628408239cbc0264927064300a36aeb29f15096eb89fe5ca9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "charOffset": 912,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 12,
                  "charOffset": 841,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7487c0d790fdbc75364fca3d922f1ac6123908e879a697f85f6f5b6a9e71dc86"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "127 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 22,
                  "charOffset": 922,
                  "charLength": 3,
                  "snippet": {
                    "text": "127"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 22,
                  "charOffset": 841,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5173c6dfde202922c4481d6058044ae944264d21aff7c8d7b2023d010f3338ee"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "charOffset": 926,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 26,
                  "charOffset": 841,
                  "snippet": {
                    "text": "\nvoid drawCharacter(Canvas* canvas, char c, int x, int y) {\n    if(c < 32 || c > 127) return; //Todo: render non-printable character symbol\n\n    uint32_t fontWidth = canvas->fontWidth;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dc6b6617442a159216744d32492c2630c28bc160039906e290a1293dec1c993"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 52,
                  "charOffset": 1184,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 52,
                  "charOffset": 1026,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint32_t fontHeight = canvas->fontHeight;\n    PsfFont font = defaultFont; //Todo: store font in canvas\n    PsfCharacter character = font.characterTable[c-32];\n    int bytesPerPixel = canvas->bpp/8;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3546c6d140835cf72050860d45d4165e0d575d5e0590a864b1465ff4d730eac1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 37,
                  "charOffset": 1225,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 37,
                  "charOffset": 1072,
                  "charLength": 1,
                  "snippet": {
                    "text": "    PsfFont font = defaultFont; //Todo: store font in canvas\n    PsfCharacter character = font.characterTable[c-32];\n    int bytesPerPixel = canvas->bpp/8;\n\n    for(uint32_t drawY = 0; drawY < fontHeight; drawY++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01be53671699ec5efdd8cdd3f7997ba3cc9753958518b271ca0a89f682a0a35c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 36,
                  "charOffset": 1385,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 36,
                  "charOffset": 1229,
                  "charLength": 1,
                  "snippet": {
                    "text": "    for(uint32_t drawY = 0; drawY < fontHeight; drawY++) {\n        for(uint32_t drawX = 0; drawX < fontWidth; drawX++) {\n            uint32_t fontX = drawX*8/fontWidth;\n            uint32_t fontY = drawY*16/fontHeight;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0e73995246de6c2c5daf1103b688bf8ae4ffdd8b586fab467c0eef5db7715da"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 36,
                  "charOffset": 1433,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 36,
                  "charOffset": 1288,
                  "charLength": 2,
                  "snippet": {
                    "text": "        for(uint32_t drawX = 0; drawX < fontWidth; drawX++) {\n            uint32_t fontX = drawX*8/fontWidth;\n            uint32_t fontY = drawY*16/fontHeight;\n\n            if((drawX + x) >= canvas->width || (drawY + y) >= canvas->height) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db3cf7c0d4ba560a1d8cec6142b0b9167b5dc2ff556cbb06fc81fc2b08daab6e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 66,
                  "charOffset": 1678,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 66,
                  "charOffset": 1598,
                  "charLength": 1,
                  "snippet": {
                    "text": "            }\n\n            uint8_t isColored = character.bitmap[fontY] & (1 << (7-fontX));\n            if(isColored) {\n                int index = bytesPerPixel*(drawX + x) + (drawY + y)*canvas->pitch;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "564fb625f5d991585965266582389e3d4db6aa759b415c630cebb42b06755eb6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 29,
                  "charOffset": 1745,
                  "charLength": 13,
                  "snippet": {
                    "text": "bytesPerPixel"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 29,
                  "charOffset": 1613,
                  "charLength": 13,
                  "snippet": {
                    "text": "            uint8_t isColored = character.bitmap[fontY] & (1 << (7-fontX));\n            if(isColored) {\n                int index = bytesPerPixel*(drawX + x) + (drawY + y)*canvas->pitch;\n                RgbColor color = canvas->textColor;\n                canvas->buffer[index+2] = color.r;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ffdf7747e58f050a139c73fa9411fe4ca0dc618bddf82a562b1f6a3766ea730"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/graphics/canvas.c"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 21,
                  "charOffset": 2169,
                  "charLength": 6,
                  "snippet": {
                    "text": "canvas"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 21,
                  "charOffset": 2099,
                  "charLength": 6,
                  "snippet": {
                    "text": "    const char* sPtr = s;\n    int characterX = x;\n    int fontWidth = canvas->fontWidth;\n    int characterSpacing = 2;\n    for(char c = *sPtr; c; c = *++sPtr) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9be071f0e13094bf9daa91b40cc2645cd86ee1a2050b3709e455d2ee8f65fe8d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-inconsistent-declaration-parameter-name",
          "ruleIndex": 709,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'setIdtEntry' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/include/idt.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "charOffset": 434,
                  "charLength": 11,
                  "snippet": {
                    "text": "setIdtEntry"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 406,
                  "charLength": 11,
                  "snippet": {
                    "text": "\nvoid initializeIdt();\nvoid setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t ring);\n\n#endif //OS_IDT_H"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5412bec782d5e000df2097fc2465590c988a1a044e94c6ee26374240a5c423bf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <pic.h>\n#include <idt.h>\n#include <string.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abdd28cbc6813b4d1e372fcceb46e267bf75cfe7e953671e38dc0a1b5c88d836"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 24,
                  "charOffset": 95,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 24,
                  "charOffset": 54,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "152e1f572a98a5490fbf1896d1572b9e2b33fe8c85c45350110f525ba7330478"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "charOffset": 112,
                  "charLength": 3,
                  "snippet": {
                    "text": "idt"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 10,
                  "charOffset": 71,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81e9efc18c5aeda71cdd35fb87e71c84c6fc865638cecf1bb06187d7f44efec6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 8,
                  "charOffset": 141,
                  "charLength": 6,
                  "snippet": {
                    "text": "idtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 8,
                  "charOffset": 72,
                  "charLength": 6,
                  "snippet": {
                    "text": "__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n\nvoid initializeIdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1b603befb7fedae6513df73c6debe23131a5be1a557e507590a9c00c8fcafc5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeIdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "charOffset": 155,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeIdt"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 6,
                  "charOffset": 134,
                  "charLength": 13,
                  "snippet": {
                    "text": "IdtPtr idtPtr;\n\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58448f1e1d043b4221cf7b0bc74b0f749d83a85a25817e75daba47a9a09f4660"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 13,
                  "charOffset": 185,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 13,
                  "charOffset": 149,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6bce0a25a938eaf149a4623c24e260d8bbc0113a72ee78239fc93ed98a4f019"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 19,
                  "charOffset": 191,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x28"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 19,
                  "charOffset": 149,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f63d26fa3185ab2ff8a372e5daa97c0b382739d8d8b68ba1114602d5eb4f6526"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 203,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 173,
                  "charLength": 6,
                  "snippet": {
                    "text": "    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));\n    idtPtr.base = (uint32_t) idt;\n    idtPtr.limit = sizeof(idt) - 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d9ffeb2016f98fb2f9d9647d49b0005e9a0a1d3f093988e4eb3bec88a274032"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 43,
                  "charOffset": 345,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 43,
                  "charOffset": 266,
                  "charLength": 4,
                  "snippet": {
                    "text": "    idtPtr.limit = sizeof(idt) - 1;\n\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb7d649e12905da6225b41023898d8e92f04e8348525a5936f89b80fa204f4b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 351,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 49,
                  "charOffset": 266,
                  "charLength": 4,
                  "snippet": {
                    "text": "    idtPtr.limit = sizeof(idt) - 1;\n\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7e83a46f217814650c94dd4dfc04f56087efdbe2ca9b58c0d8bef52972a7113"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 43,
                  "charOffset": 400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 43,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3786220db9711aa5462fb790635cbbae0693498cb3d29d2c1bef03b13989eb99"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 406,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 49,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bcf5e4affb3aa925eb478988381d379211cb11ad8dbcbdd110e48c4a9efee48"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "charOffset": 455,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 43,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5697b4be7be8ddae4e0870f52a4c5067bcb3b1b03d68ce85e6c6ee4bb81057a6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 461,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccf38353a6440837e3d28cb178bb4d17bec8582404f29fef41b4f5ddb67b12a7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 43,
                  "charOffset": 510,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 43,
                  "charOffset": 358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54f49a04ac5f86ba5d8bb66d92e36e85aa8e935dfc61e180d419e5943fbd047e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 516,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd2d8adce80737c91e69519eea60a2873a900191c57c9dd408950f999bd790be"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 43,
                  "charOffset": 565,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 43,
                  "charOffset": 413,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ff44049a4c98d593257f5c4c838de4ea7d40d0474d19a856fc53bbf9d7d9b28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 571,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 413,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73c3b23d35d149472a03cfbd3e5b0017b4d66179e5fd7590660efacd552e934c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 594,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 17,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33853ee568e47a03d7f3da0f14529c0dead215d7685ef7ee5509727477fce686"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 43,
                  "charOffset": 620,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 43,
                  "charOffset": 468,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "067f7690884cb2b936ba37566164a1fb59bc4282e3a1b9e3e471a14d9af7ea9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 626,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 468,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c5c7839fe831779e126909ce781e67cbf1841e4c3f9c919e7bca79c734583a0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 649,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 17,
                  "charOffset": 523,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff5cbe6053af5f1587b18d2527926a44e0eed76b4dfe616dcf08010da0bdc6f8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 43,
                  "charOffset": 675,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 43,
                  "charOffset": 523,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4c4fd73c967da8d4182a56ea2fcd8b35833c261d61d810909a5f898265395fc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 681,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 523,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85b45a31feb6d3c47d584bce747623c750345eefb6a933f75e4dc2a7e5712fa4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 704,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 578,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4cdb83d722730d4a3f7f2a2016fb041469c14985e30e8a87978201669c87f294"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 43,
                  "charOffset": 730,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 43,
                  "charOffset": 578,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9e7288dc047b00358a362564c92059341dc8d7d312fccf5105d9ffeb8a6ed62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 736,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 578,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca1d5be9e6e489bfa3371a12827c9c26b30c9fc989c7c905a49e34a50ab28dc5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 759,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 633,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e763cf2956873fad87966553761aceb71a7fd5cb0ab4ecd5f8c741d2e8ab2955"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 43,
                  "charOffset": 785,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 43,
                  "charOffset": 633,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f48b6109a7f52a549cdd8afff848cadd8682b07d4382d5a87df9208cc701b9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 49,
                  "charOffset": 791,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 633,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 814,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 688,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "974fe760c0c96dc37606d5f52ff247860f4071da77e44c400c04be5d4e6b5e87"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 43,
                  "charOffset": 840,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 43,
                  "charOffset": 688,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05cd2dd1d18e9087ccbc9196872dbaf49c4bc4c975b1cb80c8e867dad3dd95b6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 49,
                  "charOffset": 846,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 688,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccdee725d36b71e15a60c6abbacd62f09771facd79b5eb68520755e30110fcbe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 869,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 743,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b356a3d4b82a22de53de88165f40a29d280e6cf414409b5b62258f66ff4a640"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 45,
                  "charOffset": 897,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 45,
                  "charOffset": 743,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e689405d0397820c0d28ac80fd855008d2b8bdcf80bbe51baf0eca730ee1689"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 51,
                  "charOffset": 903,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 51,
                  "charOffset": 743,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c145d14af661616e5ce8d6147c4a032be63baf9b624f8c7090601869596ef39"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 926,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 798,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49d7b988df45c02d66fdba102ab6c65755b75e025dbdef901e7e69a24c104cf4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 45,
                  "charOffset": 954,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 45,
                  "charOffset": 798,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69eeaea29dce16d360e45d17acb64ae8f6acb4dd36a1f347326c4c089559e3ec"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 51,
                  "charOffset": 960,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 51,
                  "charOffset": 798,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a85bd4d79a62726efb1a0cfa57e18f00290a340a71ab1305933f5f527ade432f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 983,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 853,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7b48f4e04519d523158cddf0c6cb827b6959da7ac50a5c818a77bc3b0439bb0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 45,
                  "charOffset": 1011,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 45,
                  "charOffset": 853,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2b577a36d3a8eca2bea21b0a0fb22a523000ecaae44d5b0afdc05cd1b594538"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "charOffset": 1017,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 51,
                  "charOffset": 853,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b95b4f0884d72d91dcf1a212f0c6e6492e977572535d3136d461b4225c4dce0c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 1040,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 910,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "725f5f6884a81ff1fb39a15d43b1d1f1309643b17234b42b713bcff84b23798a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 45,
                  "charOffset": 1068,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 45,
                  "charOffset": 910,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0f1803bc1db9470b5744ce0df1176167cac9c1039845a8ecd29b47fcb4da06"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 51,
                  "charOffset": 1074,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 51,
                  "charOffset": 910,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e198ee994d7c35be4bacd044afd43c7ab7f394a769e820e4471173f6f20acd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1097,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 967,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ad72c9f56ba85ebcf02959e9252e13d7c917ceb1e4ef8eefc2cae5f2eca7862"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 45,
                  "charOffset": 1125,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 45,
                  "charOffset": 967,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed40020a6392b22ca30fa38b5dec1442d64e674272b6741e50053378229f29f1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "charOffset": 1131,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 51,
                  "charOffset": 967,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "713b7513a2f6650e3cfb8bdc37ee140d35960894350e18d6b12a4092b1654658"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "15 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1154,
                  "charLength": 2,
                  "snippet": {
                    "text": "15"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 1024,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2f3b0cefd788abf28f91a613085ce2c01a6364246c396b60fb90ffeffb65be0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 45,
                  "charOffset": 1182,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 45,
                  "charOffset": 1024,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c1a6e89bc1344424d011ff8b0978d6c498d88b985299d96de806083602b72b4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 51,
                  "charOffset": 1188,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 51,
                  "charOffset": 1024,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1031da46b7d5942315c32e20e9cd7eef63fe62d9374dccbc442271006e2d4987"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1211,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1081,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "118bbfabca682f6d8e3b1358258b86134796200dd0a0cb9f82f9922798eff4ee"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 45,
                  "charOffset": 1239,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 45,
                  "charOffset": 1081,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b97d7a4236092f9966e8463179a90aa6af2a66a2f0dbbe49693e2d49ee1c1741"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1245,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 51,
                  "charOffset": 1081,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17e3f16f707ad29ffac48f47927751801792b4618176bd37d5aacc4b7678b6f4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "17 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1268,
                  "charLength": 2,
                  "snippet": {
                    "text": "17"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1138,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "169f2b26b5a0eb9255ba747c759aac35671479f20907b7074eb631ca6d4e7500"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 1296,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 45,
                  "charOffset": 1138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "675853a7820de04b7e0ff02b446d6f8b2a5e12e1bd41ac8587056fc6f1ae5a4b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1302,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 51,
                  "charOffset": 1138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73c333dacee1f4a79e14a6f786f4584ae6b0dd533dd65ffabbb5c819cc04871c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "18 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1325,
                  "charLength": 2,
                  "snippet": {
                    "text": "18"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1195,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85de3d3def4067d3b3ad1e8cc00a69ea484333a06a468940cf11d334e89606cb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 45,
                  "charOffset": 1353,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 45,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f59081d48b5c4d5d77c61ba8bc428b5a15b66f9214915f9ac816ead67db811c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d25cff40534c7134e6719f72d95675348b29b7eb3ffb42b10ee3ba2c223145"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "19 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1382,
                  "charLength": 2,
                  "snippet": {
                    "text": "19"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1252,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc51e00e7ecb18ae480e700adf79c1fa9d39c13031e7f5bc8a570a7b5178cb20"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 1410,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40ad0b8b68e9e5ba8d57b75871b7952ad0a6a295ee40038b36ee086a7c76725c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0e8d30f0083da69ff0a53116d6dc7ba2e43c8ae617d3fc5fbc33e45352796c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1439,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1309,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05753bcfcb50b53b632ad1a2819b6ead3b365ac68ccdef3d90c62d4d67176c28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 45,
                  "charOffset": 1467,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 45,
                  "charOffset": 1309,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab0344fe076379daae3dbf3ddfa001a18e3af1db375b3357b0e1111528a253bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1473,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1309,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "21 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1496,
                  "charLength": 2,
                  "snippet": {
                    "text": "21"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1366,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cec6f115c7c15901892274a48fbf8cf88d805dd4a809ff8cea969ee5fd1c340"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 45,
                  "charOffset": 1524,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "558c5856e53796266fedef5c6c65d08e2ee38e33c25aad74e6a4fee229be2dc1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1530,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238109d015d441b8ba45b6ddd2ebc7b8d3b42ff2675cfc66dda4f4f4129b733a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "22 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1553,
                  "charLength": 2,
                  "snippet": {
                    "text": "22"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1423,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2e7e3f4bf3dd5d74febd3e5511cdfcad8e43f49a9a1c71b0a24ee91ab228c81"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 45,
                  "charOffset": 1581,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 45,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a1026269cbecc2b4febd030ea0e31f975225966add2e11d25c5530ef278085e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1587,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0d5b8259a80a32383b531c86d185e876a013efdd7d972721780fa53deeb374"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "23 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1610,
                  "charLength": 2,
                  "snippet": {
                    "text": "23"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1480,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b86c217382101647bf4a9671c40ac14034494f02b1a42fe99ee72fee14bb683"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 45,
                  "charOffset": 1638,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 45,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3636b4110ec51cc91769948ff6bd02fa7533576bb56e5afb7641e463a9c2d04"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1644,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb9f574b671be9cb1b3a09d6b23413a98ffd04d746f560cdd7b2133085491812"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1667,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1537,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eff7d587288dc4498367fe77b7f1f1743bed4c71a358e6e3b00a2a06b89afe68"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 45,
                  "charOffset": 1695,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 45,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "570630d2b093aac98140c7a769f967e6a91de3008ff7ad590e7eee5e8b79d8bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1be7594d079553ece2e8f1a832f2fec44f5dc9db4d39751d0a05014ee8620f62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "25 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1724,
                  "charLength": 2,
                  "snippet": {
                    "text": "25"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1594,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db3e0cc0600963163842c71788adf591b13c318530f8e0f384ca3facd08d4420"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 45,
                  "charOffset": 1752,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 45,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f0b7c6460533f3e1f07d9092da509078e50053894b19a97effd4ddbb391942d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1758,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d065df231c449150dfd0ae2d29ceb68ce44dcf9f3f4bb93ed4060dc1ae93f3c6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1781,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1651,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62b3f574e35d9a0bb15fc6fcc6848b02dd2c916771acfc358c285d76fbc51e56"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 45,
                  "charOffset": 1809,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 45,
                  "charOffset": 1651,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f48b6109a7f52a549cdd8afff848cadd8682b07d4382d5a87df9208cc701b9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1815,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1651,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1838,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1708,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da79aec924f084f207eb635eae4ae796e8036fecc29d3b378ec514de555f1fc8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 45,
                  "charOffset": 1866,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 45,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3666be18cb8a20b8d59b85da9d63abc7ce2d00452648557fcce3fe0176b35e63"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "754dbfb9b20aa4bde4c0078283122d200a35272432ead4f40435eb12f85fd4b3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1895,
                  "charLength": 2,
                  "snippet": {
                    "text": "28"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1765,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e53b71adc8d415359b9c7d3fa2e8fcac36728cab85762225b7bc05ccee93faf0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 45,
                  "charOffset": 1923,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 45,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a266668974382226389e9a175830867441a4015c85f60f9e5fb708384443ee86"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1929,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35136b4141054908251da635b77db18b1a996b7a0cd4a23510e428dc284c9884"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "29 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1952,
                  "charLength": 2,
                  "snippet": {
                    "text": "29"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1822,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "888c620798e6abaf15b0659103a99fb0e9e8a109267d3100f2990ae6db231f22"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 45,
                  "charOffset": 1980,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 45,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e59085f41e3050a2a94d18d6a4f28770948ce7654caa06ac48518abed0f1fcde"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1986,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 2009,
                  "charLength": 2,
                  "snippet": {
                    "text": "30"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1879,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95b43d7c68c0219cf99451818700acb8fbd83863d55858bc202b1e130da9977f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 45,
                  "charOffset": 2037,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 45,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c147ce2e16e23b5275cc8f13d3a59a0882d49163cf92ab6cce85c5ef3088646"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 2043,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46491eb6d71f047310a6306dff66e4b4a21c76c0a9848a0c770b18318ba0ac63"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2066,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1936,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd45b3088cb166359cdd9716f11a87a828e11b3dc575e14667fbd26981d8595b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 45,
                  "charOffset": 2094,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 45,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cedc66a88a8058920f21b9055f46aa97694dc5837abf7e08116953971bf8c612"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "charOffset": 2100,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a60c02846044612ad6fc0b90c22c6958d320fff89cdb063d08cbd2acfb8eee79"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2123,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1993,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02d8cbad9bbefe49f84c54fe89f44429cb80e74a3649a1d15f05698485d5cd82"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 38,
                  "charOffset": 2144,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 38,
                  "charOffset": 1993,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa201d1497acfadcf6a7294ea93a4a530f4171c76ecceb33c2ddeb1ec51046d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2150,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 44,
                  "charOffset": 1993,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9f9796187ef3c85394370919144190231d0e6ae30b5f95563c79914ce6ec5c3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "33 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2173,
                  "charLength": 2,
                  "snippet": {
                    "text": "33"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2050,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb90a60554b079b7356a5c98a33dc579f5a74862e1d95295d91866061becf7d8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 2194,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 38,
                  "charOffset": 2050,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d0fa1b1a242e1bba8aa056c6c67c9bc34cbb83b4c2fe6314c77395f3b11a388"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2200,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 44,
                  "charOffset": 2050,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c853c1935f1f039f09b82680d5945b98e0c9825e2f642de9b1cc61610a45f223"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "34 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2223,
                  "charLength": 2,
                  "snippet": {
                    "text": "34"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2107,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf33dd17d8bf7f1330be8133b369e36c1161684c9676930862b14142525894e5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 38,
                  "charOffset": 2244,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 38,
                  "charOffset": 2107,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4963b3cac90a77f2415a2cf09f9ec7a1c8d29a40e194d9202b9f96ac3fa244c5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2250,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2107,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acc184c461e97918c3a685c7374b0b178dfe93b46c9a817e4c8684a7ea626aac"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "35 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2273,
                  "charLength": 2,
                  "snippet": {
                    "text": "35"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2157,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0bc2f33ceec1becb45c96acbfa653c324af51348426c40be052fec356019852"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 2294,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91e674bd48d4e1d6a912af1993d5d19828f306518a3c4d6cc6b8b1de0d5a9048"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2300,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e493f580fe27eeb09e75a9a21ab071090dbaf66edeed5917821a4b70de5bb3b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "36 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2323,
                  "charLength": 2,
                  "snippet": {
                    "text": "36"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2207,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27a74ee8827839ab6ea9bd5bd5b4e0977bddc60a0304756fd8e2b3642da5f712"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 38,
                  "charOffset": 2344,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 38,
                  "charOffset": 2207,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5acc64b6b94bd1b78880aec3862ecdd2541fc9b32cc931a53879f5954848d754"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2350,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2207,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56cc71e84de860e216a2924b629e8c7e472134d60993353f5761010ecc8760c6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "37 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2373,
                  "charLength": 2,
                  "snippet": {
                    "text": "37"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2257,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "948898b30b972b664fa05b60dae57143b42afb920fe035ea3cf00f6a2e9030dc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 38,
                  "charOffset": 2394,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0c02211b67555427547dcf17e3a9569237abcd69ff33a27885e53761a7bcb75"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9532a47803da554826499e9fc0b54ef96ac21b2b700664587c460fa5e501b01e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "38 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2423,
                  "charLength": 2,
                  "snippet": {
                    "text": "38"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2307,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e82adb6b8f2f2ffbf1d05fb7c1738650ae22b8ba88d969312d4466e37c7d3a5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 38,
                  "charOffset": 2444,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 38,
                  "charOffset": 2307,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92cbe0d95fb71864c2e3977333b214b7a099c0e2bd9e83e6ca0839ff609aa0e5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2450,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2307,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27b903867983decda50ba1e2c524ac8f2b58f1edbeef15031f56e59fafc82558"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "39 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2473,
                  "charLength": 2,
                  "snippet": {
                    "text": "39"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2357,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d26d5636c601677980022dc648a39024edbac418aee14dbb8a09a3c3b21f327"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 38,
                  "charOffset": 2494,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 38,
                  "charOffset": 2357,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d38f56454b0579bbba27e10f66b4bdf2b58cfe5d01747f47c2713187166470ae"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2500,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2357,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa32a9fa4cb2c550aaff2d8d1281b71524cb39cabdca5dcbe15ed0124e17c100"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2523,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2407,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5640a06554e995f15fc16338a7c4eaa7cdfb4b19e05805d8fb6f2a47d60afa6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 38,
                  "charOffset": 2544,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 38,
                  "charOffset": 2407,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb688da633b205ec112469bf481ea7d162e8c4fd95677aaa64e89a4468102e6c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2550,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2407,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c556d836bda040c517dda95ec405dc5f6104025179de09a3779bff3a7c7506c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "41 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2573,
                  "charLength": 2,
                  "snippet": {
                    "text": "41"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2457,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16bb24a8c2b41642af1bcd1022d31a1035e1546bc457272fe836fbd9f78bff2c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 38,
                  "charOffset": 2594,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 38,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68cc362f9cb4426427c1f618f017b8cd63c81c16afc20091bd97c3eae5250a15"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d1e48ae87568fb27671cb9ce8846d445de4dfdc975f11ff3db2bc3858f24649"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "42 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2623,
                  "charLength": 2,
                  "snippet": {
                    "text": "42"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2507,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5fcd33db2c3566f5e420b97ecc548933a7d345daccb0db85f7d6b3dd2520f3d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 39,
                  "charOffset": 2645,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 39,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83ce591062074a210d3f045fdd513e191e7339966786679fe9c8d55d905be8be"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2651,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 45,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f9cb64081b4f443bd36dfc13cded13f5620ac61e8d2d2b10863435f29494f6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "43 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2674,
                  "charLength": 2,
                  "snippet": {
                    "text": "43"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2557,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b30771a0bbac41ae6e34649f59dbbd1709dd090cb04a0dde46cb5b81a71e484"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 39,
                  "charOffset": 2696,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 39,
                  "charOffset": 2557,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c91fff82ee1844c973bc917a5d2ad41262dd08e57c94946efe17c776463c55f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2702,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 45,
                  "charOffset": 2557,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49d495c4eb912ece20cd3ce54783f85a54d84b9feafdcbe0e2f426b23fd91944"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "44 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2725,
                  "charLength": 2,
                  "snippet": {
                    "text": "44"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2607,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c439c89619c6a647dfb499d8388d2254627aaa4721effadeb13c3cae781f603"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 39,
                  "charOffset": 2747,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 39,
                  "charOffset": 2607,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab0344fe076379daae3dbf3ddfa001a18e3af1db375b3357b0e1111528a253bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2753,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2607,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "45 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2776,
                  "charLength": 2,
                  "snippet": {
                    "text": "45"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2658,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f5cf9baab40878a20783fcc74b982cb86ff9bde9b30b638d6e787884d129aaa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 39,
                  "charOffset": 2798,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 39,
                  "charOffset": 2658,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4c828fc7609e3992ee443a82045589fc8ff3be062eb382b7fccdab5ab4610c4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 45,
                  "charOffset": 2804,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2658,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c266f9190b63853cf8d4b5715ab7b44cfb7f7d3902b7fca9fb27f09821abfbbe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "46 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2827,
                  "charLength": 2,
                  "snippet": {
                    "text": "46"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2709,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0188474e6607f36c9c5baa02efbdf2ffd9a3c79d0a4ab1a69015220d82cb3451"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 39,
                  "charOffset": 2849,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 39,
                  "charOffset": 2709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b308577a08493eba456b3edc7f6f3bdd6a61073022f0f46750ea5b0df06c825"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 45,
                  "charOffset": 2855,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a626883f6c48fd564e7d3d2d56a3697d39b725582eb678b2986e8b0c19ad80d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2878,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2760,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f779970c353de59120cfb90e2d98af6b57e012c0bc5ad018da5a68afe491c055"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 39,
                  "charOffset": 2900,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 39,
                  "charOffset": 2760,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f82211f95b4a89c37c54ab2965d372e253ee03ce2b2f8922eb5e3ead021e6e2e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 45,
                  "charOffset": 2906,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 45,
                  "charOffset": 2760,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "04038cd8520b289f38a483b8480a9f30a5790d7c466a69efbf452416f34abeb5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "charOffset": 2929,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2811,
                  "charLength": 3,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca859ec21934b7d2998aefd78c0cb33630b09edf6601d6c77de66c66f807c0c9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 47,
                  "charOffset": 2959,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 47,
                  "charOffset": 2811,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd581d71ae1b343dbd6926380aaa0bddafc3d9ea9476d189485dec7d0ed697e2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 53,
                  "charOffset": 2965,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 53,
                  "charOffset": 2811,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aeedf66a80672010e3b63c55236fbd68d5a99a4f2fdfe3953a1bfe8b2e7e8d42"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 29,
                  "charOffset": 3199,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 29,
                  "charOffset": 3062,
                  "charLength": 6,
                  "snippet": {
                    "text": "void setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t flags) {\n    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aff574385be3120b05842bda0781efc3fa2974ef2f8885cdfada4782405bb7f5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 32,
                  "charOffset": 3238,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 32,
                  "charOffset": 3136,
                  "charLength": 2,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d12714b08c533743398ce9b857b7009f1e812ac3df03adbb14e1aafe6611bfd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 38,
                  "charOffset": 3244,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 38,
                  "charOffset": 3136,
                  "charLength": 6,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4749fb151d9ab21d5ca9fcb185072dd5a5d1a1d1daee40e5adf9ab8cde320d21"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 28,
                  "charOffset": 3325,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 28,
                  "charOffset": 3252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->always0 = 0;\n    entry->sel = sel;\n    entry->flags = flags | 0x60;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6672e8bd0b507d2b6bf3768b35ba6278f3d4b08d278136c3223faf351f13adae"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include \"system.h\"\n#include \"terminal.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "634b491e03cd94f9bb7bf7432669cefbc063f0abed44a009b7cbd659f850103b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'keys' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "charOffset": 67,
                  "charLength": 4,
                  "snippet": {
                    "text": "keys"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 6,
                  "charOffset": 39,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include \"terminal.h\"\n\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd721fea7e623f7a9543893c40d449d49df848202f0ec2c1d0df36f0e35adceb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 11,
                  "charOffset": 72,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 11,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"terminal.h\"\n\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95e4d7a8ef779e1f8c40f9586f256041f5ac578f1d7a82a7ea94cac3684adc92"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "charOffset": 92,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 12,
                  "charOffset": 61,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nchar keys[128] = {\n        0, 27, '1', '2', '3', '4', '5', '6', '7', '8', /* 9 */\n        '9', '0', '-', '=', '\\b',   /* Backspace */\n        '\\t',           /* Tab */"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "247614ff45dcf31fd367d66e185d126ffe538785156366d0b14456f159c4b6ab"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-unused-parameters",
          "ruleIndex": 614,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "parameter 'r' is unused"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 31,
                  "charOffset": 1348,
                  "charLength": 1,
                  "snippet": {
                    "text": "r"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 31,
                  "charOffset": 1314,
                  "charLength": 1,
                  "snippet": {
                    "text": "};\n\nvoid handleKeyboard(Register* r) {\n    int scancode;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "512fadb32477c9520abb405885e8570e8a4e2652a8b748f0c30e75b691ec2f7d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'scancode' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "charOffset": 1361,
                  "charLength": 8,
                  "snippet": {
                    "text": "scancode"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 9,
                  "charOffset": 1317,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid handleKeyboard(Register* r) {\n    int scancode;\n\n    //get the scan code once it's ready"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45acb6c700cb2ad02b232c05032f2ec54433f56f6328ac3380f96bb7c3a0b8bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x64 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "charOffset": 1451,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x64"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 25,
                  "charOffset": 1372,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //get the scan code once it's ready\n    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ff62b070b0fbebeaf15b1ea528e6d3e27d022a058b1d622d1c1e48a5eca459e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 41,
                  "charOffset": 1467,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 41,
                  "charOffset": 1372,
                  "snippet": {
                    "text": "    //get the scan code once it's ready\n    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ce3f511e5a2e606f3af662a0c57c2188ea9f42f9d717de04aa76548c78a19a0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 31,
                  "charOffset": 1508,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 31,
                  "charOffset": 1412,
                  "charLength": 4,
                  "snippet": {
                    "text": "    for (;;) {\n        if ((inportByte(0x64) & 1) == 0) continue;\n        scancode = inportByte(0x60);\n        break;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93065aa7fad71bedaefea5491b51e84e19ebf5d4ad271ea163e2dd5ed1591df3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "charOffset": 1556,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 20,
                  "charOffset": 1530,
                  "charLength": 4,
                  "snippet": {
                    "text": "    }\n\n    if (scancode & 0x80) {\n        //key was released\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0eaacc84aa5a868756bdc9cd52d49433652da3ac06642831ae371a58ceb7023c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "72 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/interrupts/keyboard.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "charOffset": 1650,
                  "charLength": 2,
                  "snippet": {
                    "text": "72"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 25,
                  "charOffset": 1591,
                  "charLength": 2,
                  "snippet": {
                    "text": "    } else {\n        //key pressed\n        if (scancode == 72) {\n            terminalScroll(1);\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9117ec8c2b603f16aca886cb08000505330bd9ab5f6dbeb37bd7b8b79024f7aa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n#include <stdio.h>\n#include \"system.h\"\n#include \"isr.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88ded62d0ca75d3516a5f250139c19652d28d0aa33d5f30f9149be5fc5a76a58"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'exceptionMessages' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 7,
                  "charOffset": 64,
                  "charLength": 17,
                  "snippet": {
                    "text": "exceptionMessages"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 7,
                  "charOffset": 40,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\nchar* exceptionMessages[32] = {\n        \"Divide By Zero\",\n        \"Debug\","
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "408701b7c879e30750c00c0dfa3dd79df18ee41102067a0bb6b3c9c37df907c4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 25,
                  "charOffset": 82,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 25,
                  "charOffset": 40,
                  "charLength": 2,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\nchar* exceptionMessages[32] = {\n        \"Divide By Zero\",\n        \"Debug\","
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb417f26fa5ff8a26a4050bb620ee0a91ccfe3bfffc57c79bb1d7414eaa4906"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 31,
                  "charOffset": 940,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 31,
                  "charOffset": 866,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid finalExceptionHandler(Register reg) {\n    if (reg.interruptNumber < 32) {\n        printf(\"EXCEPTION: %s (err code is %d)\\n\", exceptionMessages[reg.interruptNumber], reg.errno);\n        isr handler = interruptHandlers[reg.interruptNumber];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a612149b4617b942b4f7160771d0f112abc0c17b06d55b2cb372016b27e353d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21,
                  "charOffset": 1131,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 21,
                  "charOffset": 946,
                  "snippet": {
                    "text": "        printf(\"EXCEPTION: %s (err code is %d)\\n\", exceptionMessages[reg.interruptNumber], reg.errno);\n        isr handler = interruptHandlers[reg.interruptNumber];\n        if (handler) handler(&reg);\n        for (;;);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58f10c246cb90fc0ee6e6fe47951270adeb6ad31502af30d7b807b04056cdd4e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/exception.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1163,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1049,
                  "charLength": 1,
                  "snippet": {
                    "text": "        isr handler = interruptHandlers[reg.interruptNumber];\n        if (handler) handler(&reg);\n        for (;;);\n    }\n    if (interruptHandlers[reg.interruptNumber] != 0) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8648f2fa839be5db9cdc1da60461ecc593bb31e97e8f8b4d1f9b852e81bbee0b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'interruptHandlers' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 59,
                  "charLength": 17,
                  "snippet": {
                    "text": "interruptHandlers"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 37,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include \"pic.h\"\n\nisr interruptHandlers[256];\n\n/*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d44b4b87873d6d15e68e4a93123d7c37821c2d23f28e4db7df6d54ada834fa3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "charOffset": 77,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 23,
                  "charOffset": 37,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"pic.h\"\n\nisr interruptHandlers[256];\n\n/*"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09fa8a819d2cd16266d0bdad8a964572258052acb4e88ac6681a70c86eb60886"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "charOffset": 309,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 15,
                  "charOffset": 235,
                  "charLength": 3,
                  "snippet": {
                    "text": " * */\nvoid registerInterruptHandler(int num, isr handler) {\n    if (num < 256)\n        interruptHandlers[num] = handler;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e39491e43be3b8dca6903badccc0ce0e26b9dbf87a66025f9119632889980d1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/isr/interrupt.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 19,
                  "charOffset": 313,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 19,
                  "charOffset": 235,
                  "snippet": {
                    "text": " * */\nvoid registerInterruptHandler(int num, isr handler) {\n    if (num < 256)\n        interruptHandlers[num] = handler;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62ddcf9f73f56564f8ecee981db614a6f23598bf2deaac6e8b52923db6ab5bb0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 23,
                  "charOffset": 360,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 23,
                  "charOffset": 305,
                  "snippet": {
                    "text": "        int diff = a[i] - b[i];\n\n        if (diff != 0) return diff;\n    }\n    return 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f390ff12666a4f6de7dc657c358c28d61a302dd9d0bba2d4cf52a405926c453"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 42,
                  "charOffset": 937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 42,
                  "charOffset": 817,
                  "snippet": {
                    "text": "    const unsigned char* src = (const unsigned char*) p2;\n    if (dst < src) {\n        for (size_t i = 0; i < size; i++)\n            dst[i] = src[i];\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66c828df062eac1f37516985f9196cff86b98622d56250d1d1f87e9647753951"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "charOffset": 1022,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 43,
                  "charOffset": 938,
                  "snippet": {
                    "text": "            dst[i] = src[i];\n    } else {\n        for (size_t i = size; i != 0; i--)\n            dst[i - 1] = src[i - 1];\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec52af0d54aea32ee6def231ed55f1448a5186dc0f245f2de5b7ad6255cecbf6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/memutils.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "charOffset": 1242,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 38,
                  "charOffset": 1084,
                  "snippet": {
                    "text": "__attribute__((unused)) void* memset(void* ptr, int value, size_t size) {\n    unsigned char* dst = (unsigned char*) ptr;\n    for (size_t i = 0; i < size; i++)\n        dst[i] = (unsigned char) value;\n    return ptr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "829ecafd69f47d65a777776dc4bf754cf8e4fb700d72cd964001ea379f34e301"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include <terminal.h>\n#include <gdt.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "269107ddac3bddc6b26f4a465751fa4cbc136725eea4fcdd0c977ee99cc03977"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'kernel_main' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "charOffset": 443,
                  "charLength": 11,
                  "snippet": {
                    "text": "kernel_main"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 30,
                  "charOffset": 395,
                  "charLength": 11,
                  "snippet": {
                    "text": "#include \"rsdp.h\"\n\n__attribute__((unused)) void kernel_main(uint32_t magic, uint32_t rawAddress) {\n    uint32_t address = rawAddress + LOAD_MEMORY_ADDRESS;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2d4221b627ef2a176796c3a198b38aca5c38ef16259732fbafe3cac58bfbabe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-unused-parameters",
          "ruleIndex": 614,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "parameter 'magic' is unused"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 51,
                  "charOffset": 464,
                  "charLength": 5,
                  "snippet": {
                    "text": "magic"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 51,
                  "charOffset": 395,
                  "charLength": 5,
                  "snippet": {
                    "text": "#include \"rsdp.h\"\n\n__attribute__((unused)) void kernel_main(uint32_t magic, uint32_t rawAddress) {\n    uint32_t address = rawAddress + LOAD_MEMORY_ADDRESS;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25cd73fed8e1ccd21a15ab8be580bf25dc7d49c4c5a7df5d823a7d6eb1a09580"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "charOffset": 604,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 30,
                  "charOffset": 551,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    BootInfo bootInfo;\n    parseBootInfo(&bootInfo, (void*)address);\n\n    initializeGdt();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fec720a180ec9b33e7807b3e9c004f27389abe5ecfdc80568fa7b84c8d08582"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 19,
                  "charOffset": 833,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 768,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "068cbc0e65a30d486cb03e02d531eb32b93df81839eb73df0d40229855018de6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 26,
                  "charOffset": 840,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 26,
                  "charOffset": 768,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f92c514748c75e4f9e20a451a18601c789318fb4c9ba556c8d502eabdc64a162"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 33,
                  "charOffset": 847,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 33,
                  "charOffset": 768,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    serialPrint(&com1, \"Initializing PMM\\n\");\n    initializePmm(1024 * 1024 * 1024);\n\n    serialPrint(&com1, \"Initializing Paging\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f530ee5339be6628d1323d49ee93f39c6446e704b94e14b3d6842a72442a0e0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "charOffset": 1215,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 22,
                  "charOffset": 1160,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "977d32d06fa33a614a1ab4c7a817fa39b2f5111389e1bd4f0e3bfb2e925d5b10"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 29,
                  "charOffset": 1222,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 29,
                  "charOffset": 1160,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9454e35034fd93e6524fb2aa5a6cbd639fcb575ccd807f6cbda1e3534d2fb5b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 36,
                  "charOffset": 1229,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 36,
                  "charOffset": 1160,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeTerminal(&canvas);\n\n    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c09d20d98dd145b54f1073eaaf5d612e4fda25aa60e995fc485e67d172acfa9b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "4096 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 1274,
                  "charLength": 4,
                  "snippet": {
                    "text": "4096"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 1194,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeMalloc(1024 * 1024 * 1024);\n\n    FileBuffer* in = allocFileBuffer(4096);\n    FileBuffer* out = allocFileBuffer(4096);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "323d96d5321dcc78b0479415e0d4bdfd881735b9b98dc065e4d17af909094648"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "4096 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "charOffset": 1319,
                  "charLength": 4,
                  "snippet": {
                    "text": "4096"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 39,
                  "charOffset": 1236,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    FileBuffer* in = allocFileBuffer(4096);\n    FileBuffer* out = allocFileBuffer(4096);\n\n    initializeBuffers(in, out);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "297dc04a36d49ba10414affccca6b62fbe89da0963cbdcc8a867c7c02191c363"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 30,
                  "charOffset": 1389,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 30,
                  "charOffset": 1327,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeBuffers(in, out);\n\n    registerInterruptHandler(0x20 + 1, handleKeyboard);\n\n    int isValidRsdp = validateRSDP(&bootInfo.rsdp);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1579e4fabca132cb18df87fd1ac3f4996308355d26ef78fc071cc4be483028e8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 28,
                  "charOffset": 1727,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 28,
                  "charOffset": 1622,
                  "snippet": {
                    "text": "    for(int i = 0; i < 4; i++) {\n        IdeDevice* device = &ide.devices[i];\n        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a971f4e9352b6bc74bda8ed67d5a05c05974451af3f42cf10ae8a31f7dd942a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 29,
                  "charOffset": 1832,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 29,
                  "charOffset": 1700,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6e5d191c73633d62335e26675b458921a2a4599fef5cabe5d2bec32d12bbb94"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 34,
                  "charOffset": 1837,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 34,
                  "charOffset": 1700,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(!device->exists) continue;\n        printf(\"Found drive %s with size %d GB\\n\", device->model,\n               device->size/1024/1024/2);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81f322f340d21c6d163f6e91801e80533ae4d382157ea7307eea3fdb453da90c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 27,
                  "charOffset": 2082,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 27,
                  "charOffset": 1996,
                  "charLength": 2,
                  "snippet": {
                    "text": "    if(hasCpuId()) {\n        printf(\"CPU ID is present\\n\");\n        char vendorString[13];\n        getVendorIdString(vendorString, 13);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "999596dc24ec02bdc120e21a2f5bd9b867c9295900bc5d1461aab25305f09ce2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 41,
                  "charOffset": 2127,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 41,
                  "charOffset": 2017,
                  "charLength": 2,
                  "snippet": {
                    "text": "        printf(\"CPU ID is present\\n\");\n        char vendorString[13];\n        getVendorIdString(vendorString, 13);\n\n        printf(\"Vendor is: %s\\n\", vendorString);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "037cc68cff7978af9c1c31bdaf771e10870d0871c4b9018243e7744803a63a67"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'c' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/kernel.c"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 18,
                  "charOffset": 2505,
                  "charLength": 1,
                  "snippet": {
                    "text": "c"
                  }
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 18,
                  "charOffset": 2438,
                  "charLength": 1,
                  "snippet": {
                    "text": "    for (;;) {\n        if(bufferAvailable(out)) {\n            char c;\n            int result = readChar(out, &c);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "973950cb3ef752e8c5d48671ccfe14c0b4976206ec35d72931c4c3377b7d72c7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 1060,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 1,
                  "snippet": {
                    "text": " */\n\n#include <string.h>\n#include <stdio.h>\n#include \"bucket.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0890949070e3ab2c2414ffb374e76ac304454dd318a7a7573d35140b0cd93a76"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'kernel_heap' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 7,
                  "charOffset": 1193,
                  "charLength": 11,
                  "snippet": {
                    "text": "kernel_heap"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 7,
                  "charOffset": 1157,
                  "charLength": 11,
                  "snippet": {
                    "text": "#define MODNAME \"malloc.cpp\"\n\nvoid* kernel_heap = NULL;\n\n// initialize the heap by simply allocating a single Bucket"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c9475b27098c7da30e68159efddd03a4ce8fd43bbe35ad348b3dc5356b32822"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'kernel_heap' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 7,
                  "charOffset": 1193,
                  "charLength": 11,
                  "snippet": {
                    "text": "kernel_heap"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 7,
                  "charOffset": 1157,
                  "charLength": 11,
                  "snippet": {
                    "text": "#define MODNAME \"malloc.cpp\"\n\nvoid* kernel_heap = NULL;\n\n// initialize the heap by simply allocating a single Bucket"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b01bccf567cf4e38ecfc4c5d2403579e77d19d6c5a11f8f0f4c7b11a34b736c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'create_bucket' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "charOffset": 1600,
                  "charLength": 13,
                  "snippet": {
                    "text": "create_bucket"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 25,
                  "charOffset": 1455,
                  "charLength": 13,
                  "snippet": {
                    "text": "// allocates a linear block of memory, in 'size' bytes, and creates\n//  a Bucket for this block, with one (free) Pebble.\nstruct S_MEMORY_BUCKET *create_bucket(size_t size) {\n\n    // do we allocate a minimum?"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9960def1126a206994531e71700dac4e81c69be76346acf93ade6638d7349088"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 26,
                  "charOffset": 1705,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 26,
                  "charOffset": 1630,
                  "snippet": {
                    "text": "    // do we allocate a minimum?\n#ifdef ALLOC_MIN\n    if (size < ALLOC_MIN)\n    size = ALLOC_MIN;\n#endif"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c156144986068d7b52a04e7952c7084535c03ce630829e640a561e371d8e815a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-misleading-indentation",
          "ruleIndex": 713,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "misleading indentation: statement is indented too deeply"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "charOffset": 1784,
                  "charLength": 4,
                  "snippet": {
                    "text": "size"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 1735,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // size must be an even number of pages\n    size = (size + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n\n    struct S_MEMORY_BUCKET *bucket = (struct S_MEMORY_BUCKET *) mmap(NULL, size / PAGE_SIZE);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4cb57ae941c60458827be233df7f0ce713551abadc6b095c6a851c3930e19b2e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "charOffset": 2691,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 9,
                  "charOffset": 2619,
                  "charLength": 6,
                  "snippet": {
                    "text": "        first->size = bucket->largest;\n#ifdef MEM_USE_DEBUGNAME\n        memset(first->name, 0, MAX_DEBUGNAME);\n#endif\n        first->parent = bucket;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "303282b90776a6c7335194526bf855d524b53ca36635a5c4986abe8483d8217f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 26,
                  "charOffset": 3280,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 26,
                  "charOffset": 3171,
                  "snippet": {
                    "text": "    // don't remove the initial bucket\n    if (bucket && (bucket != kernel_heap)) {\n        if (bucket->prev)\n            bucket->prev->next = bucket->next;\n        if (bucket->next)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "643098ef8e09eca6a0a4cf2b4b58eaef86076e7fad47557f3414aff81b3803d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 26,
                  "charOffset": 3353,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 26,
                  "charOffset": 3255,
                  "snippet": {
                    "text": "        if (bucket->prev)\n            bucket->prev->next = bucket->next;\n        if (bucket->next)\n            bucket->next->prev = bucket->prev;\n        munmap(bucket, bucket->size);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b693e3260f6b52e1cf0b7af6a3fd617940f0b6ec5ed0be8c604153e8075df5d2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 27,
                  "charOffset": 3695,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 27,
                  "charOffset": 3644,
                  "snippet": {
                    "text": "\n    while (p != NULL) {\n        if (p->size > ret)\n            ret = p->size;\n        p = p->next;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15906d594abcd7e29e78d1f6f48884af602a7355e164488216f4f6565f74949e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'place_pebble' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 25,
                  "charOffset": 4054,
                  "charLength": 12,
                  "snippet": {
                    "text": "place_pebble"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 25,
                  "charOffset": 3896,
                  "charLength": 12,
                  "snippet": {
                    "text": "// it is assumed that the caller has already checked that this bucket\n//  isn't full and can hold the pebble, though we check anyway.\nstruct S_MEMORY_PEBBLE *place_pebble(struct S_MEMORY_BUCKET *bucket, struct S_MEMORY_PEBBLE *pebble) {\n    struct S_MEMORY_PEBBLE *start = bucket->first;\n    struct S_MEMORY_PEBBLE *best = NULL;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "845deddda3f0779d77c95ec6be9367d64911dde0e306cbda900b3900b3255034"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 13,
                  "charOffset": 5142,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 13,
                  "charOffset": 5062,
                  "charLength": 6,
                  "snippet": {
                    "text": "            best->lflags = pebble->lflags;\n#ifdef MEM_USE_DEBUGNAME\n            memcpy(best->name, pebble->name, MAX_DEBUGNAME + 1);\n#endif\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc766e5644d09266cff451cb86d3b02b013c2b68a1cf2ff9959dfcc8f34db8dc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 17,
                  "charOffset": 5851,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 17,
                  "charOffset": 5762,
                  "charLength": 6,
                  "snippet": {
                    "text": "                start->lflags = pebble->lflags;\n#ifdef MEM_USE_DEBUGNAME\n                memcpy(start->name, pebble->name, MAX_DEBUGNAME + 1);\n#endif\n                break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe8da32466660c6f3ba99d652c8413c546fe27a4390658e5ab1bc783697d4268"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'new_size' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 12,
                  "charOffset": 6257,
                  "charLength": 8,
                  "snippet": {
                    "text": "new_size"
                  }
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 12,
                  "charOffset": 6115,
                  "charLength": 8,
                  "snippet": {
                    "text": "struct S_MEMORY_PEBBLE *split_pebble(struct S_MEMORY_PEBBLE *pebble, size_t size) {\n    struct S_MEMORY_PEBBLE *new_pebble = NULL;\n    size_t new_size;\n\n    if (SPLIT_PEBBLE(pebble->size, size)) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efc6fd02895f9753afcc6386f7130c391e6dd5e2bb090f82d2c1a665ee35d1e1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 9,
                  "charOffset": 6512,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 9,
                  "charOffset": 6312,
                  "charLength": 6,
                  "snippet": {
                    "text": "        new_size = (size + (PEBBLE_MIN_ALIGN - 1)) & ~(PEBBLE_MIN_ALIGN - 1);\n        new_pebble = (struct S_MEMORY_PEBBLE *) ((uint8_t *) pebble + sizeof(struct S_MEMORY_PEBBLE) + new_size);\n        memcpy(new_pebble, pebble, sizeof(struct S_MEMORY_PEBBLE));\n        new_pebble->size = pebble->size - new_size - sizeof(struct S_MEMORY_PEBBLE);\n        new_pebble->prev = pebble;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb2ab8ee903fdecd044c19e85b872f2f9bac9db6576150ac0f83d2b5cce591c0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 55,
                  "charOffset": 7134,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 55,
                  "charOffset": 6976,
                  "snippet": {
                    "text": "    if (pebble && pebble->next) {\n        if (PEBBLE_IS_FREE(pebble) && PEBBLE_IS_FREE(pebble->next)) {\n            if (pebble->parent->first == pebble->next)  // don't \"delete\" the Bucket->first pebble before we update it\n                pebble->parent->first = pebble;\n            pebble->size += pebble->next->size + sizeof(struct S_MEMORY_PEBBLE);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86bca7481540039ca6d943f8b1084aa3fd700afc0ec92e43e24ac5fd15e2de92"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 30,
                  "charOffset": 7404,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 30,
                  "charOffset": 7247,
                  "snippet": {
                    "text": "            pebble->size += pebble->next->size + sizeof(struct S_MEMORY_PEBBLE);\n            pebble->next = pebble->next->next;\n            if (pebble->next)\n                pebble->next->prev = pebble;\n            bucket_update_largest(pebble->parent);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "261b68ea2b5c73b13b82293a65085d931d20e43c5f5a5dc162953ad009861b87"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 49,
                  "charOffset": 7870,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 49,
                  "charOffset": 7718,
                  "snippet": {
                    "text": "    if (pebble && pebble->prev) {\n        if (PEBBLE_IS_FREE(pebble) && PEBBLE_IS_FREE(pebble->prev)) {\n            if (pebble->parent->first == pebble)  // don't \"delete\" the Bucket->first pebble before we update it\n                pebble->parent->first = pebble->prev;\n            pebble->prev->size += pebble->size + sizeof(struct S_MEMORY_PEBBLE);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af4f3a942b03277b419be2d9957d0d0ae5255aaf06121f6ece5cd0004008de28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 30,
                  "charOffset": 8146,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 30,
                  "charOffset": 7989,
                  "snippet": {
                    "text": "            pebble->prev->size += pebble->size + sizeof(struct S_MEMORY_PEBBLE);\n            pebble->prev->next = pebble->next;\n            if (pebble->next)\n                pebble->next->prev = pebble->prev;\n            pebble = pebble->prev;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b4c8529876592e139780453d0658bf58a3fbc13a996f52e0d06812a6de4486e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'malloc_dump' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 6,
                  "charOffset": 8706,
                  "charLength": 11,
                  "snippet": {
                    "text": "malloc_dump"
                  }
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 6,
                  "charOffset": 8680,
                  "charLength": 11,
                  "snippet": {
                    "text": "\n#ifdef MALLOC_DEBUG\nvoid malloc_dump(void* bucket) {\n  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd38e893026f6e2204230704c6519391c7761c709ad2243a1eb1a068b975e751"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 3,
                  "charOffset": 8805,
                  "charLength": 6,
                  "snippet": {
                    "text": "struct"
                  }
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 3,
                  "charOffset": 8701,
                  "charLength": 6,
                  "snippet": {
                    "text": "void malloc_dump(void* bucket) {\n  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7c9606f222ba901e1fea3e8d72f53e57068e30d11b3c7879c6b151d3185602d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pebble' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 27,
                  "charOffset": 8829,
                  "charLength": 6,
                  "snippet": {
                    "text": "pebble"
                  }
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 27,
                  "charOffset": 8701,
                  "charLength": 6,
                  "snippet": {
                    "text": "void malloc_dump(void* bucket) {\n  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e491c452cb6e659dbb83897ae0aa2e20693555f77f4f3ca10fbe7db366112127"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'prev' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 36,
                  "charOffset": 8838,
                  "charLength": 4,
                  "snippet": {
                    "text": "prev"
                  }
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 36,
                  "charOffset": 8701,
                  "charLength": 4,
                  "snippet": {
                    "text": "void malloc_dump(void* bucket) {\n  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ae1c636f27d0fe7b03263f3f9c9e36f611061d01cc22024bf470a1fdb822a36"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 3,
                  "charOffset": 8846,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 3,
                  "charOffset": 8734,
                  "charLength": 3,
                  "snippet": {
                    "text": "  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n\n  printf(\"\\n\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30b489a46c4540dfff1f9ae9e53270691e1276e56379f40c2bc21e5c32250334"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'i' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 7,
                  "charOffset": 8850,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 7,
                  "charOffset": 8734,
                  "charLength": 1,
                  "snippet": {
                    "text": "  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n\n  printf(\"\\n\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec0d4f83fe334fedaf9367620cdc616edb633aa4134dc1641224f25e2b2cbcef"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'j' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 10,
                  "charOffset": 8853,
                  "charLength": 1,
                  "snippet": {
                    "text": "j"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 10,
                  "charOffset": 8734,
                  "charLength": 1,
                  "snippet": {
                    "text": "  struct S_MEMORY_BUCKET *start = (struct S_MEMORY_BUCKET *) bucket;\n  struct S_MEMORY_PEBBLE *pebble, *prev;\n  int i, j;\n\n  printf(\"\\n\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2837d3cacffe4e715534b8bc56bf63a5f11011576a4b304519aa5a7b4f182f67"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 45,
                  "charOffset": 9052,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 260,
                  "startColumn": 45,
                  "charOffset": 8910,
                  "snippet": {
                    "text": "    printf(\"Bucket: #%d:  0x%x\\n\", i, start);\n    printf(\"         Magic: 0x%x\\n\", start->magic);\n    if (start->magic != MALLOC_MAGIC_BUCKET)\n      break;\n    printf(\"   local flags: 0x%x\\n\", start->lflags);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cefc0a929acbb42858effb418805e9acb12c327545429327a45866528d75cf62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 48,
                  "charOffset": 9602,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 48,
                  "charOffset": 9450,
                  "snippet": {
                    "text": "      printf(\"Pebble: #%d: 0x%x\\n\", j, pebble);\n      printf(\"           Magic: 0x%x\\n\", pebble->magic);\n      if (pebble->magic != MALLOC_MAGIC_PEBBLE)\n        break;\n      printf(\"    source flags: 0x%x\\n\", pebble->lflags);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "240fce458b6beaa9041f28302be049d0672c2bf69f6a100c4119ef380a9918a8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'kmalloc' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "charOffset": 10326,
                  "charLength": 7,
                  "snippet": {
                    "text": "kmalloc"
                  }
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 7,
                  "charOffset": 10312,
                  "charLength": 7,
                  "snippet": {
                    "text": "#endif\n\nvoid *kmalloc(size_t size, uint64_t alignment, uint32_t flags, char *name) {\n    void *ret = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a98ced5aa8de517084e3516eab97ea83aee3f72506f31fb6dd68f8588c6e8faa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "misc-unused-parameters",
          "ruleIndex": 614,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "parameter 'alignment' is unused"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 37,
                  "charOffset": 10356,
                  "charLength": 9,
                  "snippet": {
                    "text": "alignment"
                  }
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 37,
                  "charOffset": 10312,
                  "charLength": 9,
                  "snippet": {
                    "text": "#endif\n\nvoid *kmalloc(size_t size, uint64_t alignment, uint32_t flags, char *name) {\n    void *ret = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "361b4182d97203c087af4c1297c09718cc55dbb8dda6b3c39d27539ccee6657d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 32,
                  "charOffset": 10509,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 302,
                  "startColumn": 32,
                  "charOffset": 10419,
                  "snippet": {
                    "text": "\n    // minimum amount of memory we allocate to the caller\n    if (size < PEBBLE_MIN_SIZE)\n        size = PEBBLE_MIN_SIZE;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3345915975e7140c65734008cf24a518edcf0b4cd398c191203ce597d88a8fb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.strcpy",
          "ruleIndex": 312,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 5,
                  "charOffset": 10815,
                  "charLength": 6,
                  "snippet": {
                    "text": "strcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 312,
                  "startColumn": 5,
                  "charOffset": 10709,
                  "charLength": 6,
                  "snippet": {
                    "text": "    pebble.size = (size + (PEBBLE_MIN_ALIGN - 1)) & ~(PEBBLE_MIN_ALIGN - 1);\n#ifdef MEM_USE_DEBUGNAME\n    strcpy(pebble.name, name); //modified to use strcpy, since this kernel doesn't support strncpy yet.\n#endif\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab672bf2a0198473ea8bfbb15247d2f0cebffcce7e002af4f34412f564876adf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 29,
                  "charOffset": 11195,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 320,
                  "startColumn": 29,
                  "charOffset": 11075,
                  "snippet": {
                    "text": "            ret = place_pebble(bucket, &pebble);\n            bucket_update_largest(bucket);\n            if (ret != NULL)\n                ret = (uint8_t *) ret + sizeof(struct S_MEMORY_PEBBLE);\n            break;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd34ea82adca6de7731e1bffa3264368ef4aeebce749a6a76cfa8a01f7f1e2f2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 29,
                  "charOffset": 11821,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 29,
                  "charOffset": 11701,
                  "snippet": {
                    "text": "            ret = place_pebble(bucket, &pebble);\n            bucket_update_largest(bucket);\n            if (ret != NULL)\n                ret = (uint8_t *) ret + sizeof(struct S_MEMORY_PEBBLE);\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72aef32b83bcf78f9af5ef5fcbfd95418d8040d62c47a92a7d5ad731f017d7e9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 35,
                  "charOffset": 11993,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 342,
                  "startColumn": 35,
                  "charOffset": 11910,
                  "snippet": {
                    "text": "\n    // if we are to clear the memory, do it now\n    if (ret && (flags & (1 << 2)))\n        memset(ret, 0, size);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8812f7fafd31d6094279f23d08b06e7531150a838f8f14717b450c814578e975"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 9,
                  "charOffset": 12002,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 343,
                  "startColumn": 9,
                  "charOffset": 11911,
                  "charLength": 6,
                  "snippet": {
                    "text": "    // if we are to clear the memory, do it now\n    if (ret && (flags & (1 << 2)))\n        memset(ret, 0, size);\n\n    return ret;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4b1e51d2f069f0144d7c76f4bdea4e2ca326fbfd09355b48377466c614993922"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pebble' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 29,
                  "charOffset": 12112,
                  "charLength": 6,
                  "snippet": {
                    "text": "pebble"
                  }
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 29,
                  "charOffset": 12043,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nvoid *realloc(void *ptr, size_t size) {\n    struct S_MEMORY_PEBBLE *pebble;\n    void *ret = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a772eca4570f3e6897abb2252a55d4a57cfd6ddde6301913bcabe1724cf04fe7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 21,
                  "charOffset": 12232,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 357,
                  "startColumn": 21,
                  "charOffset": 12205,
                  "snippet": {
                    "text": "    }\n\n    if (ptr == NULL)\n        return kmalloc(size, 0 /* not used */, 0, MODNAME);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54b67482cfb832d6fe48a15fa598f1887d1b72d3276b15130f92c49e9de1abc7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 30,
                  "charOffset": 12416,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 362,
                  "startColumn": 30,
                  "charOffset": 12294,
                  "snippet": {
                    "text": "    pebble = (struct S_MEMORY_PEBBLE *) ((uint8_t *) ptr - sizeof(struct S_MEMORY_PEBBLE));\n\n    if (size <= pebble->size)\n        ret = shrink_pebble(pebble, size);\n    else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68f0d69adfa025f8de926e91adc167d2ae8b0f2b8f706cdd9abeda0e184596ba"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 39,
                  "charOffset": 12509,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 365,
                  "startColumn": 39,
                  "charOffset": 12417,
                  "snippet": {
                    "text": "        ret = shrink_pebble(pebble, size);\n    else {\n        if (pebble->sflags & (1 << 2))\n            ret = NULL;\n        else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a35017dafe444552008b0dde7da06c8311be5879cdbbfa68df3a8bd7f3515d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 21,
                  "charOffset": 12742,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 370,
                  "startColumn": 21,
                  "charOffset": 12549,
                  "snippet": {
                    "text": "            // the new requested size is larger than the current pebble, so allocate a new space\n            ret = kmalloc(size, 0 /* not used */, pebble->sflags, MODNAME);\n            if (ret)\n                memcpy(ret, ptr, size);\n            mfree(ptr);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc1622ff4dfd5fed16928ebbfae828ea2a39b488cbd8d9e755f521796a688e33"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 17,
                  "charOffset": 12759,
                  "charLength": 6,
                  "snippet": {
                    "text": "memcpy"
                  }
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 17,
                  "charOffset": 12646,
                  "charLength": 6,
                  "snippet": {
                    "text": "            ret = kmalloc(size, 0 /* not used */, pebble->sflags, MODNAME);\n            if (ret)\n                memcpy(ret, ptr, size);\n            mfree(ptr);\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bbb27ee943bdb27a9642244a65fb9078bc5015fa7a618a72d272517c0db74fb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 21,
                  "charOffset": 12995,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 383,
                  "startColumn": 21,
                  "charOffset": 12950,
                  "snippet": {
                    "text": "void mfree(void *ptr) {\n\n    if (ptr == NULL)\n        return;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2692249913efe518ab07eea189b1dd5fe01bd5c6079f211878a771abd6f0023"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 105,
                  "charOffset": 13633,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 105,
                  "charOffset": 13413,
                  "snippet": {
                    "text": "    // if this empties the bucket, shall we remove the bucket?\n    struct S_MEMORY_BUCKET *bucket = pebble->parent;\n    if (PEBBLE_IS_FREE(bucket->first) && (bucket->first->prev == NULL) && (bucket->first->next == NULL))\n        remove_bucket(bucket);\n    else"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b59cb575d8041db621a2e1028f5e6478cd07be0de2ee36ed4cd088ba8ef11c62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/bucket/malloc.c"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 9,
                  "charOffset": 13673,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 404,
                  "startColumn": 9,
                  "charOffset": 13529,
                  "snippet": {
                    "text": "    if (PEBBLE_IS_FREE(bucket->first) && (bucket->first->prev == NULL) && (bucket->first->next == NULL))\n        remove_bucket(bucket);\n    else\n        bucket_update_largest(bucket);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21778690aa8ab76a22215171381ce9687cc5114c2cc5146385555e3eb2909835"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include \"bucket/bucket.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01788d40ca7b59b7d870730c5a0a91e6655b4695f96b9614dd1b82b763bb7047"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'isMallocInitialized' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "charOffset": 116,
                  "charLength": 19,
                  "snippet": {
                    "text": "isMallocInitialized"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 66,
                  "charLength": 19,
                  "snippet": {
                    "text": "void* dumbMalloc(uint32_t size); //in page.c\n\nint isMallocInitialized = 0;\n\nvoid initializeMalloc(size_t size) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95cd2e6481bb6e8215aad794435790682b7dffdd927d7175a754f60aace87623"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "charOffset": 390,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 7,
                  "charOffset": 304,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (isMallocInitialized) {\n        return kmalloc(size, 1, 0, \"malloc'ed\");\n    } else {\n        return dumbMalloc(size);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74086cdcc7dbf771eee693d46530304d816c7c1e772ab4e3f9cdc8bb146dcdfa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 26,
                  "charOffset": 526,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 26,
                  "charOffset": 480,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid testMalloc() {\n    void* first = malloc(100);\n    free(first);\n    void* second = malloc(100);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b685fe0a865c552ab34f921b76134478376034cbd097b8e7e6bd50dbf89b1cd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 27,
                  "charOffset": 575,
                  "charLength": 3,
                  "snippet": {
                    "text": "100"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 27,
                  "charOffset": 501,
                  "charLength": 3,
                  "snippet": {
                    "text": "    void* first = malloc(100);\n    free(first);\n    void* second = malloc(100);\n    free(second);\n#pragma clang diagnostic push"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bc56af43a14192dc83dd8e6edf40ef6eb426a820b7600015d1a8a903665555e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 26,
                  "charOffset": 892,
                  "charLength": 6,
                  "snippet": {
                    "text": "100000"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 26,
                  "charOffset": 837,
                  "charLength": 6,
                  "snippet": {
                    "text": "#pragma clang diagnostic pop\n\n    void* large = malloc(100000);\n    void* next = malloc(10000);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "756ac24b19ef832987d3c43626e75a7b072cb0efdbf1695f286665bfcbad1190"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25,
                  "charOffset": 925,
                  "charLength": 5,
                  "snippet": {
                    "text": "10000"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 25,
                  "charOffset": 866,
                  "charLength": 5,
                  "snippet": {
                    "text": "\n    void* large = malloc(100000);\n    void* next = malloc(10000);\n\n    if (next - large < 100000) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a0fcd8de6adadaf462fc1c409ba2523629a7f148ca77629bd97742b69c0a50b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "100000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 24,
                  "charOffset": 957,
                  "charLength": 6,
                  "snippet": {
                    "text": "100000"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 24,
                  "charOffset": 901,
                  "charLength": 6,
                  "snippet": {
                    "text": "    void* next = malloc(10000);\n\n    if (next - large < 100000) {\n        printf(\"Allocated next memory too close to existing\");\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f552da5cc3b1259a3ac009317429db47557a5573cebc9520c1abd214736e84e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 21,
                  "charOffset": 1091,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 21,
                  "charOffset": 1054,
                  "charLength": 2,
                  "snippet": {
                    "text": "    free(next);\n\n    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5d2e186f9bc3059d99842625ab1416359d5642643beef67c007e8c6f60f4d8c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 25,
                  "charOffset": 1120,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 25,
                  "charOffset": 1070,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0990da63c83d5f747326c47a7abaf54f78611331be3ad8330a20dfeed1bdec4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "charOffset": 1161,
                  "charLength": 5,
                  "snippet": {
                    "text": "10000"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 31,
                  "charOffset": 1071,
                  "charLength": 5,
                  "snippet": {
                    "text": "    void* addresses[20];\n    for (int i = 0; i < 20; i++) {\n        addresses[i] = malloc(10000);\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "136d5dda2380e4ade977fe344caa0e4b5f79af88c4d53401285fa44bf4c47a61"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/malloc.c"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 25,
                  "charOffset": 1200,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 25,
                  "charOffset": 1169,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for (int i = 0; i < 20; i++) {\n        free(addresses[i]);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83eaf74a92606fe0638cf913cbab20a9b80fa8594c7b7d1d8a2ba53826eea161"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n#include <stdio.h>\n#include <string.h>\n#include <mem.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0d5a7a5ebb573ff28ae30ed10115031483074cde17053ac8e3cb7b2514b1155"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'tableAllocatorPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 17,
                  "snippet": {
                    "text": "tableAllocatorPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 7,
                  "charOffset": 495,
                  "charLength": 17,
                  "snippet": {
                    "text": " */\n\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03c5ad5090ea93af872a64132ba816f9e11d351b8e9466baba7425c1e5ee420a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'tableAllocatorPtr' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "charOffset": 506,
                  "charLength": 17,
                  "snippet": {
                    "text": "tableAllocatorPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 7,
                  "charOffset": 495,
                  "charLength": 17,
                  "snippet": {
                    "text": " */\n\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe42d1ece49c96c94075d9f5b2ee2034fad5eb9fabf297f188c7d184af68a554"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'isPagingEnabled' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "charOffset": 529,
                  "charLength": 15,
                  "snippet": {
                    "text": "isPagingEnabled"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 5,
                  "charOffset": 499,
                  "charLength": 15,
                  "snippet": {
                    "text": "\nvoid* tableAllocatorPtr;\nint isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "147c311fdcd4ed2c968500a7603898c7a4595c6a8779b69f0f3e14d9f0854b81"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageDirectory' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "charOffset": 566,
                  "charLength": 13,
                  "snippet": {
                    "text": "pageDirectory"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 525,
                  "charLength": 13,
                  "snippet": {
                    "text": "int isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;\n\n/**"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8177b7123e15ad5bb4a5a3bff39c042a8422814145dd71c7182cbeb5a95636c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageDirectory' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "charOffset": 566,
                  "charLength": 13,
                  "snippet": {
                    "text": "pageDirectory"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 525,
                  "charLength": 13,
                  "snippet": {
                    "text": "int isPagingEnabled = 0;\n\nPageDirectory* pageDirectory;\n\n/**"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ebe94c9b49d29058cb1120abd8933312898ffbbe29a281edec33781c52d7e5d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 25,
                  "charOffset": 1182,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 25,
                  "charOffset": 989,
                  "snippet": {
                    "text": "void* convertVirtualToPhysical(PageDirectory* dir, uint32_t virtualAddress) {\n    // if we haven't set up the page directory, we just need to subtract the load address.\n    if(!isPagingEnabled) return (void*) (virtualAddress - LOAD_MEMORY_ADDRESS);\n\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9841b3f0053fab3da5df66f63184e31b5afa9aa6895010126df9021f981f3380"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 33,
                  "charOffset": 1190,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 33,
                  "charOffset": 989,
                  "charLength": 1,
                  "snippet": {
                    "text": "void* convertVirtualToPhysical(PageDirectory* dir, uint32_t virtualAddress) {\n    // if we haven't set up the page directory, we just need to subtract the load address.\n    if(!isPagingEnabled) return (void*) (virtualAddress - LOAD_MEMORY_ADDRESS);\n\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a043fe6f160c597dca940497caeec8cd4f735508b1b4bf085356401b9ade90a4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-core.NullDereference",
          "ruleIndex": 225,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Array access (via field 'pages') results in a null pointer dereference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 28,
                  "charOffset": 1562,
                  "charLength": 5,
                  "snippet": {
                    "text": "table"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 28,
                  "charOffset": 1528,
                  "charLength": 5,
                  "snippet": {
                    "text": "    }\n\n    PageTableEntry entry = table->pages[tableIndex];\n    if (!entry.present) {\n        printf(\"Page table entry at %d does not exist\", dirIndex);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "217d40a5de27f5ed46492bfe8485e5211c2e6bf0cb06324454ad6fa00443c579"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 23,
                  "charOffset": 1744,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 23,
                  "charOffset": 1687,
                  "charLength": 2,
                  "snippet": {
                    "text": "    uint32_t frame = entry.frame;\n\n    frame = (frame << 12) + pageIndex;\n\n    return (void*) frame;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e03a84b341b6a6384c05fd42c39fe993317b9f9b8c53597daf41b54090fc2656"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 12,
                  "charOffset": 1773,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 12,
                  "charOffset": 1722,
                  "charLength": 1,
                  "snippet": {
                    "text": "    frame = (frame << 12) + pageIndex;\n\n    return (void*) frame;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6024ee1e1408ec11e611247bd7499577214f68a9be008a59d31db4c5ce43cd85"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "charOffset": 2246,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 16,
                  "charOffset": 2184,
                  "snippet": {
                    "text": "\n    PageTable* table = dir->tables[dirIndex];\n    if (!table) return 0;\n\n    PageTableEntry entry = table->pages[tableIndex];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf175026b748d14f86f7fcee585821ac14e7b57d34089b3086e5bcab1cebd5a1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'allocatePhysicalPage' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "charOffset": 2345,
                  "charLength": 20,
                  "snippet": {
                    "text": "allocatePhysicalPage"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 6,
                  "charOffset": 2337,
                  "charLength": 20,
                  "snippet": {
                    "text": "}\n\nvoid allocatePhysicalPage(PageDirectory* dir, uint32_t virtualAddress, uint32_t physicalAddress) {\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);\n    uint32_t tableIndex = getTableIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4c58f4519ab030d8111c4497f556a59b3ac00ceaac7989148dc9bdfeff14094"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "charOffset": 2726,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 9,
                  "charOffset": 2657,
                  "charLength": 6,
                  "snippet": {
                    "text": "    if (!table) {\n        table = malloc(sizeof(PageTable));\n        memset(table, 0, sizeof(PageTable));\n\n        //We need a physical address."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78bd12afccdee3344bb11d6462f77ceaf684425a2171c992baa42c41314d05ad"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 35,
                  "charOffset": 2983,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 35,
                  "charOffset": 2887,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        PageDirectoryEntry* entry = &dir->entries[dirIndex];\n        entry->frame = address >> 12;\n        entry->present = 1;\n        entry->writable = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95c5046fbf393ca7e2609affeff52ed65f42b84f6f1767ccc5f0d21e922cc2ec"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'allocatePage' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 6,
                  "charOffset": 3480,
                  "charLength": 12,
                  "snippet": {
                    "text": "allocatePage"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 6,
                  "charOffset": 3472,
                  "charLength": 12,
                  "snippet": {
                    "text": "}\n\nvoid allocatePage(PageDirectory* dir, uint32_t virtualAddress) {\n    uint32_t dirIndex = getPageDirectoryIndex(virtualAddress);\n    uint32_t tableIndex = getTableIndex(virtualAddress);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8f13cc85e5eab59129c036c7d9a570f05a3e41b2e7fee2c3966d9b6f07ce0ee"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 9,
                  "charOffset": 3827,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 3758,
                  "charLength": 6,
                  "snippet": {
                    "text": "    if (!table) {\n        table = malloc(sizeof(PageTable));\n        memset(table, 0, sizeof(PageTable));\n\n        //We need a physical address."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc6cca757b543ac9eb5af5461d5212822733b11a383d6bfaea4a7518f8777a5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 35,
                  "charOffset": 4084,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 35,
                  "charOffset": 3988,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n        PageDirectoryEntry* entry = &dir->entries[dirIndex];\n        entry->frame = address >> 12;\n        entry->present = 1;\n        entry->writable = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0de5ba5bdd96409cf60bb60ff1f21f1a3d411cd9eaa5999bec41d53c84f8448"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 37,
                  "charOffset": 4829,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 37,
                  "charOffset": 4716,
                  "charLength": 4,
                  "snippet": {
                    "text": "    uint32_t present = errorCode & 0x01;\n    uint32_t rw = errorCode & 0x02;\n    uint32_t reserved = errorCode & 0x08;\n    uint32_t instructionFetch = errorCode & 0x10;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aecd4157ffd5cd84d0f6868a39e6281ac40669c3a73e6a73855aee6f69d82c75"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 45,
                  "charOffset": 4879,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 45,
                  "charOffset": 4757,
                  "charLength": 4,
                  "snippet": {
                    "text": "    uint32_t rw = errorCode & 0x02;\n    uint32_t reserved = errorCode & 0x08;\n    uint32_t instructionFetch = errorCode & 0x10;\n\n    printf(\"Possible causes:\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "321e446285b9ca73a36f3a2c7809207432927b53a8696db3c9fe0b03b86a2b2a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 18,
                  "charOffset": 4937,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 18,
                  "charOffset": 4885,
                  "snippet": {
                    "text": "\n    printf(\"Possible causes:\\n\");\n    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dd30ce330f5aa80528382e942ede1d30495974b948b813df52d0a4a27cf2190"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 12,
                  "charOffset": 4982,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 12,
                  "charOffset": 4886,
                  "snippet": {
                    "text": "    printf(\"Possible causes:\\n\");\n    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b60eaacf7e5442c9a7044f1009e7f23265076ab3ed0ad6d38f3e1132a36799ba"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 18,
                  "charOffset": 5031,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 18,
                  "charOffset": 4920,
                  "snippet": {
                    "text": "    if (!present) printf(\"Page is not present\\n\");\n    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");\n    printf(\"\\n\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cdf65e248496d1b5173f47befc687dede45568ca4ed903f026e770915a20c44d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 26,
                  "charOffset": 5093,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 26,
                  "charOffset": 4971,
                  "snippet": {
                    "text": "    if (rw) printf(\"Page is read-only\\n\");\n    if (reserved) printf(\"Overwrote reserved bit\\n\");\n    if (instructionFetch) printf(\"Error on instruction fetch\\n\");\n    printf(\"\\n\");\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4970f73e127840533098539e2bb49508334a1038d6c5f62cf60ac30826d1dc9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 5,
                  "charOffset": 5181,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 5,
                  "charOffset": 5154,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faac0a188eff621f69d8a3df00929a806b354277646d3f5faa2eee15ae2c5a7c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cr0' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 14,
                  "charOffset": 5190,
                  "charLength": 3,
                  "snippet": {
                    "text": "cr0"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 14,
                  "charOffset": 5154,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a339f475a299e433cdf3a641e377b6f145057909b0ae76415f542b4874deea28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cr4' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 19,
                  "charOffset": 5195,
                  "charLength": 3,
                  "snippet": {
                    "text": "cr4"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 19,
                  "charOffset": 5154,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid enablePaging() {\n    uint32_t cr0, cr4;\n\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f801ad5aad3c020f5f5efa4379daf1774705daabdddc255e3e28b0c598468bd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 5264,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 13,
                  "charOffset": 5200,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    __asm__ volatile(\"mov %%cr4, %0\" : \"=r\"(cr4));\n    cr4 &= ~0x10;\n    __asm__ volatile(\"mov %0, %%cr4\"::\"r\"(cr4));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "035a29e2628470f24d00b02a8726d9a475b4efd6d9df36be54f7b30ccb8269f5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 12,
                  "charOffset": 5382,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x80000000"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 12,
                  "charOffset": 5319,
                  "charLength": 10,
                  "snippet": {
                    "text": "\n    __asm__ volatile(\"mov %%cr0, %0\" : \"=r\"(cr0));\n    cr0 |= 0x80000000;\n    __asm__ volatile(\"mov %0, %%cr0\"::\"r\"(cr0));\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "763d6399cf7034e0d782b010692ef930f8a71ae6d3d377d4efbc30f4f1fb316b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 16,
                  "charOffset": 5813,
                  "charLength": 9,
                  "snippet": {
                    "text": "0x0000FFF"
                  }
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 16,
                  "charOffset": 5743,
                  "charLength": 9,
                  "snippet": {
                    "text": " */\nstatic inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "538d796be2e5c56820bca9c098320ba4f05f9c9a4dae677e91d4a1dd5f745974"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 32,
                  "charOffset": 5829,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 32,
                  "charOffset": 5743,
                  "snippet": {
                    "text": " */\nstatic inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87f1737c0009b2065286b067734e265a090dff92bb14c7417285c90c138e4693"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFF000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "charOffset": 5860,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFF000"
                  }
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 19,
                  "charOffset": 5747,
                  "charLength": 10,
                  "snippet": {
                    "text": "static inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aaeb95bb098d512c5ce75a11f1fdb7507f753307fad207a167283d5376ae69cd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 33,
                  "charOffset": 5874,
                  "charLength": 6,
                  "snippet": {
                    "text": "0x1000"
                  }
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 33,
                  "charOffset": 5747,
                  "charLength": 6,
                  "snippet": {
                    "text": "static inline uint32_t alignToPage(uint32_t ptr) {\n    if ((ptr & 0x0000FFF) == 0) return ptr;\n    return (ptr & 0xFFFFF000) + 0x1000;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "879e7f8984245b097db638a6fac63db0ba62ba582d495da6caad370bdda49bc7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 12,
                  "charOffset": 6430,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 12,
                  "charOffset": 6412,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return (void*) alignedAddress;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "056f8db3e42e726803ad37e78d75bab82f9fa1d9e55d4a2f72129d5e7f8d61d7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'alignedAddress' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 14,
                  "charOffset": 6555,
                  "charLength": 14,
                  "snippet": {
                    "text": "alignedAddress"
                  }
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 14,
                  "charOffset": 6457,
                  "charLength": 14,
                  "snippet": {
                    "text": "void* mmap(void* address, size_t length) {\n    size_t numPages = length / PAGE_SIZE;\n    uint32_t alignedAddress;\n    if (address == NULL) {\n        //find some unallocated pages after our kernel."
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3ea1d6474f746710d29aeff03b398f72b7a7c9c26fa6a9ed9402266221c59cc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 61,
                  "charOffset": 6714,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 61,
                  "charOffset": 6571,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (address == NULL) {\n        //find some unallocated pages after our kernel.\n        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e71318ecce1a911cc4cecc96dbf1b1e07a4af97cd799cf2950ba599e129e69b0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 68,
                  "charOffset": 6721,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 68,
                  "charOffset": 6571,
                  "charLength": 4,
                  "snippet": {
                    "text": "    if (address == NULL) {\n        //find some unallocated pages after our kernel.\n        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1d06f82781fa8f98850fb35c58ec624bd54856a5c88e4ced112c43229926db6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 35,
                  "charOffset": 6826,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 35,
                  "charOffset": 6654,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint32_t addressToCheck = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n        while (isPageAllocated(pageDirectory, addressToCheck)) {\n            addressToCheck += 4 * 1024;\n        }\n        alignedAddress = alignToPage(addressToCheck);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b08eeaf031627baec72eff6f398db567fa0caa298f0feb9ee87a5ecb29b40f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 12,
                  "charOffset": 7340,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 12,
                  "charOffset": 7322,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    return (void*) alignedAddress;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fced6490cc4d449f2ff3c5b994a2010478ae09fafda1d5714f6991ee2066eb8c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "charOffset": 7470,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 17,
                  "charOffset": 7451,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21f00eb9532c3a0140f175f8c57e570a826761dfde079b22e35d97ead8c0f95f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "charOffset": 7470,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 17,
                  "charOffset": 7451,
                  "charLength": 6,
                  "snippet": {
                    "text": "}\n\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48922313d3d0aa28b161112f025e8bec8130adfc8b41d5a2c34e9fe81bd1220e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmapSize' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 17,
                  "charOffset": 7494,
                  "charLength": 10,
                  "snippet": {
                    "text": "bitmapSize"
                  }
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 17,
                  "charOffset": 7453,
                  "charLength": 10,
                  "snippet": {
                    "text": "\nextern uint8_t* bitmap;\nextern uint32_t bitmapSize;\n\nvoid initPaging() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c87a53788d3d03d29754b26b2cf9c6ddca59ce0d90989bb4279119764d7214a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 5,
                  "charOffset": 7629,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 5,
                  "charOffset": 7573,
                  "charLength": 6,
                  "snippet": {
                    "text": "    pageDirectory = malloc(sizeof(PageDirectory));\n\n    memset(pageDirectory, 0, sizeof(PageDirectory));\n\n    registerInterruptHandler(14, pageFaultHandler);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be7eb8c3a36ea1fa752c0c82239014e07f286a695a7d9a6dae8c24b62010fd1f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 30,
                  "charOffset": 7708,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 263,
                  "startColumn": 30,
                  "charOffset": 7625,
                  "charLength": 2,
                  "snippet": {
                    "text": "    memset(pageDirectory, 0, sizeof(PageDirectory));\n\n    registerInterruptHandler(14, pageFaultHandler);\n\n    // Map the 4MiB from 0xC0000000 to 0xC0400000"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d11c712944a4eca6312d870d37f9c8985d8424f17b099aeb1bfc7bf06273aa34"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 46,
                  "charOffset": 7827,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 46,
                  "charOffset": 7731,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Map the 4MiB from 0xC0000000 to 0xC0400000\n    uint32_t end = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n    for (uint32_t i = LOAD_MEMORY_ADDRESS; i < end; i += PAGE_SIZE) {\n        allocatePage(pageDirectory, i);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd4c3e42f119399ad1af8afb5f681986998c45f8611ac3b07726571b7355474d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "1024 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/page.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 53,
                  "charOffset": 7834,
                  "charLength": 4,
                  "snippet": {
                    "text": "1024"
                  }
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 53,
                  "charOffset": 7731,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Map the 4MiB from 0xC0000000 to 0xC0400000\n    uint32_t end = LOAD_MEMORY_ADDRESS + 4 * 1024 * 1024;\n    for (uint32_t i = LOAD_MEMORY_ADDRESS; i < end; i += PAGE_SIZE) {\n        allocatePage(pageDirectory, i);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbc7b4a3e26e92d92d4db28d05c7d3ebe987dbe69395fd67a31e70d1abf1e3bc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n#include <stdio.h>\n#include \"pmm.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5e5b67a268a637cd19cf6ecf01242a4281c4c3b8046367597988ebe454e5550"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 125,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 42,
                  "charLength": 6,
                  "snippet": {
                    "text": " * This bitmap is used to determine which pages are currently in use.\n */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "884e955d8cb5cd8792ed6b6741b7bb2ce2f2628194499e10d8e85f68dd882ab6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmap' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 125,
                  "charLength": 6,
                  "snippet": {
                    "text": "bitmap"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 42,
                  "charLength": 6,
                  "snippet": {
                    "text": " * This bitmap is used to determine which pages are currently in use.\n */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a56bb146803d904691950cc4c254ee5629164a1890e9b2bde4f778180e6e6e0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'pageCount' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "charOffset": 142,
                  "charLength": 9,
                  "snippet": {
                    "text": "pageCount"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 10,
                  "charOffset": 112,
                  "charLength": 9,
                  "snippet": {
                    "text": " */\nuint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af6f9f72bbdae92738d039938c9275d2c5f79c831f033d72267a6c29ae16d8b3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'bitmapSize' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "charOffset": 162,
                  "charLength": 10,
                  "snippet": {
                    "text": "bitmapSize"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 10,
                  "charOffset": 116,
                  "charLength": 10,
                  "snippet": {
                    "text": "uint8_t* bitmap;\nuint32_t pageCount;\nuint32_t bitmapSize;\n\nstatic inline void setBit(uint32_t i) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fac06561f7f5351389c426f2883c65cfebcaa77a66b4dec45ec56c6ad2b5fa8b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/mem/pmm.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "charOffset": 1172,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 23,
                  "charOffset": 1076,
                  "snippet": {
                    "text": "uint32_t firstFreePage() {\n    for (uint32_t i = 0; i < pageCount; i++) {\n        if (!isSet(i)) return i;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b60e1acbd24676684c012138c7bd394138c87342c04e3f36ab33e95a53cea69"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "charOffset": 72,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 12,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid* align(const void* address) {\n    return (void*)((uint32_t)((uint8_t*)address + 7) & ~7);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c23a81c62c9baaf05480ede9841cff82436db59e0b838edea66da298646e9222"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 51,
                  "charOffset": 111,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 51,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid* align(const void* address) {\n    return (void*)((uint32_t)((uint8_t*)address + 7) & ~7);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "554fca5f97c00765cbfed68d7a5ab1fd940b8c34e126271bc15a0cc92910a6ef"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 57,
                  "charOffset": 117,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 57,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid* align(const void* address) {\n    return (void*)((uint32_t)((uint8_t*)address + 7) & ~7);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbe5bee4952619f1f7ae27972efbd239e004fea71cf8760ced5f1842db79fbb3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'parseBootInfo' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 5,
                  "charOffset": 128,
                  "charLength": 13,
                  "snippet": {
                    "text": "parseBootInfo"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 5,
                  "charOffset": 121,
                  "charLength": 13,
                  "snippet": {
                    "text": "}\n\nint parseBootInfo(BootInfo* bootInfo, void* address) {\n    Multiboot2TagHeader* header = (Multiboot2TagHeader*) address;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5a80647d9999c05a717fcbc6196903e1cd66add534f9f9724b2d42ef07d3645"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-switch-missing-default-case",
          "ruleIndex": 106,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "switching on non-enum value without default case may not cover all cases"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 532,
                  "charLength": 6,
                  "snippet": {
                    "text": "switch"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 9,
                  "charOffset": 452,
                  "charLength": 6,
                  "snippet": {
                    "text": "        tagAddress = align((uint8_t*)tagAddress + tagAddress->size)) {\n\n        switch (tagAddress->type) {\n            case 4: {\n                MemInfo* memInfo = (MemInfo*) tagAddress;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86c8a0c345cf226d29731f6c9032bfa4521ef071c3ead7bfcf15ea6cb89022a4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "charOffset": 760,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 18,
                  "charOffset": 706,
                  "charLength": 1,
                  "snippet": {
                    "text": "                break;\n            }\n            case 8: {\n                FramebufferInfo* framebufferInfo = (FramebufferInfo*) tagAddress;\n                bootInfo->isGraphics = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20cd5aaa337277927fd32f45a5eecb8f5f85231e7815cc7421fa604f550ec210"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "performance-no-int-to-ptr",
          "ruleIndex": 679,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "integer to pointer cast pessimizes optimization opportunities"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 41,
                  "charOffset": 929,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 41,
                  "charOffset": 765,
                  "charLength": 1,
                  "snippet": {
                    "text": "                FramebufferInfo* framebufferInfo = (FramebufferInfo*) tagAddress;\n                bootInfo->isGraphics = 1;\n                bootInfo->framebuffer = (void*)framebufferInfo->framebuffer;\n                bootInfo->height = framebufferInfo->height;\n                bootInfo->width = framebufferInfo->width;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5eae409625d1cade28d387d31d0e34d88bb23cd822883fc1443af1a42240162"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/multiboot2/multiboot2.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 18,
                  "charOffset": 1259,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 18,
                  "charOffset": 1205,
                  "charLength": 2,
                  "snippet": {
                    "text": "                break;\n            }\n            case 14: {\n                Acpi1RSDP* acpiInfo = (Acpi1RSDP*) tagAddress;\n                bootInfo->rsdp = acpiInfo->rsdp;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97e9dbc449d85e25812beb442a03c2a72091174274053e7052dc91460376157f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include \"ide.h\"\n#include \"system.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a32f20b241a58584430aedc0081561420191bd191182c426b2aa68b5a87616e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ide' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 61,
                  "charLength": 3,
                  "snippet": {
                    "text": "ide"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 36,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"system.h\"\n\nIde ide;\nuint8_t ideBuffer[2048];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36237da0808337195c5cf3f8c677584b8d61d60dadb5e754de37b16a620d1da1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ideBuffer' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 74,
                  "charLength": 9,
                  "snippet": {
                    "text": "ideBuffer"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 56,
                  "charLength": 9,
                  "snippet": {
                    "text": "\nIde ide;\nuint8_t ideBuffer[2048];\n\nvoid disableAtaInterrupts() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ffff3d9e67a9d48579fc3ff1ed332a60a48acf1d40643b01eb59b4554de5f3b2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2048 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 19,
                  "charOffset": 84,
                  "charLength": 4,
                  "snippet": {
                    "text": "2048"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 19,
                  "charOffset": 56,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nIde ide;\nuint8_t ideBuffer[2048];\n\nvoid disableAtaInterrupts() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7d09409db9abc1e276779a728eb847a508b85df3a5f317ffa85fa09240ccf8e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "50 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "charOffset": 288,
                  "charLength": 2,
                  "snippet": {
                    "text": "50"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 24,
                  "charOffset": 234,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nvoid ataIoWait(int channel) {\n    for(int i = 0; i < 50; i++){\n        ideReadControl(channel, ATA_REG_ALTSTATUS);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9532ac8733b443df566d8f1a940ff2f85a171b803e029fdd954507e72b468857"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 32,
                  "charOffset": 638,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 32,
                  "charOffset": 533,
                  "snippet": {
                    "text": "    while(1) {\n        uint8_t status = ideRead(channel, ATA_REG_STATUS);\n        if(status & ATA_SR_ERR) return 1;\n        if(!(status & ATA_SR_BSY)) return 0;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3d1f3079dcfb9b3c49c4f68b338bef6a4c9b1d199dcb2ffbfbc44f4e05bc695"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "charOffset": 683,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 35,
                  "charOffset": 548,
                  "snippet": {
                    "text": "        uint8_t status = ideRead(channel, ATA_REG_STATUS);\n        if(status & ATA_SR_ERR) return 1;\n        if(!(status & ATA_SR_BSY)) return 0;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "267be7c6fd5eefe462525b3db3a486468dff9eafcbc7de88fa68eb4cecd1934f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xA0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 41,
                  "charOffset": 790,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xA0"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 41,
                  "charOffset": 702,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid ataSelect(int channel, int isSecondary) {\n    ideWrite(channel, ATA_REG_HDDEVSEL, 0xA0 | (isSecondary << 4));\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84fed4c025df125f26dc3ec1fc1802f8bb85e429f502420ef671c78582030e18"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeDrive' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 6,
                  "charOffset": 826,
                  "charLength": 15,
                  "snippet": {
                    "text": "initializeDrive"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 6,
                  "charOffset": 818,
                  "charLength": 15,
                  "snippet": {
                    "text": "}\n\nvoid initializeDrive(int channel, int isSecondary) {\n    int index = channel*2 + isSecondary;\n    int type = IDE_ATA;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c7a5fbd140b4832adb70fda81b169e36026eb897b3eca13c40131ea2c6c948b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 33,
                  "charOffset": 1172,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 33,
                  "charOffset": 1084,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint8_t status = ideRead(channel, ATA_REG_STATUS);\n    if(status == 0 || status == 0xFF) { //no drive or floating bus\n        ide.devices[index].exists = 0;\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2aa462712d9ea3022b41256b19bd177249f3f115c045f1aa2e31fc173b9d22ec"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "charOffset": 1459,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x14"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 19,
                  "charOffset": 1385,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint8_t high = ideRead(channel, ATA_REG_LBA2);\n\n        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62c10af904db524142b8368d8a604ee370319b72d6e2a4e410149d240f31edc7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xEB is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 35,
                  "charOffset": 1475,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xEB"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 35,
                  "charOffset": 1385,
                  "charLength": 4,
                  "snippet": {
                    "text": "        uint8_t high = ideRead(channel, ATA_REG_LBA2);\n\n        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd830fbdd1b6f63e36578a79b53744eef957ff31a4685e28fc2079d8c5121bcd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x69 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 26,
                  "charOffset": 1538,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x69"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 26,
                  "charOffset": 1441,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {\n            type = IDE_ATAPI;\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea9e5152118ce0c7ba32b4e3f107dddf892bcd0ac8fc37bac500acae6109c3cc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 42,
                  "charOffset": 1554,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x96"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 42,
                  "charOffset": 1441,
                  "charLength": 4,
                  "snippet": {
                    "text": "        if(low == 0x14 && high == 0xEB) {\n            type = IDE_ATAPI;\n        } else if(low == 0x69 && high == 0x96) {\n            type = IDE_ATAPI;\n        } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "644a91ef98f92202cd8f45d4c586bf9cc61898e3811f54c925c7b5721d684678"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 24,
                  "charOffset": 1876,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 24,
                  "charOffset": 1801,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    uint16_t* shortBuffer = (uint16_t*) ideBuffer;\n    for(int i = 0; i < 256; i++) {\n        uint16_t base = ide.channels[channel].base;\n        uint16_t value = inportShort(base + ATA_REG_DATA);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f16d57ad92a71093abef5e4a805665217a642a0be115e79e2afabe3e0302e0f7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 36,
                  "charOffset": 2459,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 36,
                  "charOffset": 2347,
                  "charLength": 2,
                  "snippet": {
                    "text": "    device->commandSets = *(uint32_t*)(ideBuffer + ATA_IDENT_COMMAND_SETS);\n\n    if(device->commandSets & (1 << 26)) {\n        device->size = *(uint32_t*)(ideBuffer + ATA_IDENT_MAX_LBA_EXT);\n    } else {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f97f1929330b956f50021fcbb5dcabc83af4052867087dfd949eef8bc19e092e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 24,
                  "charOffset": 2649,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 24,
                  "charOffset": 2619,
                  "charLength": 2,
                  "snippet": {
                    "text": "    }\n\n    for(int i = 0; i < 40; i += 2) {\n        device->model[i] = (char)ideBuffer[ATA_IDENT_MODEL + i + 1];\n        device->model[i+1] = (char)ideBuffer[ATA_IDENT_MODEL + i];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8dee27ad11f827f107d098f244f531da4e6b571551aebeda9477bb940c05441a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 19,
                  "charOffset": 2823,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 19,
                  "charOffset": 2732,
                  "charLength": 2,
                  "snippet": {
                    "text": "        device->model[i+1] = (char)ideBuffer[ATA_IDENT_MODEL + i];\n    }\n    device->model[40] = 0;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "363335833e5a8721767942df24b45921dc07599d67676c2db54a40b97534e61d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1F0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 19,
                  "charOffset": 2889,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x1F0"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 19,
                  "charOffset": 2834,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5ac77a3bccd37f2a630724737867d630c835d2ee666ad91663ebb611204d1b0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x3F64 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 26,
                  "charOffset": 2896,
                  "charLength": 6,
                  "snippet": {
                    "text": "0x3F64"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 26,
                  "charOffset": 2834,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8eaeab3a22e7864b1dafd7773c570ea66c295a76e3980199dfb8777f57156cf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x170 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 34,
                  "charOffset": 2904,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x170"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 34,
                  "charOffset": 2834,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc05ef3b4d4280c8c4c09acee1eed011ac675e5ceb65a18658c04350f32980be"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x374 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 41,
                  "charOffset": 2911,
                  "charLength": 5,
                  "snippet": {
                    "text": "0x374"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 41,
                  "charOffset": 2834,
                  "charLength": 5,
                  "snippet": {
                    "text": "\nvoid initializeIdeCompatibility() {\n    initializeIde(0x1F0, 0x3F64, 0x170, 0x374, 0x000);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19a151acc467235fa12c9dec119d5160f0a68b5ae763d45391cd3fda6245ee16"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 45,
                  "charOffset": 3088,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 45,
                  "charOffset": 2929,
                  "charLength": 10,
                  "snippet": {
                    "text": "void initializeIde(uint32_t bar0, uint32_t bar1, uint32_t bar2, uint32_t bar3,\n                   uint32_t bar4) {\n    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f37d5e22068e5f90f31e7d81ff6e852a570164aa61e59cc2987216d27945da56"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 52,
                  "charOffset": 3151,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 52,
                  "charOffset": 3008,
                  "charLength": 10,
                  "snippet": {
                    "text": "                   uint32_t bar4) {\n    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67140108ed25964905a50cb0f3c30b155f1eddf36ba5714388b598dce93b8c89"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 47,
                  "charOffset": 3209,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 47,
                  "charOffset": 3044,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_PRIMARY].base = bar0 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad61dd8dfcf08bd5f334625bc4dd7b1bcc9ef7e14c44c17c52eaf67e6140262b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 54,
                  "charOffset": 3274,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 54,
                  "charOffset": 3100,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_PRIMARY].controlBase = bar1 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e870f61d97e104a3ad1941dcbe63a96678825ba2568b1c6e8237aeb7ebe5e2db"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 54,
                  "charOffset": 3339,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 54,
                  "charOffset": 3163,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_SECONDARY].base = bar2 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b99a76f74c33f826dc885140a711dc577f361d390f3c402001f7fef58d1ac4b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFFFFFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 57,
                  "charOffset": 3407,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFFFFFFFC"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 57,
                  "charOffset": 3221,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;\n\n    disableAtaInterrupts();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67140108ed25964905a50cb0f3c30b155f1eddf36ba5714388b598dce93b8c89"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/initialize.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 71,
                  "charOffset": 3421,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 71,
                  "charOffset": 3221,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ide.channels[ATA_SECONDARY].controlBase = bar3 & 0xFFFFFFFC;\n    ide.channels[ATA_PRIMARY].busController = bar4 & 0xFFFFFFFC;\n    ide.channels[ATA_SECONDARY].busController = (bar4 & 0xFFFFFFFC) + 8;\n\n    disableAtaInterrupts();"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16024157f0a6fb72c008543d4b69131a539b6dc4d36f52ca92a05c1d1c81a3fc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include \"ide.h\"\n#include \"system.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "569a5fc3d5cbdbac6953e681ad9797df8584430f5eceb19ebee21ccc666c6a1d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 29,
                  "charOffset": 646,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 29,
                  "charOffset": 563,
                  "charLength": 3,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_CONTROL, 0x02);\n\n    int numSectors = length/512;\n\n    ataWaitUntilReady(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3f505a5db6adbb3decd7150e9b3a04d98fd9ee292c0bbaf70dafcbfecc71861"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0f000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 37,
                  "charOffset": 729,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0f000000"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 37,
                  "charOffset": 652,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f447298e534a5a8e18c80470c6b27581ad27ffdec53a31e1eeabfd375154f96c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 52,
                  "charOffset": 744,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 52,
                  "charOffset": 652,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "935c76447b88ce791fa140787b4dc406a1e9a20b93cf59f267a4f0fb7bbc7ea6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "charOffset": 770,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xE0"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 23,
                  "charOffset": 692,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n\n    ideWrite(device->channel, ATA_REG_HDDEVSEL, devSel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "779d82b711131fb2a2f942364d52efb30ea59197fa78f05409b21b6d9900b27a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x000000FF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 61,
                  "charOffset": 1041,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x000000FF"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 61,
                  "charOffset": 864,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_FEATURES, 0x00);\n    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba7ba61135a79b10da7a95400690b258288964f4e359a2d43243e82955387318"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FF00 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 61,
                  "charOffset": 1120,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0000FF00"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 61,
                  "charOffset": 919,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "787b6af9a841b98eb2bb2325fb023a899b763e1170f54719351c0490019677c5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 76,
                  "charOffset": 1135,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 76,
                  "charOffset": 919,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8a70d487dfc0dac0c69d463b9f8717fedfb4f5ea7137560749ede1f02ee9b3b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x00FF0000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 61,
                  "charOffset": 1199,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x00FF0000"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 61,
                  "charOffset": 981,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2422a88f578de152d69dd74dcf003a016158c44471e484b2ce5c3e17826d195"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 76,
                  "charOffset": 1214,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 76,
                  "charOffset": 981,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_READ_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ee908967a69bd2c49a748b775eacafaac50970a7daac9eb4fe963b8b5418a45"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 33,
                  "charOffset": 1483,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 33,
                  "charOffset": 1408,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < numSectors; i++) {\n        readShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e59e8bcb3258259d3127542574213b79311f0a9a31cbcf38748a9a42a442e0de"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/read.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "charOffset": 1532,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 19,
                  "charOffset": 1409,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(int i = 0; i < numSectors; i++) {\n        readShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9cd4d3f92865681202d0cfdcfe7a24f90a7df6bbf1771c3e5223940def34130d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include \"ide.h\"\n#include \"system.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34924d798668636f6a745f20b591065ec777e46529abb3564534820bdd9b5387"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 29,
                  "charOffset": 718,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 29,
                  "charOffset": 542,
                  "charLength": 3,
                  "snippet": {
                    "text": "void ataWriteSectors(IdeDevice* device, uint32_t blockAddress, uint8_t* buffer, int length) {\n    ideWrite(device->channel, ATA_REG_CONTROL, 0x02);\n    int numSectors = length/512 + 1;\n\n    ataWaitUntilReady(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0629c66223adaf98295b2adb81a98fc8720bc1758904f1ea9e958d24f714658"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0f000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 37,
                  "charOffset": 805,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0f000000"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 37,
                  "charOffset": 728,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "444afdd08e5113657f2836e229b129e5662189e79b432478aaba9bd8dab527bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 52,
                  "charOffset": 820,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 52,
                  "charOffset": 728,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ataWaitUntilReady(device->channel);\n\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2bd27425d741aa6d307fad82da664128a4bd09c5f9f937f978d8d74dfb64531f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE0 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "charOffset": 846,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xE0"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 23,
                  "charOffset": 768,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    uint32_t head = (blockAddress & 0x0f000000) >> 24;\n    uint32_t devSel = 0xE0 | (device->drive << 4) | head;\n\n    ideWrite(device->channel, ATA_REG_HDDEVSEL, devSel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bfec30d7ce630e77c8f01fc50b7bae1b77a1b9e3b8811ba95f9a36876fca23b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x000000FF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 61,
                  "charOffset": 1175,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x000000FF"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 61,
                  "charOffset": 998,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_FEATURES, 0x00);\n    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5760ee5976a7eda9185f90efcad8669d78c088f1b8f19b22e04e0027d27cfd7e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0000FF00 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 61,
                  "charOffset": 1254,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x0000FF00"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 61,
                  "charOffset": 1053,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a838005e5a62057175caf19799b0a97625e466a418e03e961528bd4b60744b92"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 76,
                  "charOffset": 1269,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 76,
                  "charOffset": 1053,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_SECCOUNT0, numSectors);\n    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1887bdbf79f1540c148b0c2c3fa7719b754863ccba9e02aa09ab86fc748c9d2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x00FF0000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 61,
                  "charOffset": 1333,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x00FF0000"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 61,
                  "charOffset": 1115,
                  "charLength": 10,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20d6c0bd566e4e52aa73648e8ae13778b38c1de2065bb92e08e05eea6c1394f4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 76,
                  "charOffset": 1348,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 76,
                  "charOffset": 1115,
                  "charLength": 2,
                  "snippet": {
                    "text": "    ideWrite(device->channel, ATA_REG_LBA0, (blockAddress & 0x000000FF) >> 0);\n    ideWrite(device->channel, ATA_REG_LBA1, (blockAddress & 0x0000FF00) >> 8);\n    ideWrite(device->channel, ATA_REG_LBA2, (blockAddress & 0x00FF0000) >> 16);\n    ideWrite(device->channel, ATA_REG_COMMAND, ATA_CMD_WRITE_PIO);\n    ataIoWait(device->channel);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a762270d7a6aa9223213e2dfe49c220e1ee6231879bdbcfb480a9c12adb3e84a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 38,
                  "charOffset": 1583,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 38,
                  "charOffset": 1503,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < numSectors; i++) {\n        writePortShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4c104c9fcf218957ac0bd82745832a8a77788c1a3d3343aacb7484670daf3b7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "512 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/ide/write.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "charOffset": 1632,
                  "charLength": 3,
                  "snippet": {
                    "text": "512"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 19,
                  "charOffset": 1504,
                  "charLength": 3,
                  "snippet": {
                    "text": "    for(int i = 0; i < numSectors; i++) {\n        writePortShorts(bus, buffer, 256); //512 bytes = 256 shorts\n        buffer += 512;\n    }\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43f6d6c283ac67b847a94612d73073fd476e8c2b83ce15a7c1a17791e8d3f756"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <system.h>\n#include \"pci.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "382282e906a616e7e8dc9e0f39abdf6028d646988db5df8286b3ee92b362f104"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 27,
                  "charOffset": 151,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 27,
                  "charOffset": 37,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "441964e125cc69baf56afba868c776117a329029b21316ec24abe04c2de94ffc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 44,
                  "charOffset": 168,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 44,
                  "charOffset": 37,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nuint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4296e65519dd6a4fcee5a95e4fc841a1dc274d1b67b6adfd3b468386aab36ca4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "charOffset": 187,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 63,
                  "charOffset": 37,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nuint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89631234b1f45adc82c35b4bb66789c8334d833b1030118a6faf154a0473a715"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80000000 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "charOffset": 220,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x80000000"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 30,
                  "charOffset": 38,
                  "charLength": 10,
                  "snippet": {
                    "text": "uint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n\n    outportInt(PCI_CONFIG_ADDRESS, address);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4283a2cbb9ae1ca15389982e90656d0bd3964214d0a632ca70a01e56cb6d1a6f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFC is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 54,
                  "charOffset": 244,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFC"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 54,
                  "charOffset": 38,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint32_t pciReadDword(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t id = (bus << 16) | (device << 11) | (function << 8);\n    uint32_t address = id | (0x80000000) | (offset & 0xFC);\n\n    outportInt(PCI_CONFIG_ADDRESS, address);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e70e69dcfc201cbd43ae7c3d7a54a14ffd1cf93bdc7756cf42ee5c9940b830b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 37,
                  "charOffset": 528,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 37,
                  "charOffset": 339,
                  "charLength": 1,
                  "snippet": {
                    "text": "uint16_t pciReadWord(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> ((offset & 2)*8)) & 0xFFFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb5dfb24c553372907b44e427cf47baea2725225ca971d50752f91a668c09993"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 43,
                  "charOffset": 534,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 43,
                  "charOffset": 339,
                  "charLength": 6,
                  "snippet": {
                    "text": "uint16_t pciReadWord(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> ((offset & 2)*8)) & 0xFFFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "852c2ce8d8cf166ccbef21d9639d35191828d98dc4453c6565efda8ee421a3ed"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "charOffset": 732,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 36,
                  "charOffset": 545,
                  "charLength": 1,
                  "snippet": {
                    "text": "uint8_t pciReadByte(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> (offset & 3)*8) & 0xFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52bde9aa305e003db75594f5f0940883f5caba5052afdc05caf9d7622ed4f866"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 41,
                  "charOffset": 737,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xFF"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 41,
                  "charOffset": 545,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint8_t pciReadByte(uint8_t bus, uint8_t device, uint8_t function, uint8_t offset) {\n    uint32_t result = pciReadDword(bus, device, function, offset);\n    return (result >> (offset & 3)*8) & 0xFF;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3844c0689324314db89f7b758c68f5a244546a98939112b692c9de46e9561365"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xB is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 47,
                  "charOffset": 1116,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xB"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 47,
                  "charOffset": 995,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadClassCode(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xB);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f88d408e847658a2ecc49584e11b5beee5baef0f053e0c88a3bdc7410101f3f5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xA is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 47,
                  "charOffset": 1248,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xA"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 47,
                  "charOffset": 1124,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadSubClassCode(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xA);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e48f8cc44723ab680fae10e6dbb726a95ceb9257a11b1f9a7c3bcbd00c5e118"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 47,
                  "charOffset": 1388,
                  "charLength": 3,
                  "snippet": {
                    "text": "0x9"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 47,
                  "charOffset": 1256,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadProgrammingInterface(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0x9);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d0c790a6c260d854a58e9eba159d374a1bf4d9e4eda95a226a6398541af8dec"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 47,
                  "charOffset": 1518,
                  "charLength": 3,
                  "snippet": {
                    "text": "0xE"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 47,
                  "charOffset": 1396,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nuint8_t pciReadHeaderType(uint8_t bus, uint8_t device, uint8_t function) {\n    return pciReadByte(bus, device, function, 0xE);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c9d2e8dcaa5a5d974284ca0f85bb8ded3295fc19c8ab079c7d1b3e39dc7226a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/read.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 1667,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1527,
                  "charLength": 4,
                  "snippet": {
                    "text": "uint32_t pciReadBar(uint8_t bus, uint8_t device, uint8_t function, uint8_t bar) {\n    //Todo: handle different header types\n    int index = 0x10 + bar*4;\n    return pciReadDword(bus, device, function, index);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9cfa2f91f742b108493ee95d0e05c1519d0c0c8c8ae42fca7f074d23b24c02e7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcat.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "charOffset": 116,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 20,
                  "charOffset": 59,
                  "charLength": 1,
                  "snippet": {
                    "text": "    char* s = src;\n    char* d = dst;\n    for (; *d; d++);\n\n    for (char c = *s; c != '\\0'; c = *++s) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73fae25e621de58c83561c57cfe63a5293e58b1144d674b9949b74e6c8e83255"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n#include <stdio.h>\n#include <mem.h>\n#include \"pci.h\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e891c72b1222ef6ab11d1e5d12c29cbe579241b9e51b01b239c61a04d2f32237"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'pciScan' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "charOffset": 60,
                  "charLength": 7,
                  "snippet": {
                    "text": "pciScan"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 6,
                  "charOffset": 37,
                  "charLength": 7,
                  "snippet": {
                    "text": "#include \"pci.h\"\n\nvoid pciScan(PciBus* pciBus) {\n    printf(\"Scanning PCI pciBus...\\n\");\n    int index = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdc143173c2bce4ae0ab8fdfef0a738e8d7d60488500494226dd155cf8147b45"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "256 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 28,
                  "charOffset": 173,
                  "charLength": 3,
                  "snippet": {
                    "text": "256"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 28,
                  "charOffset": 126,
                  "charLength": 3,
                  "snippet": {
                    "text": "    int index = 0;\n\n    for(int bus = 0; bus < 256; bus++) {\n        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b973d9161198d6e867df2a08b9713621dcf566c4fe9709294376bf307f499fc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 38,
                  "charOffset": 224,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 38,
                  "charOffset": 145,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    for(int bus = 0; bus < 256; bus++) {\n        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);\n            if(vendor != 0xFFFF) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11988bdb2345b27214e66e4a68053bcb7962dcff442269657ffcd177108ac8e9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 26,
                  "charOffset": 326,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 26,
                  "charOffset": 187,
                  "charLength": 6,
                  "snippet": {
                    "text": "        for(int device = 0; device < 32; device++) {\n            uint16_t vendor = pciReadVendor(bus, device, 0);\n            if(vendor != 0xFFFF) {\n                uint8_t headerType = pciReadHeaderType(bus, device, 0);\n                uint8_t multifunction = (headerType & 0x80) != 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46a44e54cc883c2b2006a5ab34f3814a9c139ab8a3022a1ee601eabfec563ffc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 55,
                  "charOffset": 462,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 55,
                  "charOffset": 301,
                  "charLength": 4,
                  "snippet": {
                    "text": "            if(vendor != 0xFFFF) {\n                uint8_t headerType = pciReadHeaderType(bus, device, 0);\n                uint8_t multifunction = (headerType & 0x80) != 0;\n\n                for(int function = 0; function < 8; function++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "982034ee42bc1b80ad5740ef6f8cb8def2746fb401b0167fa41ae6b10d064aca"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 50,
                  "charOffset": 524,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 50,
                  "charOffset": 408,
                  "charLength": 1,
                  "snippet": {
                    "text": "                uint8_t multifunction = (headerType & 0x80) != 0;\n\n                for(int function = 0; function < 8; function++) {\n                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9828300598aa9cb2d32f75a646e3630b4e3a1f47163a41b21cf144184ea382a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 64,
                  "charOffset": 674,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 64,
                  "charOffset": 475,
                  "charLength": 6,
                  "snippet": {
                    "text": "                for(int function = 0; function < 8; function++) {\n                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15fd4db79395d2e89f035783dcf60d7094361229e8884c9419e4831c3d069cd2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 71,
                  "charOffset": 681,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 71,
                  "charOffset": 475,
                  "snippet": {
                    "text": "                for(int function = 0; function < 8; function++) {\n                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ffdcf9fe2ed06e2fadcc283d6a62a2a72bc8be343e36a39053a10e3899efffe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 55,
                  "charOffset": 761,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 55,
                  "charOffset": 541,
                  "snippet": {
                    "text": "                    PciDevice* pciDevice = malloc(sizeof(PciDevice));\n                    if(pciReadVendor(bus, device, function) == 0xFFFF) continue; //check vendor\n                    if(function > 0 && !multifunction) continue; //only one function\n                    uint16_t deviceId = pciReadDevice(bus, device, function);\n                    pciDevice->deviceId = deviceId;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4094bac005fc7a928e8dc4e78fab05661146224519120914b3d683c8cce6534"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x7F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 58,
                  "charOffset": 1367,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x7F"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 58,
                  "charOffset": 1142,
                  "charLength": 4,
                  "snippet": {
                    "text": "                    pciDevice->programmingInterface = pciReadProgrammingInterface(bus, device, function);\n                    pciDevice->multiFunction = multifunction;\n                    pciDevice->headerType = headerType & 0x7F;\n\n                    pciDevice->bus = bus;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e41996ea0406e8be72e48b688a17ce337e2e0cdb498bd2bd9fbbee78af00aaf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'scanForDeviceClass' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "charOffset": 1953,
                  "charLength": 18,
                  "snippet": {
                    "text": "scanForDeviceClass"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 12,
                  "charOffset": 1939,
                  "charLength": 18,
                  "snippet": {
                    "text": "}\n\nPciDevice* scanForDeviceClass(PciBus* pciBus, uint8_t class, uint8_t subclass) {\n    for(int i = 0; i < 20; i++) {\n        PciDevice* pciDevice = pciBus->devices[i];"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef19f719520befe078424ef5218d8f955b5f7fe8e2824915ff01a389cce86710"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pci/scan.c"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 2046,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 24,
                  "charOffset": 1941,
                  "charLength": 2,
                  "snippet": {
                    "text": "\nPciDevice* scanForDeviceClass(PciBus* pciBus, uint8_t class, uint8_t subclass) {\n    for(int i = 0; i < 20; i++) {\n        PciDevice* pciDevice = pciBus->devices[i];\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "402254d61f1d253e0834c6b6c9bf8b1cf7e34c87d5cd2fa2d72bd40f0bad85a6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pic/pic.c"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n#include <system.h>\n#include <pic.h>\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee9c97c56c1e06967c661331d18875eeb72b65719a57ecb57689fe3ee4990d96"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/pic/pic.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 16,
                  "charOffset": 1595,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 16,
                  "charOffset": 1551,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid sendEoi(uint8_t irq) {\n    if (irq >= 8) {\n        outportByte(PIC2_COMMAND, PIC_EOI);\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2cd6eac9eb67b9a8e43f6ea071a748c393713bc114b05f4d1afffff910c2e4c5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "charOffset": 69,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 13,
                  "charOffset": 20,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint8_t inportByte(uint16_t port) {\n    uint8_t result;\n    __asm__ volatile(\"inb %1, %0\" : \"=a\"(result) : \"Nd\"(port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9d586ffe711d93f29828671790a68e9bf4b8631d4e833e0f2790b9784a7b4b9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "charOffset": 328,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 14,
                  "charOffset": 276,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint16_t inportShort(uint16_t port) {\n    uint16_t result;\n    __asm__ volatile (\"inw %1, %0\" : \"=a\" (result) : \"dN\" (port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "36dc011e33bd25cfc868c49e56ce733098efade9b26766e2ccf62b21297a99bc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/portio/portio.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "charOffset": 593,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 14,
                  "charOffset": 543,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nuint32_t inportInt(uint16_t port) {\n    uint32_t result;\n    __asm__ volatile (\"inl %%dx, %%eax\" : \"=a\" (result) : \"dN\" (port));\n    return result;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6c223c18fba8b5e5502a4d1dcaa184e817e042a320b687826f3c00570652d6e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 27,
                  "charOffset": 220,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 27,
                  "charOffset": 90,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //https://wiki.osdev.org/Serial_Ports\n    outportByte(port + 1, 0x00);    // Disable all interrupts\n    outportByte(port + 3, 0x80);    // Enable DLAB (set baud rate divisor)\n    outportByte(port + 0, 0x03);    // Set divisor to 3 (lo byte) 38400 baud\n    outportByte(port + 1, 0x00);    //                  (hi byte)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4128e09f4395d27dc76787e8d2afc1d568a31062f5b161ce85090c121f9cabab"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xC7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 509,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xC7"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 27,
                  "charOffset": 346,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 1, 0x00);    //                  (hi byte)\n    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "415aea6d00a0d07843c400eafc6d42832dccc3becbadd0676b0d1cb573351450"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0B is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 596,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0B"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 27,
                  "charOffset": 412,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2ac17dbf737e59d3bbeb91eec126576e356dedd49dc473fef6e536f0cfad74d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 661,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x1E"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 483,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ed597847e358b1bedf969f93b0f7dc1d79b056524170290d87b27cf90befc30"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 721,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 570,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n\n    // Check if serial is faulty"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c04771480a97ad81891d9f1d2756e956db2d2b93309c8333b4ecb856099ad88f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "charOffset": 836,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 33,
                  "charOffset": 770,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Check if serial is faulty\n    if (inportByte(port + 0) != 0xAE) {\n        return 1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38c61763560ca09e73e0b36b5bb3166995a3703d663af51fbb770535254d5d3b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "charOffset": 1031,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 27,
                  "charOffset": 869,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // If serial is not faulty set it in normal operation mode\n    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)\n    outportByte(port + 4, 0x0F);\n    serial->port = port;\n    serial->isInitialized = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8a37d7c532d8c6fb400701b9d12e97e2893dfd505e157ee7d7aa66e5c2cc24f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "charOffset": 1237,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 46,
                  "charOffset": 1111,
                  "charLength": 1,
                  "snippet": {
                    "text": "int updateLineStatusRegister(Serial* serial) {\n    //Read 'Line status register'\n    uint8_t line = inportByte(serial->port + 5);\n    serial->lineRegister = line;\n    return line;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dec8cd45e3f4ede3e500a2dfc374a04e1092fb6c70df3a976d1e3033aefd5f1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "charOffset": 1363,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 32,
                  "charOffset": 1293,
                  "snippet": {
                    "text": "\nint serialAvailable(Serial* serial) {\n    if (!serial->isInitialized) return 0;\n\n    //Read the LSB of the status register to see if data is available"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b674b6fc6452845c6012b44a3c8353e49ded0cde99f5a10c782f335f58c605a8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "charOffset": 1570,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 37,
                  "charOffset": 1496,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nuint8_t serialRead(Serial* serial) {\n    while (!serialAvailable(serial));\n\n    return inportByte(serial->port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a6e048199067ace5348b1f225e2527dd4eba1e8ebf06f941472d8199931da9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 47,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 47,
                  "charOffset": 1612,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nint isSerialReadyToSend(Serial* serial) {\n    return updateLineStatusRegister(serial) & 0x20;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e16e8c190b2b7963eeb53722083b8ec3f93db78ee08034979e4fe5f87599d30"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "charOffset": 1799,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1709,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid serialWrite(Serial* serial, uint8_t byte) {\n    while (!isSerialReadyToSend(serial));\n\n    outportByte(serial->port, byte);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57c51f6093c16b6aa4b57ca8a9aaff21bef0d99d46fbf6000c516dcbe935bf0f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/initialize.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <terminal.h>\n#include \"color.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "338c52715a4e155eff195c59814d29390f79bcd408538791da55e863294a6877"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <stddef.h>\n#include \"canvas.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79d453c65b9690a77c6e667a1c664a50929fcdb17f95c662f842bd7cb1f9d375"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalRow' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 8,
                  "charOffset": 108,
                  "charLength": 11,
                  "snippet": {
                    "text": "terminalRow"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 8,
                  "charOffset": 70,
                  "charLength": 11,
                  "snippet": {
                    "text": "const size_t VGA_HEIGHT = 40;\n\nsize_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f72ba55b71ec27816e17037a27b1d1e03961d56310c001546e018d8742e2fa9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColumn' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 8,
                  "charOffset": 132,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalColumn"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 8,
                  "charOffset": 100,
                  "charLength": 14,
                  "snippet": {
                    "text": "\nsize_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51e8bb76c6832f74de670452264552891527ae91a30172a6c61efc4b5cc061f4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColor' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "charOffset": 160,
                  "charLength": 13,
                  "snippet": {
                    "text": "terminalColor"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 101,
                  "charLength": 13,
                  "snippet": {
                    "text": "size_t terminalRow = 0;\nsize_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1484985cdd53e821ba0c9fd9dd4e0af3784b18674800743e56ad8e35b7ecf629"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalCanvas' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "charOffset": 187,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalCanvas"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 9,
                  "charOffset": 125,
                  "charLength": 14,
                  "snippet": {
                    "text": "size_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fc8fc9d167398157c55552946beda7a9d1df26cd7a4f90a415215025f6f3cf4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalCanvas' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/terminal_state.c"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "charOffset": 187,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalCanvas"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 9,
                  "charOffset": 125,
                  "charLength": 14,
                  "snippet": {
                    "text": "size_t terminalColumn = 0;\nuint8_t terminalColor = 0;\nCanvas* terminalCanvas = NULL;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98873a25ce17c131c465cbfc2f9514c1b5c6167aafdca6596996d3d54e0afcbf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'terminalColors' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "charOffset": 51,
                  "charLength": 14,
                  "snippet": {
                    "text": "terminalColors"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 10,
                  "charOffset": 22,
                  "charLength": 14,
                  "snippet": {
                    "text": "#include \"color.h\"\n\nRgbColor terminalColors[] = {\n        { //black\n            .r = 0,"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e248d1b8d8246171f5139a8c220a32b06c9d21798f5daca579084ec2c897e2ea"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 18,
                  "charOffset": 234,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 18,
                  "charOffset": 177,
                  "charLength": 3,
                  "snippet": {
                    "text": "            .r = 0,\n            .g = 0,\n            .b = 255\n        },\n        { //green"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c12a1b2a1e468255b58bf43e02c892d95ca27a3b8b4d43261c984ff91967c676"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "charOffset": 312,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 22,
                  "charOffset": 249,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //green\n                .r = 0,\n                .g = 255,\n                .b = 0\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b6fcccee8cc5408e24bde2e34ea6465e3f8b3bc60b3871dadb9aedc29f3d658"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "charOffset": 413,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 22,
                  "charOffset": 351,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //cyan\n                .r = 0,\n                .g = 255,\n                .b = 255\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85c24422830256f48fa5bb19bf29fbe77bda5634e5ff3d44c9997adb157ec4a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 22,
                  "charOffset": 439,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 22,
                  "charOffset": 368,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 0,\n                .g = 255,\n                .b = 255\n        },\n        { //red"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4023ec4feb745aebdee22b0fb0203453bf1c2051f90da52a33728928989822bf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 22,
                  "charOffset": 491,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 22,
                  "charOffset": 443,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //red\n                .r = 255,\n                .g = 0,\n                .b = 0"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4154f5315a5f83b56f631c704677f6ec118ce63c14c7c48e74b2449640a323e8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 22,
                  "charOffset": 595,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 22,
                  "charOffset": 543,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //magenta\n                .r = 255,\n                .g = 0,\n                .b = 255"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8000e882f1ffd3ccbe86635bd126069e5684a8b2b7842f5c8b3ea57007e6d2a2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "255 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "charOffset": 645,
                  "charLength": 3,
                  "snippet": {
                    "text": "255"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 22,
                  "charOffset": 574,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 255,\n                .g = 0,\n                .b = 255\n        },\n        { //brown"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d20af7d60a5846aadebd8cb0a026aa8cd73bc159227b3cbb88b61e8a650dd57f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x96 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 22,
                  "charOffset": 699,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x96"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 22,
                  "charOffset": 649,
                  "charLength": 4,
                  "snippet": {
                    "text": "        },\n        { //brown\n                .r = 0x96,\n                .g = 0x4b,\n                .b = 0"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "916823f24113edcf0ec79e44d6dff9ea4a5912ec306514719141795474bf8917"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x4b is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 22,
                  "charOffset": 726,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x4b"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 22,
                  "charOffset": 660,
                  "charLength": 4,
                  "snippet": {
                    "text": "        { //brown\n                .r = 0x96,\n                .g = 0x4b,\n                .b = 0\n        },"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e97de1cd26f73067199a61dfaac1c9dffad5c8483405ebcd9f8b43e31708953"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 22,
                  "charOffset": 810,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 22,
                  "charOffset": 755,
                  "charLength": 3,
                  "snippet": {
                    "text": "        },\n        { //light gray\n                .r = 200,\n                .g = 200,\n                .b = 200"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ae506c0e6973ddaafa3f665a288954de5c90a0ace1b5a58e45990262575f11d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 22,
                  "charOffset": 836,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 22,
                  "charOffset": 766,
                  "charLength": 3,
                  "snippet": {
                    "text": "        { //light gray\n                .r = 200,\n                .g = 200,\n                .b = 200\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15c66b9900820ffa5ad29c79369ec908055b62b398e9546a5938f7756749165d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "200 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 22,
                  "charOffset": 862,
                  "charLength": 3,
                  "snippet": {
                    "text": "200"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 22,
                  "charOffset": 789,
                  "charLength": 3,
                  "snippet": {
                    "text": "                .r = 200,\n                .g = 200,\n                .b = 200\n        }\n};"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e767a8924ea89b327a0c10bd645c8f798f505ccafcf5d7f73e0c89b17ccd0e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "charOffset": 960,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 21,
                  "charOffset": 880,
                  "snippet": {
                    "text": "size_t kernel_strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9b9a46e8f6a2480caa57502ce3ad6bed0803e893b20e1354c6b2f616adfa637"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/terminal/write.c"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 38,
                  "charOffset": 1928,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 38,
                  "charOffset": 1837,
                  "snippet": {
                    "text": "\nvoid terminal_write(const char* data, size_t size) {\n    for (size_t i = 0; i < size; i++)\n        terminalPutChar(data[i]);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab00c91d35cbcf3bfe26f2becb2bc890f12f2a76790815ae450e6d0c3b211897"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <cstdio>\n#include <cstring>\n#include <gtest/gtest.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8af73ce32b4e923b40bcf7a06fbcea17536f4e5fa626505b8dfd8b5393aed676"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "charOffset": 119,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 15,
                  "charOffset": 87,
                  "charLength": 2,
                  "snippet": {
                    "text": "\ntypedef struct {\n    char name[12];\n    CpuFeatures features;\n} CpuIdInfo;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "819dc866c8d50c596c313d417062857898099513ef0701ad598244acc7e18885"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'cpuInfo' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 11,
                  "charOffset": 174,
                  "charLength": 7,
                  "snippet": {
                    "text": "cpuInfo"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 11,
                  "charOffset": 150,
                  "charLength": 7,
                  "snippet": {
                    "text": "} CpuIdInfo;\n\nCpuIdInfo cpuInfo;\n\nvoid setCpuVendor(char* name) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c8a9145112f06bb35c90a1e05ba7b5230da0c08d22507ee19cf8ff1290a4baf"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'length' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "charOffset": 220,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 183,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid setCpuVendor(char* name) {\n    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22761c8eb395a287a54e6ec15d6b37373e847f7541eede07c3c866053c6a923c"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-narrowing-conversions",
          "ruleIndex": 498,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 18,
                  "charOffset": 233,
                  "charLength": 6,
                  "snippet": {
                    "text": "strlen"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 18,
                  "charOffset": 183,
                  "charLength": 6,
                  "snippet": {
                    "text": "\nvoid setCpuVendor(char* name) {\n    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f157b34920a259effe827c395aa75ddb872b16d9a674be6cef204129af37542"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "charOffset": 363,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 32,
                  "charOffset": 216,
                  "charLength": 2,
                  "snippet": {
                    "text": "    int length = strlen(name);\n    ASSERT_EQ(length, 12) << \"The length of the CPU Vendor name must be exactly 12\";\n    memcpy(cpuInfo.name, name, 12);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a9aebad0b1383289eded14e93833087d712be000443dcb64c565e33e73da2e5"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_mock.cpp"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 40,
                  "charOffset": 725,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 40,
                  "charOffset": 603,
                  "charLength": 1,
                  "snippet": {
                    "text": "            *ebx = *((uint32_t*)name);\n            *edx = *((uint32_t*) (name+4));\n            *ecx = *((uint32_t*) (name+8));\n            break;\n        }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62367225891dff76e90e4d893540baa5a613f914570156149eb1d5f1d36873d7"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include \"gtest/gtest.h\"\n#include \"cpuid_mock.h\"\n#include \"cpuid.h\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "725f1e0e90914c2af849ad72654c4a28277e98fc3414ed1d9c38e4a1caa0e9ac"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "charOffset": 153,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 15,
                  "charOffset": 104,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setCpuVendor(\"GenuineIntel\");\n\n    char name[13];\n    getVendorIdString(name, 13);\n    ASSERT_STREQ(name, \"GenuineIntel\");"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80ddb63c70841558cf6b4515b989f5aa5de9cec3582f8b6f2443d4e3c7c8c08f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 29,
                  "charOffset": 186,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 29,
                  "charOffset": 138,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    char name[13];\n    getVendorIdString(name, 13);\n    ASSERT_STREQ(name, \"GenuineIntel\");\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff6c1dd8b387e82630850342c1421e97d95877f2809cbf02637dfef07cfc17b2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 29,
                  "charOffset": 260,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 29,
                  "charOffset": 191,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_STREQ(name, \"GenuineIntel\");\n\n    getVendorIdString(name, 6);\n    ASSERT_STREQ(name, \"Genu\");\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28896516544dc2151841170a820c71d219f0fd53b3402368a715cc1b723290cb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 325,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 29,
                  "charOffset": 264,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_STREQ(name, \"Genu\");\n\n    getVendorIdString(name, 9);\n    ASSERT_STREQ(name, \"GenuineI\");\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f9bf66f64c2ca07a87dd981cecfcf54aa87618b1d28ece48ae8d7d67c0dcfb2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x01234567 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "charOffset": 448,
                  "charLength": 10,
                  "snippet": {
                    "text": "0x01234567"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 21,
                  "charOffset": 368,
                  "charLength": 10,
                  "snippet": {
                    "text": "TEST(CpuIdTest, GetCpuFeatures) {\n    CpuFeatures features;\n    features.raw1 = 0x01234567;\n    features.raw2 = 0xFEDCBA98;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab4da26dc60a8a2d48ccedeab53c7f0a740816a5a3769ce330a4a820d107567f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFEDCBA98 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/cpuid_test.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "charOffset": 480,
                  "charLength": 10,
                  "snippet": {
                    "text": "0xFEDCBA98"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 21,
                  "charOffset": 402,
                  "charLength": 10,
                  "snippet": {
                    "text": "    CpuFeatures features;\n    features.raw1 = 0x01234567;\n    features.raw2 = 0xFEDCBA98;\n\n    setFeatures(features);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39cac65794e34049aecb09355504c611eecb5cac12904ad0b9e6e8ff89edd468"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'address' of type 'uint32_t' (aka 'unsigned int') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 5,
                  "charOffset": 1189,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid assertEntry(int index, void* rawAddress) {\n    uint32_t address = (uint64_t) rawAddress;\n    ASSERT_EQ((uint16_t)(address & 0xFFFF), idt[index].baseLow);\n    ASSERT_EQ((uint16_t)((address >> 16) & 0xFFFF), idt[index].baseHigh);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd2220d83318287c8b11de9ee937e890c73ab32d543d5f1f313e93eb262a873a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "charOffset": 1676,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 17,
                  "charOffset": 1594,
                  "charLength": 2,
                  "snippet": {
                    "text": "    assertEntry(0, &exception0);\n    assertEntry(1, &exception1);\n    assertEntry(31, &exception31);\n\n    assertEntry(32, &irq0);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e08a6f9bd32c9ec84f82211dfa3d46ffdb9857ae71820c1ed28e393dc1f853d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 17,
                  "charOffset": 1712,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 17,
                  "charOffset": 1660,
                  "charLength": 2,
                  "snippet": {
                    "text": "    assertEntry(31, &exception31);\n\n    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "111409e49db28dd1544fe681f38978ccd2e6aa186473ae28281b150ce2569cd9"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 17,
                  "charOffset": 1740,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 17,
                  "charOffset": 1695,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1772a6a362ed1ba4a289ba092f0481da1d67701ca8931017c7adca4dc417b320"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/idt_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "charOffset": 1769,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 17,
                  "charOffset": 1696,
                  "charLength": 3,
                  "snippet": {
                    "text": "    assertEntry(32, &irq0);\n    assertEntry(47, &irq15);\n    assertEntry(128, &exception128);\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "726f9ca7e02d40d1474be163c5f664fb3b467b9f276dae8fe295e0a6a4ce2360"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'uint16_t' (aka 'unsigned short') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/portio_mock.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "charOffset": 434,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint16_t"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 391,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nuint32_t getPortData(uint16_t port) {\n    uint16_t result = portDataOutMap[port].front();\n    portDataOutMap[port].pop();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd9daa1c45ba578afdf1b112053bc77d9047386d72bb0f6e1aed1fbf1efaf260"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'uint16_t' (aka 'unsigned short') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/portio_mock.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 800,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint16_t"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 751,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nuint32_t kernelGetPortData(uint16_t port) {\n    uint16_t result = portDataInMap[port].front();\n    portDataInMap[port].pop();\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe4fb5df20e4278b5d9b24bd4df6d86aac467bf0d7e44e21e64b1ab0c8eb9fc"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "101 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 25,
                  "charOffset": 205,
                  "charLength": 3,
                  "snippet": {
                    "text": "101"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 25,
                  "charOffset": 131,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 101,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22f323fae27b3655beeb634fbd54a10a3a4d32fa17a3c40729bf4ac792549e75"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 28,
                  "charOffset": 264,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 28,
                  "charOffset": 181,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 101,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "878f1c182be9b3d58dee4c2bfb45e85bbe10323874f3cebb59fdf7719d07bd55"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 48,
                  "charOffset": 328,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 48,
                  "charOffset": 273,
                  "charLength": 1,
                  "snippet": {
                    "text": "    };\n\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5956d2317545b7957e7ced57ba72a382b9f4acf49a9ec08c2346e2512d0c885e"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 34,
                  "charOffset": 365,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 34,
                  "charOffset": 280,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_TRUE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b5fdd94e8c2c2f91590f71170ee408da1a713abfed14ffcfd15f0e1c74cfa04"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "155 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 25,
                  "charOffset": 570,
                  "charLength": 3,
                  "snippet": {
                    "text": "155"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 25,
                  "charOffset": 496,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 155,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97840212007346babd5f67c31de0c0dbd18de2261461b26cf2af9e0791716a4d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 28,
                  "charOffset": 629,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 28,
                  "charOffset": 546,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 155,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7132d6e9a9e98ec816d46e03800e2525825843530aeb259ef7382e2450606465"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 48,
                  "charOffset": 693,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 48,
                  "charOffset": 638,
                  "charLength": 1,
                  "snippet": {
                    "text": "    };\n\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54bfc4cb5fd63677a3dfee629cd0aba349ae3bbc0384dd7c52fb61a33dcda71f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 34,
                  "charOffset": 730,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 34,
                  "charOffset": 645,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79e8789df26084c62c8246253ba55d29093dd861870ac263e39dc61db240d5ac"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "97 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25,
                  "charOffset": 935,
                  "charLength": 2,
                  "snippet": {
                    "text": "97"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 25,
                  "charOffset": 861,
                  "charLength": 2,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 97,\n            .revision = 4,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "983cfc1dcbc10a2dde701fd154c1c9ef5e5c3db5c78ecbb806d3568625cda700"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 28,
                  "charOffset": 993,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 28,
                  "charOffset": 911,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 97,\n            .revision = 4,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3caed4727bfc431388fb801001020d4c12b2c7733931e3c60155bb7239b7147"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 48,
                  "charOffset": 1057,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 48,
                  "charOffset": 1002,
                  "charLength": 1,
                  "snippet": {
                    "text": "    };\n\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08e0aab109f2ed53d9df97f91fb255307a416f18d9575bdd9d0ca3e6afec8453"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 34,
                  "charOffset": 1094,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 34,
                  "charOffset": 1009,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1efeb85afec1575c309000013850a26a667f9bddcd8d569d7f1f59f5b605bb1"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "123 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "charOffset": 1299,
                  "charLength": 3,
                  "snippet": {
                    "text": "123"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 25,
                  "charOffset": 1225,
                  "charLength": 3,
                  "snippet": {
                    "text": "    char* oem = \"Test   \";\n    RSDP validRsdp = {\n            .checksum = 123,\n            .revision = 0,\n            .rsdtAddress = 0x123456"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "faee4dddd3db6114bcd91210feb4422ef3b5916d75e4c4672fe61b0e8fa0dec1"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x123456 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 28,
                  "charOffset": 1358,
                  "charLength": 8,
                  "snippet": {
                    "text": "0x123456"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 28,
                  "charOffset": 1275,
                  "charLength": 8,
                  "snippet": {
                    "text": "            .checksum = 123,\n            .revision = 0,\n            .rsdtAddress = 0x123456\n    };\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f31dfb2c6e1818a38cf9d78c0fd89d36f50ae14b807d945a2726623759dcd7b"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 48,
                  "charOffset": 1422,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 48,
                  "charOffset": 1367,
                  "charLength": 1,
                  "snippet": {
                    "text": "    };\n\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b87b88290df610b1873b59494762b508fdff32c5864ac89657cb352c394b7232"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/rsdp.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 34,
                  "charOffset": 1459,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 34,
                  "charOffset": 1374,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    memcpy(validRsdp.signature, signatureText, 8);\n    memcpy(validRsdp.oemid, oem, 6);\n\n    ASSERT_FALSE(validateRSDP(&validRsdp));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b760f55e0add8eee454a10b5a2ce33faa5ab12a449317335b1277dcd886f4c"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strcmp.c"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 22,
                  "charOffset": 184,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 22,
                  "charOffset": 105,
                  "snippet": {
                    "text": "    while(*p1 && *p2) {\n        int diff = *p1++ - *p2++;\n        if(diff != 0) return diff;\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e15377698c0b391499b890b8236a4ac361cf8470cc598c1d65709f80b71e72"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "charOffset": 39,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 25,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nextern \"C\" {\n#include \"serial.h\"\n#include \"portio_mock.h\"\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d32c2a73b533b69d776639366d8241076daefec2acf761df0858108cd940bf3"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "charOffset": 147,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 5,
                  "charOffset": 87,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, initializeSerial) {\n    Serial serial;\n    int port = 1;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e42db1eefdc09c50dfc3e045447d0021fdcdd19dc38ee5cae0ff270fd2d466aa"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 23,
                  "charOffset": 184,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 23,
                  "charOffset": 143,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 1;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07d51c499eb97a2cc9153b4e45aea31d92289aaf41b89adffaccd55bbcb47c68"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 236,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 161,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    putPortData(port, 0xAE); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n\n    ASSERT_EQ(0, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45ed2c0ff018db8bb6486e434d3e0fd5e1298db049bed4045073a7e6bf6ee928"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "charOffset": 901,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 5,
                  "charOffset": 841,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, faultySerialTest) {\n    Serial serial;\n    int port = 1;\n    serial.port = 5;\n    serial.isInitialized = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7c5e36fef6af5b4aea02ec87c14a43df15bb466aa8c524f7e93ab807647a629"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 933,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 878,
                  "charLength": 1,
                  "snippet": {
                    "text": "    Serial serial;\n    int port = 1;\n    serial.port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f81c4019def12f6f93466dad37f90f7ccaae1899c390f69d789fd55f34278fb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'result' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 1041,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 966,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n    putPortData(port, 0x00); // test value read during initialization\n    int result = initializeSerial(&serial, port);\n\n    ASSERT_EQ(1, result);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "98b1f906133d4077517d309500bcfba0ebc858ff89687f91281e60aec845a4cf"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "charOffset": 1247,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1188,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, serialAvailable) {\n    Serial serial;\n    int port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5eefc3fab647d14735905f30e843defd616de6c0475057a3cf939a225054f082"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "charOffset": 1258,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 16,
                  "charOffset": 1188,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, serialAvailable) {\n    Serial serial;\n    int port = 5;\n    serial.isInitialized = 0;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa9bfb7de6b70b46dee3a4867bb1e4e1d30ff5f8984e4e6712b811725d761ec2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 23,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 23,
                  "charOffset": 1292,
                  "charLength": 4,
                  "snippet": {
                    "text": "    ASSERT_FALSE(serialAvailable(&serial));\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acc461c203b2288efb75554a969f5fbd79b093ec59e154e7f55441994b033216"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "charOffset": 1466,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 22,
                  "charOffset": 1407,
                  "charLength": 1,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 1);\n    ASSERT_TRUE(serialAvailable(&serial));\n    ASSERT_EQ(1, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f377f49acd16a3a8cfd708f90fea22a51f3a570fb29117b02b2ccb46c73c696"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 22,
                  "charOffset": 1577,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 22,
                  "charOffset": 1516,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_EQ(1, serial.lineRegister);\n\n    putPortData(port+5, 0);\n    ASSERT_FALSE(serialAvailable(&serial));\n    ASSERT_EQ(0, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe3d1904428495b9bbff9c58316841853d1be926ea3a3f1713092c9e79e9f922"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "charOffset": 1725,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 5,
                  "charOffset": 1670,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, readyToSend) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b60d89c11a1e9806779e65791f4479352888b3fb0d9d74d1eea6af34ec9c1f70"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 16,
                  "charOffset": 1736,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 16,
                  "charOffset": 1670,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, readyToSend) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9db3fccf93e01f415526fc8ce8178827443dac8b9c86e5576ba9caba640f9d0d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 23,
                  "charOffset": 1762,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 23,
                  "charOffset": 1721,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab3e7af45d21397bed4600b675abffc0f2091b7700120e583caabafa7fdc5452"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "charOffset": 1869,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 22,
                  "charOffset": 1810,
                  "charLength": 1,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 0x20);\n    ASSERT_TRUE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0x20, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dab2c61bdd5ca333752925f7bea05931709bfa51fa9df4a2668838299484216"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 25,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 25,
                  "charOffset": 1810,
                  "charLength": 4,
                  "snippet": {
                    "text": "    initializeSerial(&serial, port);\n\n    putPortData(port+5, 0x20);\n    ASSERT_TRUE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0x20, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71344b077f94990634cb123290be4328c296c48633924a3e8782c3409898cf53"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 22,
                  "charOffset": 1990,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 22,
                  "charOffset": 1926,
                  "charLength": 1,
                  "snippet": {
                    "text": "    ASSERT_EQ(0x20, serial.lineRegister);\n\n    putPortData(port+5, 0);\n    ASSERT_FALSE(isSerialReadyToSend(&serial));\n    ASSERT_EQ(0, serial.lineRegister);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "555e238bee3efe34f6d5de71f34845658eb2fe9ed6919f272ef68d0ac60b9e78"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "charOffset": 2142,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 5,
                  "charOffset": 2087,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, serialWrite) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eefc7dc3834e59f97c10d10f5b62ba901bd10887b3e91db92dce4797828ce5e7"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 16,
                  "charOffset": 2153,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 16,
                  "charOffset": 2087,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, serialWrite) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ecd2066edde73e7a98681df506eb3593ec4bd71ec5cc32665964ba4cf1cff55c"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 23,
                  "charOffset": 2179,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 23,
                  "charOffset": 2138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n    drainPort(port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfc9f82dcdf8d2f9325bb6cf71a80bfa08c6dbc510022e15fc1f5dd065e5271f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "charOffset": 2307,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 22,
                  "charOffset": 2264,
                  "charLength": 1,
                  "snippet": {
                    "text": "    drainPort(port);\n\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68890dcecacee0c5ccad677d5404630cbe847448a0b6e8c0b25cc049dce476c7"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 25,
                  "charOffset": 2310,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 25,
                  "charOffset": 2264,
                  "charLength": 4,
                  "snippet": {
                    "text": "    drainPort(port);\n\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76974c10d20d7440df584a1348c649d7a67d035922821992cc1d64278d93f2fa"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 26,
                  "charOffset": 2367,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 26,
                  "charOffset": 2285,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    putPortData(port+5, 0x20); //indicate ready to send\n    serialWrite(&serial, 10);\n\n    ASSERT_EQ(10, getPortData(port));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9a09ca83bbad3aa3bdb28afeb4b13ae406a5b155f5b529759fcd6a13ae22fba"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "google-readability-todo",
          "ruleIndex": 547,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "missing username/bug in TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "charOffset": 2416,
                  "charLength": 55,
                  "snippet": {
                    "text": "// TODO: Add test for when the port is temporarily busy"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 5,
                  "charOffset": 2373,
                  "charLength": 55,
                  "snippet": {
                    "text": "    ASSERT_EQ(10, getPortData(port));\n\n    // TODO: Add test for when the port is temporarily busy\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44ed7ad49b00e0211f9d6b49b15744a2993b23010ac922cd486a6c7b0959bfad"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'port' of type 'int' can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2528,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 5,
                  "charOffset": 2475,
                  "charLength": 3,
                  "snippet": {
                    "text": "TEST(SerialTest, printTest) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9658063427d9274ec20f958958dc4817fb5c03a2bc9822303f78d00a312d914b"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 16,
                  "charOffset": 2539,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 16,
                  "charOffset": 2475,
                  "charLength": 1,
                  "snippet": {
                    "text": "TEST(SerialTest, printTest) {\n    Serial serial;\n    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4038db0295d8d7630b39d2a551653499a852603531a3f35f99b39c0ce8b628d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 23,
                  "charOffset": 2565,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 23,
                  "charOffset": 2524,
                  "charLength": 4,
                  "snippet": {
                    "text": "    int port = 5;\n\n    putPortData(port, 0xAE); // test value read during initialization\n    initializeSerial(&serial, port);\n    drainPort(port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cbf67d61b36b0da188e41932a5bcd5cdf4c05dbec8c620a2c7cbaff27fc462b"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "misc-const-correctness",
          "ruleIndex": 596,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'len' of type 'size_t' (aka 'unsigned long') can be declared 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "charOffset": 2718,
                  "charLength": 6,
                  "snippet": {
                    "text": "size_t"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 5,
                  "charOffset": 2671,
                  "charLength": 6,
                  "snippet": {
                    "text": "\n    char* text = (char*)\"Hello, World\\n\";\n    size_t len = strlen(text);\n\n    for(int i = 0; i < len; i++) {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8dad5925a9f0fa17c4e76955f455b51049a21344242dc025cbde0cdac43547d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 26,
                  "charOffset": 2806,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 26,
                  "charOffset": 2745,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < len; i++) {\n        putPortData(port+5, 0x20); //indicate ready to send\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d1b2adf71d7fa3556c2ab78a6e949b8d4fc61aca422776608227159841271bb"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/test/src/serial_test.cpp"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 29,
                  "charOffset": 2809,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 29,
                  "charOffset": 2745,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    for(int i = 0; i < len; i++) {\n        putPortData(port+5, 0x20); //indicate ready to send\n    }\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9682248cc21acd2a2a455a236ae608a64e006280b8610382240c7254eb585980"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x80 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 27,
                  "charOffset": 220,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x80"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 27,
                  "charOffset": 90,
                  "charLength": 4,
                  "snippet": {
                    "text": "    //https://wiki.osdev.org/Serial_Ports\n    outportByte(port + 1, 0x00);    // Disable all interrupts\n    outportByte(port + 3, 0x80);    // Enable DLAB (set baud rate divisor)\n    outportByte(port + 0, 0x03);    // Set divisor to 3 (lo byte) 38400 baud\n    outportByte(port + 1, 0x00);    //                  (hi byte)"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4128e09f4395d27dc76787e8d2afc1d568a31062f5b161ce85090c121f9cabab"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xC7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 509,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xC7"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 27,
                  "charOffset": 346,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 1, 0x00);    //                  (hi byte)\n    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "415aea6d00a0d07843c400eafc6d42832dccc3becbadd0676b0d1cb573351450"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0B is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 596,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0B"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 27,
                  "charOffset": 412,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 3, 0x03);    // 8 bits, no parity, one stop bit\n    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2ac17dbf737e59d3bbeb91eec126576e356dedd49dc473fef6e536f0cfad74d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x1E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "charOffset": 661,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x1E"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 27,
                  "charOffset": 483,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold\n    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ed597847e358b1bedf969f93b0f7dc1d79b056524170290d87b27cf90befc30"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "charOffset": 721,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 27,
                  "charOffset": 570,
                  "charLength": 4,
                  "snippet": {
                    "text": "    outportByte(port + 4, 0x0B);    // IRQs enabled, RTS/DSR set\n    outportByte(port + 4, 0x1E);    // Set in loopback mode\n    outportByte(port + 0, 0xAE);    // Send a byte to test the serial chip\n\n    // Check if serial is faulty"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c04771480a97ad81891d9f1d2756e956db2d2b93309c8333b4ecb856099ad88f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xAE is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "charOffset": 836,
                  "charLength": 4,
                  "snippet": {
                    "text": "0xAE"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 33,
                  "charOffset": 770,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    // Check if serial is faulty\n    if (inportByte(port + 0) != 0xAE) {\n        return 1;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38c61763560ca09e73e0b36b5bb3166995a3703d663af51fbb770535254d5d3b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x0F is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "charOffset": 1031,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x0F"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 27,
                  "charOffset": 869,
                  "charLength": 4,
                  "snippet": {
                    "text": "    // If serial is not faulty set it in normal operation mode\n    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)\n    outportByte(port + 4, 0x0F);\n    serial->port = port;\n    serial->isInitialized = 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8a37d7c532d8c6fb400701b9d12e97e2893dfd505e157ee7d7aa66e5c2cc24f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "charOffset": 1237,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 46,
                  "charOffset": 1111,
                  "charLength": 1,
                  "snippet": {
                    "text": "int updateLineStatusRegister(Serial* serial) {\n    //Read 'Line status register'\n    uint8_t line = inportByte(serial->port + 5);\n    serial->lineRegister = line;\n    return line;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dec8cd45e3f4ede3e500a2dfc374a04e1092fb6c70df3a976d1e3033aefd5f1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "charOffset": 1363,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 32,
                  "charOffset": 1293,
                  "snippet": {
                    "text": "\nint serialAvailable(Serial* serial) {\n    if (!serial->isInitialized) return 0;\n\n    //Read the LSB of the status register to see if data is available"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b674b6fc6452845c6012b44a3c8353e49ded0cde99f5a10c782f335f58c605a8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "charOffset": 1570,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 37,
                  "charOffset": 1496,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nuint8_t serialRead(Serial* serial) {\n    while (!serialAvailable(serial));\n\n    return inportByte(serial->port);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a6e048199067ace5348b1f225e2527dd4eba1e8ebf06f941472d8199931da9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 47,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 47,
                  "charOffset": 1612,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nint isSerialReadyToSend(Serial* serial) {\n    return updateLineStatusRegister(serial) & 0x20;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e16e8c190b2b7963eeb53722083b8ec3f93db78ee08034979e4fe5f87599d30"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/serial/serial.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "charOffset": 1799,
                  "charLength": 1,
                  "snippet": {
                    "text": ";"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 41,
                  "charOffset": 1709,
                  "charLength": 1,
                  "snippet": {
                    "text": "\nvoid serialWrite(Serial* serial, uint8_t byte) {\n    while (!isSerialReadyToSend(serial));\n\n    outportByte(serial->port, byte);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57c51f6093c16b6aa4b57ca8a9aaff21bef0d99d46fbf6000c516dcbe935bf0f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-inconsistent-declaration-parameter-name",
          "ruleIndex": 709,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'setIdtEntry' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/include/idt.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "charOffset": 434,
                  "charLength": 11,
                  "snippet": {
                    "text": "setIdtEntry"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 406,
                  "charLength": 11,
                  "snippet": {
                    "text": "\nvoid initializeIdt();\nvoid setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t ring);\n\n#endif //OS_IDT_H"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5412bec782d5e000df2097fc2465590c988a1a044e94c6ee26374240a5c423bf"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "llvm-include-order",
          "ruleIndex": 585,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "#includes are not sorted properly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#"
                  }
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "#include <pic.h>\n#include <idt.h>\n#include <string.h>"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abdd28cbc6813b4d1e372fcceb46e267bf75cfe7e953671e38dc0a1b5c88d836"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 24,
                  "charOffset": 95,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x10"
                  }
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 24,
                  "charOffset": 54,
                  "charLength": 4,
                  "snippet": {
                    "text": "#include \"isr.h\"\n\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "152e1f572a98a5490fbf1896d1572b9e2b33fe8c85c45350110f525ba7330478"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "charOffset": 112,
                  "charLength": 3,
                  "snippet": {
                    "text": "idt"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 10,
                  "charOffset": 71,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81e9efc18c5aeda71cdd35fb87e71c84c6fc865638cecf1bb06187d7f44efec6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-avoid-non-const-global-variables",
          "ruleIndex": 488,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'idtPtr' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 8,
                  "charOffset": 141,
                  "charLength": 6,
                  "snippet": {
                    "text": "idtPtr"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 8,
                  "charOffset": 72,
                  "charLength": 6,
                  "snippet": {
                    "text": "__attribute__((aligned(0x10)))\nIdtEntry idt[NUM_IDT_ENTRIES];\nIdtPtr idtPtr;\n\nvoid initializeIdt() {"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1b603befb7fedae6513df73c6debe23131a5be1a557e507590a9c00c8fcafc5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-function-size",
          "ruleIndex": 705,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function 'initializeIdt' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "charOffset": 155,
                  "charLength": 13,
                  "snippet": {
                    "text": "initializeIdt"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 6,
                  "charOffset": 134,
                  "charLength": 13,
                  "snippet": {
                    "text": "IdtPtr idtPtr;\n\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58448f1e1d043b4221cf7b0bc74b0f749d83a85a25817e75daba47a9a09f4660"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 13,
                  "charOffset": 185,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x20"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 13,
                  "charOffset": 149,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c6bce0a25a938eaf149a4623c24e260d8bbc0113a72ee78239fc93ed98a4f019"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 19,
                  "charOffset": 191,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x28"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 19,
                  "charOffset": 149,
                  "charLength": 4,
                  "snippet": {
                    "text": "\nvoid initializeIdt() {\n    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f63d26fa3185ab2ff8a372e5daa97c0b382739d8d8b68ba1114602d5eb4f6526"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
          "ruleIndex": 300,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 203,
                  "charLength": 6,
                  "snippet": {
                    "text": "memset"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 173,
                  "charLength": 6,
                  "snippet": {
                    "text": "    initPic(0x20, 0x28);\n\n    memset(idt, 0, sizeof(idt));\n    idtPtr.base = (uint32_t) idt;\n    idtPtr.limit = sizeof(idt) - 1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d9ffeb2016f98fb2f9d9647d49b0005e9a0a1d3f093988e4eb3bec88a274032"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 43,
                  "charOffset": 345,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 43,
                  "charOffset": 266,
                  "charLength": 4,
                  "snippet": {
                    "text": "    idtPtr.limit = sizeof(idt) - 1;\n\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5bb7d649e12905da6225b41023898d8e92f04e8348525a5936f89b80fa204f4b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 351,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 49,
                  "charOffset": 266,
                  "charLength": 4,
                  "snippet": {
                    "text": "    idtPtr.limit = sizeof(idt) - 1;\n\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7e83a46f217814650c94dd4dfc04f56087efdbe2ca9b58c0d8bef52972a7113"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 43,
                  "charOffset": 400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 43,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3786220db9711aa5462fb790635cbbae0693498cb3d29d2c1bef03b13989eb99"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 406,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 49,
                  "charOffset": 302,
                  "charLength": 4,
                  "snippet": {
                    "text": "\n    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bcf5e4affb3aa925eb478988381d379211cb11ad8dbcbdd110e48c4a9efee48"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "charOffset": 455,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 43,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5697b4be7be8ddae4e0870f52a4c5067bcb3b1b03d68ce85e6c6ee4bb81057a6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 461,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 49,
                  "charOffset": 303,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(0, (uint32_t) exception0, 0x08, 0x8E);\n    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccf38353a6440837e3d28cb178bb4d17bec8582404f29fef41b4f5ddb67b12a7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 43,
                  "charOffset": 510,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 43,
                  "charOffset": 358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54f49a04ac5f86ba5d8bb66d92e36e85aa8e935dfc61e180d419e5943fbd047e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 516,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 49,
                  "charOffset": 358,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(1, (uint32_t) exception1, 0x08, 0x8E);\n    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd2d8adce80737c91e69519eea60a2873a900191c57c9dd408950f999bd790be"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 43,
                  "charOffset": 565,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 43,
                  "charOffset": 413,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ff44049a4c98d593257f5c4c838de4ea7d40d0474d19a856fc53bbf9d7d9b28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 571,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 49,
                  "charOffset": 413,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(2, (uint32_t) exception2, 0x08, 0x8E);\n    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73c3b23d35d149472a03cfbd3e5b0017b4d66179e5fd7590660efacd552e934c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 594,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 17,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33853ee568e47a03d7f3da0f14529c0dead215d7685ef7ee5509727477fce686"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 43,
                  "charOffset": 620,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 43,
                  "charOffset": 468,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "067f7690884cb2b936ba37566164a1fb59bc4282e3a1b9e3e471a14d9af7ea9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 626,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 49,
                  "charOffset": 468,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(3, (uint32_t) exception3, 0x08, 0x8E);\n    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c5c7839fe831779e126909ce781e67cbf1841e4c3f9c919e7bca79c734583a0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 649,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 17,
                  "charOffset": 523,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff5cbe6053af5f1587b18d2527926a44e0eed76b4dfe616dcf08010da0bdc6f8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 43,
                  "charOffset": 675,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 43,
                  "charOffset": 523,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4c4fd73c967da8d4182a56ea2fcd8b35833c261d61d810909a5f898265395fc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 681,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 49,
                  "charOffset": 523,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(4, (uint32_t) exception4, 0x08, 0x8E);\n    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85b45a31feb6d3c47d584bce747623c750345eefb6a933f75e4dc2a7e5712fa4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 704,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 17,
                  "charOffset": 578,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4cdb83d722730d4a3f7f2a2016fb041469c14985e30e8a87978201669c87f294"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 43,
                  "charOffset": 730,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 43,
                  "charOffset": 578,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9e7288dc047b00358a362564c92059341dc8d7d312fccf5105d9ffeb8a6ed62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 736,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 49,
                  "charOffset": 578,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(5, (uint32_t) exception5, 0x08, 0x8E);\n    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca1d5be9e6e489bfa3371a12827c9c26b30c9fc989c7c905a49e34a50ab28dc5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 759,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 633,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e763cf2956873fad87966553761aceb71a7fd5cb0ab4ecd5f8c741d2e8ab2955"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 43,
                  "charOffset": 785,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 43,
                  "charOffset": 633,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f48b6109a7f52a549cdd8afff848cadd8682b07d4382d5a87df9208cc701b9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 49,
                  "charOffset": 791,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 49,
                  "charOffset": 633,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(6, (uint32_t) exception6, 0x08, 0x8E);\n    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 814,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 17,
                  "charOffset": 688,
                  "charLength": 1,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "974fe760c0c96dc37606d5f52ff247860f4071da77e44c400c04be5d4e6b5e87"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 43,
                  "charOffset": 840,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 43,
                  "charOffset": 688,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05cd2dd1d18e9087ccbc9196872dbaf49c4bc4c975b1cb80c8e867dad3dd95b6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 49,
                  "charOffset": 846,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 49,
                  "charOffset": 688,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(7, (uint32_t) exception7, 0x08, 0x8E);\n    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccdee725d36b71e15a60c6abbacd62f09771facd79b5eb68520755e30110fcbe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "10 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 869,
                  "charLength": 2,
                  "snippet": {
                    "text": "10"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 743,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b356a3d4b82a22de53de88165f40a29d280e6cf414409b5b62258f66ff4a640"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 45,
                  "charOffset": 897,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 45,
                  "charOffset": 743,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e689405d0397820c0d28ac80fd855008d2b8bdcf80bbe51baf0eca730ee1689"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 51,
                  "charOffset": 903,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 51,
                  "charOffset": 743,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(8, (uint32_t) exception8, 0x08, 0x8E);\n    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c145d14af661616e5ce8d6147c4a032be63baf9b624f8c7090601869596ef39"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "11 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 926,
                  "charLength": 2,
                  "snippet": {
                    "text": "11"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 17,
                  "charOffset": 798,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49d7b988df45c02d66fdba102ab6c65755b75e025dbdef901e7e69a24c104cf4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 45,
                  "charOffset": 954,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 45,
                  "charOffset": 798,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69eeaea29dce16d360e45d17acb64ae8f6acb4dd36a1f347326c4c089559e3ec"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 51,
                  "charOffset": 960,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 51,
                  "charOffset": 798,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(9, (uint32_t) exception9, 0x08, 0x8E);\n    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a85bd4d79a62726efb1a0cfa57e18f00290a340a71ab1305933f5f527ade432f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 983,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 17,
                  "charOffset": 853,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7b48f4e04519d523158cddf0c6cb827b6959da7ac50a5c818a77bc3b0439bb0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 45,
                  "charOffset": 1011,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 45,
                  "charOffset": 853,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2b577a36d3a8eca2bea21b0a0fb22a523000ecaae44d5b0afdc05cd1b594538"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "charOffset": 1017,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 51,
                  "charOffset": 853,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(10, (uint32_t) exception10, 0x08, 0x8E);\n    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b95b4f0884d72d91dcf1a212f0c6e6492e977572535d3136d461b4225c4dce0c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 1040,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 17,
                  "charOffset": 910,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "725f5f6884a81ff1fb39a15d43b1d1f1309643b17234b42b713bcff84b23798a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 45,
                  "charOffset": 1068,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 45,
                  "charOffset": 910,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0f1803bc1db9470b5744ce0df1176167cac9c1039845a8ecd29b47fcb4da06"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 51,
                  "charOffset": 1074,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 51,
                  "charOffset": 910,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(11, (uint32_t) exception11, 0x08, 0x8E);\n    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e198ee994d7c35be4bacd044afd43c7ab7f394a769e820e4471173f6f20acd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "14 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1097,
                  "charLength": 2,
                  "snippet": {
                    "text": "14"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 17,
                  "charOffset": 967,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ad72c9f56ba85ebcf02959e9252e13d7c917ceb1e4ef8eefc2cae5f2eca7862"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 45,
                  "charOffset": 1125,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 45,
                  "charOffset": 967,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed40020a6392b22ca30fa38b5dec1442d64e674272b6741e50053378229f29f1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "charOffset": 1131,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 51,
                  "charOffset": 967,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(12, (uint32_t) exception12, 0x08, 0x8E);\n    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "713b7513a2f6650e3cfb8bdc37ee140d35960894350e18d6b12a4092b1654658"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "15 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1154,
                  "charLength": 2,
                  "snippet": {
                    "text": "15"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 17,
                  "charOffset": 1024,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2f3b0cefd788abf28f91a613085ce2c01a6364246c396b60fb90ffeffb65be0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 45,
                  "charOffset": 1182,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 45,
                  "charOffset": 1024,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c1a6e89bc1344424d011ff8b0978d6c498d88b985299d96de806083602b72b4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 51,
                  "charOffset": 1188,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 51,
                  "charOffset": 1024,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(13, (uint32_t) exception13, 0x08, 0x8E);\n    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1031da46b7d5942315c32e20e9cd7eef63fe62d9374dccbc442271006e2d4987"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1211,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 17,
                  "charOffset": 1081,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "118bbfabca682f6d8e3b1358258b86134796200dd0a0cb9f82f9922798eff4ee"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 45,
                  "charOffset": 1239,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 45,
                  "charOffset": 1081,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b97d7a4236092f9966e8463179a90aa6af2a66a2f0dbbe49693e2d49ee1c1741"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1245,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 51,
                  "charOffset": 1081,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(14, (uint32_t) exception14, 0x08, 0x8E);\n    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17e3f16f707ad29ffac48f47927751801792b4618176bd37d5aacc4b7678b6f4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "17 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1268,
                  "charLength": 2,
                  "snippet": {
                    "text": "17"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 17,
                  "charOffset": 1138,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "169f2b26b5a0eb9255ba747c759aac35671479f20907b7074eb631ca6d4e7500"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 1296,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 45,
                  "charOffset": 1138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "675853a7820de04b7e0ff02b446d6f8b2a5e12e1bd41ac8587056fc6f1ae5a4b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1302,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 51,
                  "charOffset": 1138,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(15, (uint32_t) exception15, 0x08, 0x8E);\n    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73c333dacee1f4a79e14a6f786f4584ae6b0dd533dd65ffabbb5c819cc04871c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "18 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1325,
                  "charLength": 2,
                  "snippet": {
                    "text": "18"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1195,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85de3d3def4067d3b3ad1e8cc00a69ea484333a06a468940cf11d334e89606cb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 45,
                  "charOffset": 1353,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 45,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f59081d48b5c4d5d77c61ba8bc428b5a15b66f9214915f9ac816ead67db811c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1359,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 51,
                  "charOffset": 1195,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(16, (uint32_t) exception16, 0x08, 0x8E);\n    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d25cff40534c7134e6719f72d95675348b29b7eb3ffb42b10ee3ba2c223145"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "19 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1382,
                  "charLength": 2,
                  "snippet": {
                    "text": "19"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 17,
                  "charOffset": 1252,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc51e00e7ecb18ae480e700adf79c1fa9d39c13031e7f5bc8a570a7b5178cb20"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 1410,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 45,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40ad0b8b68e9e5ba8d57b75871b7952ad0a6a295ee40038b36ee086a7c76725c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1416,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 51,
                  "charOffset": 1252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(17, (uint32_t) exception17, 0x08, 0x8E);\n    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0e8d30f0083da69ff0a53116d6dc7ba2e43c8ae617d3fc5fbc33e45352796c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "20 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1439,
                  "charLength": 2,
                  "snippet": {
                    "text": "20"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 17,
                  "charOffset": 1309,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05753bcfcb50b53b632ad1a2819b6ead3b365ac68ccdef3d90c62d4d67176c28"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 45,
                  "charOffset": 1467,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 45,
                  "charOffset": 1309,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab0344fe076379daae3dbf3ddfa001a18e3af1db375b3357b0e1111528a253bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1473,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 51,
                  "charOffset": 1309,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(18, (uint32_t) exception18, 0x08, 0x8E);\n    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "21 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1496,
                  "charLength": 2,
                  "snippet": {
                    "text": "21"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 17,
                  "charOffset": 1366,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cec6f115c7c15901892274a48fbf8cf88d805dd4a809ff8cea969ee5fd1c340"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 45,
                  "charOffset": 1524,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 45,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "558c5856e53796266fedef5c6c65d08e2ee38e33c25aad74e6a4fee229be2dc1"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1530,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 51,
                  "charOffset": 1366,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(19, (uint32_t) exception19, 0x08, 0x8E);\n    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238109d015d441b8ba45b6ddd2ebc7b8d3b42ff2675cfc66dda4f4f4129b733a"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "22 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1553,
                  "charLength": 2,
                  "snippet": {
                    "text": "22"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 17,
                  "charOffset": 1423,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2e7e3f4bf3dd5d74febd3e5511cdfcad8e43f49a9a1c71b0a24ee91ab228c81"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 45,
                  "charOffset": 1581,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 45,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a1026269cbecc2b4febd030ea0e31f975225966add2e11d25c5530ef278085e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1587,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 51,
                  "charOffset": 1423,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(20, (uint32_t) exception20, 0x08, 0x8E);\n    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e0d5b8259a80a32383b531c86d185e876a013efdd7d972721780fa53deeb374"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "23 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1610,
                  "charLength": 2,
                  "snippet": {
                    "text": "23"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 17,
                  "charOffset": 1480,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b86c217382101647bf4a9671c40ac14034494f02b1a42fe99ee72fee14bb683"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 45,
                  "charOffset": 1638,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 45,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3636b4110ec51cc91769948ff6bd02fa7533576bb56e5afb7641e463a9c2d04"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1644,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 51,
                  "charOffset": 1480,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(21, (uint32_t) exception21, 0x08, 0x8E);\n    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb9f574b671be9cb1b3a09d6b23413a98ffd04d746f560cdd7b2133085491812"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "24 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1667,
                  "charLength": 2,
                  "snippet": {
                    "text": "24"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 17,
                  "charOffset": 1537,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eff7d587288dc4498367fe77b7f1f1743bed4c71a358e6e3b00a2a06b89afe68"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 45,
                  "charOffset": 1695,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 45,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "570630d2b093aac98140c7a769f967e6a91de3008ff7ad590e7eee5e8b79d8bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1701,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 51,
                  "charOffset": 1537,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(22, (uint32_t) exception22, 0x08, 0x8E);\n    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1be7594d079553ece2e8f1a832f2fec44f5dc9db4d39751d0a05014ee8620f62"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "25 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1724,
                  "charLength": 2,
                  "snippet": {
                    "text": "25"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1594,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db3e0cc0600963163842c71788adf591b13c318530f8e0f384ca3facd08d4420"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 45,
                  "charOffset": 1752,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 45,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f0b7c6460533f3e1f07d9092da509078e50053894b19a97effd4ddbb391942d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1758,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 51,
                  "charOffset": 1594,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(23, (uint32_t) exception23, 0x08, 0x8E);\n    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d065df231c449150dfd0ae2d29ceb68ce44dcf9f3f4bb93ed4060dc1ae93f3c6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "26 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1781,
                  "charLength": 2,
                  "snippet": {
                    "text": "26"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 17,
                  "charOffset": 1651,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62b3f574e35d9a0bb15fc6fcc6848b02dd2c916771acfc358c285d76fbc51e56"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 45,
                  "charOffset": 1809,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 45,
                  "charOffset": 1651,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f48b6109a7f52a549cdd8afff848cadd8682b07d4382d5a87df9208cc701b9d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1815,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 51,
                  "charOffset": 1651,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(24, (uint32_t) exception24, 0x08, 0x8E);\n    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "333b8e76f033ff6f613b785f0dec8821811f6da2fd0f88da694272fca8ddb15b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "27 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1838,
                  "charLength": 2,
                  "snippet": {
                    "text": "27"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1708,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da79aec924f084f207eb635eae4ae796e8036fecc29d3b378ec514de555f1fc8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 45,
                  "charOffset": 1866,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 45,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3666be18cb8a20b8d59b85da9d63abc7ce2d00452648557fcce3fe0176b35e63"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1872,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 51,
                  "charOffset": 1708,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(25, (uint32_t) exception25, 0x08, 0x8E);\n    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "754dbfb9b20aa4bde4c0078283122d200a35272432ead4f40435eb12f85fd4b3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "28 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1895,
                  "charLength": 2,
                  "snippet": {
                    "text": "28"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1765,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e53b71adc8d415359b9c7d3fa2e8fcac36728cab85762225b7bc05ccee93faf0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 45,
                  "charOffset": 1923,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 45,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a266668974382226389e9a175830867441a4015c85f60f9e5fb708384443ee86"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1929,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 51,
                  "charOffset": 1765,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(26, (uint32_t) exception26, 0x08, 0x8E);\n    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35136b4141054908251da635b77db18b1a996b7a0cd4a23510e428dc284c9884"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "29 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1952,
                  "charLength": 2,
                  "snippet": {
                    "text": "29"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 17,
                  "charOffset": 1822,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "888c620798e6abaf15b0659103a99fb0e9e8a109267d3100f2990ae6db231f22"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 45,
                  "charOffset": 1980,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 45,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e59085f41e3050a2a94d18d6a4f28770948ce7654caa06ac48518abed0f1fcde"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1986,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 51,
                  "charOffset": 1822,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(27, (uint32_t) exception27, 0x08, 0x8E);\n    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb1a7f9e4040a3269ceaeaf8de347aa2027df1f94a916d1be5b8e3c3f757d23"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "30 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 2009,
                  "charLength": 2,
                  "snippet": {
                    "text": "30"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 17,
                  "charOffset": 1879,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95b43d7c68c0219cf99451818700acb8fbd83863d55858bc202b1e130da9977f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 45,
                  "charOffset": 2037,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 45,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c147ce2e16e23b5275cc8f13d3a59a0882d49163cf92ab6cce85c5ef3088646"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 51,
                  "charOffset": 2043,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 51,
                  "charOffset": 1879,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(28, (uint32_t) exception28, 0x08, 0x8E);\n    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46491eb6d71f047310a6306dff66e4b4a21c76c0a9848a0c770b18318ba0ac63"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "31 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2066,
                  "charLength": 2,
                  "snippet": {
                    "text": "31"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 17,
                  "charOffset": 1936,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd45b3088cb166359cdd9716f11a87a828e11b3dc575e14667fbd26981d8595b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 45,
                  "charOffset": 2094,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 45,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cedc66a88a8058920f21b9055f46aa97694dc5837abf7e08116953971bf8c612"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "charOffset": 2100,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 51,
                  "charOffset": 1936,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(29, (uint32_t) exception29, 0x08, 0x8E);\n    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a60c02846044612ad6fc0b90c22c6958d320fff89cdb063d08cbd2acfb8eee79"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "32 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2123,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 17,
                  "charOffset": 1993,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02d8cbad9bbefe49f84c54fe89f44429cb80e74a3649a1d15f05698485d5cd82"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 38,
                  "charOffset": 2144,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 38,
                  "charOffset": 1993,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa201d1497acfadcf6a7294ea93a4a530f4171c76ecceb33c2ddeb1ec51046d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2150,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 44,
                  "charOffset": 1993,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(30, (uint32_t) exception30, 0x08, 0x8E);\n    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9f9796187ef3c85394370919144190231d0e6ae30b5f95563c79914ce6ec5c3"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "33 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2173,
                  "charLength": 2,
                  "snippet": {
                    "text": "33"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 17,
                  "charOffset": 2050,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb90a60554b079b7356a5c98a33dc579f5a74862e1d95295d91866061becf7d8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 2194,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 38,
                  "charOffset": 2050,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d0fa1b1a242e1bba8aa056c6c67c9bc34cbb83b4c2fe6314c77395f3b11a388"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2200,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 44,
                  "charOffset": 2050,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(31, (uint32_t) exception31, 0x08, 0x8E);\n    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c853c1935f1f039f09b82680d5945b98e0c9825e2f642de9b1cc61610a45f223"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "34 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2223,
                  "charLength": 2,
                  "snippet": {
                    "text": "34"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 17,
                  "charOffset": 2107,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf33dd17d8bf7f1330be8133b369e36c1161684c9676930862b14142525894e5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 38,
                  "charOffset": 2244,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 38,
                  "charOffset": 2107,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4963b3cac90a77f2415a2cf09f9ec7a1c8d29a40e194d9202b9f96ac3fa244c5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2250,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 44,
                  "charOffset": 2107,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(32, (uint32_t) irq0, 0x08, 0x8E);\n    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "acc184c461e97918c3a685c7374b0b178dfe93b46c9a817e4c8684a7ea626aac"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "35 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2273,
                  "charLength": 2,
                  "snippet": {
                    "text": "35"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 17,
                  "charOffset": 2157,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0bc2f33ceec1becb45c96acbfa653c324af51348426c40be052fec356019852"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 2294,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 38,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91e674bd48d4e1d6a912af1993d5d19828f306518a3c4d6cc6b8b1de0d5a9048"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2300,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 44,
                  "charOffset": 2157,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(33, (uint32_t) irq1, 0x08, 0x8E);\n    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e493f580fe27eeb09e75a9a21ab071090dbaf66edeed5917821a4b70de5bb3b"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "36 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2323,
                  "charLength": 2,
                  "snippet": {
                    "text": "36"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 17,
                  "charOffset": 2207,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27a74ee8827839ab6ea9bd5bd5b4e0977bddc60a0304756fd8e2b3642da5f712"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 38,
                  "charOffset": 2344,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 38,
                  "charOffset": 2207,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5acc64b6b94bd1b78880aec3862ecdd2541fc9b32cc931a53879f5954848d754"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2350,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 44,
                  "charOffset": 2207,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(34, (uint32_t) irq2, 0x08, 0x8E);\n    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56cc71e84de860e216a2924b629e8c7e472134d60993353f5761010ecc8760c6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "37 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2373,
                  "charLength": 2,
                  "snippet": {
                    "text": "37"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 17,
                  "charOffset": 2257,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "948898b30b972b664fa05b60dae57143b42afb920fe035ea3cf00f6a2e9030dc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 38,
                  "charOffset": 2394,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 38,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0c02211b67555427547dcf17e3a9569237abcd69ff33a27885e53761a7bcb75"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2400,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 44,
                  "charOffset": 2257,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(35, (uint32_t) irq3, 0x08, 0x8E);\n    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9532a47803da554826499e9fc0b54ef96ac21b2b700664587c460fa5e501b01e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "38 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2423,
                  "charLength": 2,
                  "snippet": {
                    "text": "38"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 17,
                  "charOffset": 2307,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e82adb6b8f2f2ffbf1d05fb7c1738650ae22b8ba88d969312d4466e37c7d3a5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 38,
                  "charOffset": 2444,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 38,
                  "charOffset": 2307,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92cbe0d95fb71864c2e3977333b214b7a099c0e2bd9e83e6ca0839ff609aa0e5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2450,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 44,
                  "charOffset": 2307,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(36, (uint32_t) irq4, 0x08, 0x8E);\n    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27b903867983decda50ba1e2c524ac8f2b58f1edbeef15031f56e59fafc82558"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "39 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2473,
                  "charLength": 2,
                  "snippet": {
                    "text": "39"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 17,
                  "charOffset": 2357,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d26d5636c601677980022dc648a39024edbac418aee14dbb8a09a3c3b21f327"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 38,
                  "charOffset": 2494,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 38,
                  "charOffset": 2357,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d38f56454b0579bbba27e10f66b4bdf2b58cfe5d01747f47c2713187166470ae"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2500,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 44,
                  "charOffset": 2357,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(37, (uint32_t) irq5, 0x08, 0x8E);\n    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa32a9fa4cb2c550aaff2d8d1281b71524cb39cabdca5dcbe15ed0124e17c100"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "40 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2523,
                  "charLength": 2,
                  "snippet": {
                    "text": "40"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 2407,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d5640a06554e995f15fc16338a7c4eaa7cdfb4b19e05805d8fb6f2a47d60afa6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 38,
                  "charOffset": 2544,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 38,
                  "charOffset": 2407,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb688da633b205ec112469bf481ea7d162e8c4fd95677aaa64e89a4468102e6c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 44,
                  "charOffset": 2550,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 44,
                  "charOffset": 2407,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(38, (uint32_t) irq6, 0x08, 0x8E);\n    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c556d836bda040c517dda95ec405dc5f6104025179de09a3779bff3a7c7506c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "41 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2573,
                  "charLength": 2,
                  "snippet": {
                    "text": "41"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 17,
                  "charOffset": 2457,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16bb24a8c2b41642af1bcd1022d31a1035e1546bc457272fe836fbd9f78bff2c"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 38,
                  "charOffset": 2594,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 38,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68cc362f9cb4426427c1f618f017b8cd63c81c16afc20091bd97c3eae5250a15"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 44,
                  "charOffset": 2600,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 44,
                  "charOffset": 2457,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(39, (uint32_t) irq7, 0x08, 0x8E);\n    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d1e48ae87568fb27671cb9ce8846d445de4dfdc975f11ff3db2bc3858f24649"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "42 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2623,
                  "charLength": 2,
                  "snippet": {
                    "text": "42"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2507,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5fcd33db2c3566f5e420b97ecc548933a7d345daccb0db85f7d6b3dd2520f3d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 39,
                  "charOffset": 2645,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 39,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83ce591062074a210d3f045fdd513e191e7339966786679fe9c8d55d905be8be"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2651,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 45,
                  "charOffset": 2507,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(40, (uint32_t) irq8, 0x08, 0x8E);\n    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f9cb64081b4f443bd36dfc13cded13f5620ac61e8d2d2b10863435f29494f6"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "43 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2674,
                  "charLength": 2,
                  "snippet": {
                    "text": "43"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 17,
                  "charOffset": 2557,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b30771a0bbac41ae6e34649f59dbbd1709dd090cb04a0dde46cb5b81a71e484"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 39,
                  "charOffset": 2696,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 39,
                  "charOffset": 2557,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c91fff82ee1844c973bc917a5d2ad41262dd08e57c94946efe17c776463c55f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2702,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 45,
                  "charOffset": 2557,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(41, (uint32_t) irq9, 0x08, 0x8E);\n    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49d495c4eb912ece20cd3ce54783f85a54d84b9feafdcbe0e2f426b23fd91944"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "44 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2725,
                  "charLength": 2,
                  "snippet": {
                    "text": "44"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 17,
                  "charOffset": 2607,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c439c89619c6a647dfb499d8388d2254627aaa4721effadeb13c3cae781f603"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 39,
                  "charOffset": 2747,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 39,
                  "charOffset": 2607,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab0344fe076379daae3dbf3ddfa001a18e3af1db375b3357b0e1111528a253bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2753,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 45,
                  "charOffset": 2607,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(42, (uint32_t) irq10, 0x08, 0x8E);\n    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2eda86ebe31d414043baefcabdb9993bf88209ce338b00eb1fca069d534fbcb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "45 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2776,
                  "charLength": 2,
                  "snippet": {
                    "text": "45"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 17,
                  "charOffset": 2658,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f5cf9baab40878a20783fcc74b982cb86ff9bde9b30b638d6e787884d129aaa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 39,
                  "charOffset": 2798,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 39,
                  "charOffset": 2658,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4c828fc7609e3992ee443a82045589fc8ff3be062eb382b7fccdab5ab4610c4"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 45,
                  "charOffset": 2804,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 45,
                  "charOffset": 2658,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(43, (uint32_t) irq11, 0x08, 0x8E);\n    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c266f9190b63853cf8d4b5715ab7b44cfb7f7d3902b7fca9fb27f09821abfbbe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "46 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2827,
                  "charLength": 2,
                  "snippet": {
                    "text": "46"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 17,
                  "charOffset": 2709,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0188474e6607f36c9c5baa02efbdf2ffd9a3c79d0a4ab1a69015220d82cb3451"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 39,
                  "charOffset": 2849,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 39,
                  "charOffset": 2709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b308577a08493eba456b3edc7f6f3bdd6a61073022f0f46750ea5b0df06c825"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 45,
                  "charOffset": 2855,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 45,
                  "charOffset": 2709,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(44, (uint32_t) irq12, 0x08, 0x8E);\n    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a626883f6c48fd564e7d3d2d56a3697d39b725582eb678b2986e8b0c19ad80d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "47 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "charOffset": 2878,
                  "charLength": 2,
                  "snippet": {
                    "text": "47"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2760,
                  "charLength": 2,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f779970c353de59120cfb90e2d98af6b57e012c0bc5ad018da5a68afe491c055"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 39,
                  "charOffset": 2900,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 39,
                  "charOffset": 2760,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f82211f95b4a89c37c54ab2965d372e253ee03ce2b2f8922eb5e3ead021e6e2e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 45,
                  "charOffset": 2906,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 45,
                  "charOffset": 2760,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(45, (uint32_t) irq13, 0x08, 0x8E);\n    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "04038cd8520b289f38a483b8480a9f30a5790d7c466a69efbf452416f34abeb5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "128 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "charOffset": 2929,
                  "charLength": 3,
                  "snippet": {
                    "text": "128"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 2811,
                  "charLength": 3,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca859ec21934b7d2998aefd78c0cb33630b09edf6601d6c77de66c66f807c0c9"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x08 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 47,
                  "charOffset": 2959,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x08"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 47,
                  "charOffset": 2811,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd581d71ae1b343dbd6926380aaa0bddafc3d9ea9476d189485dec7d0ed697e2"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x8E is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 53,
                  "charOffset": 2965,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x8E"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 53,
                  "charOffset": 2811,
                  "charLength": 4,
                  "snippet": {
                    "text": "    setIdtEntry(46, (uint32_t) irq14, 0x08, 0x8E);\n    setIdtEntry(47, (uint32_t) irq15, 0x08, 0x8E);\n    setIdtEntry(128, (uint32_t) exception128, 0x08, 0x8E);\n\n    setIdt((uint32_t) &(idtPtr));"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aeedf66a80672010e3b63c55236fbd68d5a99a4f2fdfe3953a1bfe8b2e7e8d42"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 29,
                  "charOffset": 3199,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 29,
                  "charOffset": 3062,
                  "charLength": 6,
                  "snippet": {
                    "text": "void setIdtEntry(int index, uint32_t base, uint16_t sel, uint8_t flags) {\n    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aff574385be3120b05842bda0781efc3fa2974ef2f8885cdfada4782405bb7f5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "16 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 32,
                  "charOffset": 3238,
                  "charLength": 2,
                  "snippet": {
                    "text": "16"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 32,
                  "charOffset": 3136,
                  "charLength": 2,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d12714b08c533743398ce9b857b7009f1e812ac3df03adbb14e1aafe6611bfd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0xFFFF is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 38,
                  "charOffset": 3244,
                  "charLength": 6,
                  "snippet": {
                    "text": "0xFFFF"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 38,
                  "charOffset": 3136,
                  "charLength": 6,
                  "snippet": {
                    "text": "    IdtEntry* entry = &idt[index];\n    entry->baseLow = base & 0xFFFF;\n    entry->baseHigh = (base >> 16) & 0xFFFF;\n    entry->always0 = 0;\n    entry->sel = sel;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4749fb151d9ab21d5ca9fcb185072dd5a5d1a1d1daee40e5adf9ab8cde320d21"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "0x60 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/idt/idt.c",
                  "index": 1
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 28,
                  "charOffset": 3325,
                  "charLength": 4,
                  "snippet": {
                    "text": "0x60"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 28,
                  "charOffset": 3252,
                  "charLength": 4,
                  "snippet": {
                    "text": "    entry->always0 = 0;\n    entry->sel = sel;\n    entry->flags = flags | 0x60;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6672e8bd0b507d2b6bf3768b35ba6278f3d4b08d278136c3223faf351f13adae"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 95,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 39,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2523a4fb695964680fdd0eef7b9be66c51a6d9e8aac671b49223236994d8ba49"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ebx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "charOffset": 104,
                  "charLength": 3,
                  "snippet": {
                    "text": "ebx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 14,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90829785eb9953e384e811abc1f38b87d57c199829e61eb8858636b679e165bb"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 109,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 19,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89a4763f6cd6b0622af6085ab7e76e2af7dfc3b48220ff777e59eb92ec1102c7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 24,
                  "charOffset": 114,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 24,
                  "charOffset": 39,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getVendorIdString(char* string, int length) {\n    uint32_t ebx, ecx, edx;\n\n    callCpuId(0, &ebx, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9f64c03a035eaeeffa626745fc0be71052f78fc329c480f2a5b294ce312c7a7"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17,
                  "charOffset": 247,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 17,
                  "charOffset": 157,
                  "charLength": 1,
                  "snippet": {
                    "text": "    // write 4 characters at a time, only if the provided length allows.\n\n    if(length < 5) {\n        string[0] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f043a330dc90bfe07bb63f2bd4141ec88c01245c93371aa21bf5b8526912bc54"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "9 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 17,
                  "charOffset": 351,
                  "charLength": 1,
                  "snippet": {
                    "text": "9"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 17,
                  "charOffset": 301,
                  "charLength": 1,
                  "snippet": {
                    "text": "    *((uint32_t*) string) = ebx;\n\n    if(length < 9) {\n        string[4] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80cfbc1c1317d84e75dcf22931ec587f437a8f8b082761d7c411647b82f9fb4f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "13 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "charOffset": 461,
                  "charLength": 2,
                  "snippet": {
                    "text": "13"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 17,
                  "charOffset": 405,
                  "charLength": 2,
                  "snippet": {
                    "text": "    *((uint32_t*) (string + 4)) = edx;\n\n    if(length < 13) {\n        string[8] = '\\0';\n        return;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92f887089b723ce25dcf8e89df256ffa1ddd1f8115368929fb9fa12ebd358564"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "charOffset": 482,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 16,
                  "charOffset": 444,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n    if(length < 13) {\n        string[8] = '\\0';\n        return;\n    }"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12914f5a76631d1a6d08e18a63b199092338d5340028dfa779d4ab2e7c49f6e8"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "8 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 29,
                  "charOffset": 544,
                  "charLength": 1,
                  "snippet": {
                    "text": "8"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "    }\n\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a40b4a9028ec66f898336cc0fc6726547c2f1c43c4fdd56289767f21a89059bc"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "12 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "charOffset": 566,
                  "charLength": 2,
                  "snippet": {
                    "text": "12"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 12,
                  "charOffset": 515,
                  "charLength": 2,
                  "snippet": {
                    "text": "\n    *((uint32_t*) (string + 8)) = ecx;\n    string[12] = '\\0';\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80a06943203d5c9ffd0482a76fb00c52472e0b8e9a1923a77a5bb7559001d53d"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-isolate-declaration",
          "ruleIndex": 710,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "multiple declarations in a single statement reduces readability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "charOffset": 630,
                  "charLength": 8,
                  "snippet": {
                    "text": "uint32_t"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 5,
                  "charOffset": 580,
                  "charLength": 8,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2ade6cbc07cea5b6eb11688b49cad453cca8dc5e0a9721f5a236227a29a5dfe"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'ecx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "charOffset": 639,
                  "charLength": 3,
                  "snippet": {
                    "text": "ecx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 14,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fb3d0a7055ea31944325f253c3a2c6882a3b331f08c2b982cc2ba981473c8b5"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "cppcoreguidelines-init-variables",
          "ruleIndex": 492,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "variable 'edx' is not initialized"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/cpuid/cpuid.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "charOffset": 644,
                  "charLength": 3,
                  "snippet": {
                    "text": "edx"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 19,
                  "charOffset": 580,
                  "charLength": 3,
                  "snippet": {
                    "text": "\nvoid getCpuFeatures(CpuFeatures* features) {\n    uint32_t ecx, edx;\n    uint32_t dummy = 0;\n    callCpuId(1, &dummy, &ecx, &edx);"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc74a75ae735f4f5d89878b330f95c0023dd233f7570f65d821bfbd402c05a74"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "charOffset": 102,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 2,
                  "startColumn": 51,
                  "charOffset": 18,
                  "snippet": {
                    "text": "\nint getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24eb28dfdefb158108833546499805fef3efc10c3343108295c03cb4733583d0"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-else-after-return",
          "ruleIndex": 702,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "charOffset": 117,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  }
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 5,
                  "charOffset": 19,
                  "charLength": 4,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d565aff294ff630a2329db27b87d9dc516a09f9fc008e076574a294276a5edaa"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 33,
                  "charOffset": 145,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 33,
                  "charOffset": 19,
                  "snippet": {
                    "text": "int getAcpiVersion(RSDP* rsdp) {\n    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b9c151fa53ad1bb849f88cb972cc50391c14a3f2c07be681152a1a716f68cfd"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "charOffset": 164,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 9,
                  "charOffset": 52,
                  "snippet": {
                    "text": "    if(rsdp->revision == 0 || rsdp->revision == 1) return 1;\n    else if(rsdp->revision == 2) return 2;\n    else return -1;\n}\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ed36e02c74363c13182d5f4dddfc12635e1a488f87c29fe937a3b06de844810"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "5 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 468,
                  "charLength": 1,
                  "snippet": {
                    "text": "5"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 29,
                  "charOffset": 358,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[3] == ' ' &&\n            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a981ce6d2213aee8743abda02e02174204dba7d435bc236c71651e497c9f407e"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "charOffset": 509,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 399,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[4] == 'P' &&\n            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a1696312402099c2960a31324073d157821d811a149454115c34018c6c69b19"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "readability-magic-numbers",
          "ruleIndex": 711,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 is a magic number; consider replacing it with a named constant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kernel/src/c/acpi/rsdp.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 29,
                  "charOffset": 550,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 29,
                  "charOffset": 440,
                  "charLength": 1,
                  "snippet": {
                    "text": "            rsdp->signature[5] == 'T' &&\n            rsdp->signature[6] == 'R' &&\n            rsdp->signature[7] == ' ';\n\n    int versionCheck = rsdp->revision == 0 || rsdp->revision == 2;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34d2e15769405e4c8ae894e94514efab9eaf29b9e4a67ee2dfbafff0ff36f69f"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1945,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 11,
                  "charOffset": 1876,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n// The following lines pull in the real gmock *.cc files.\n#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d52cca0acac5b1d71a691ee5d9567c6ca3631a5daf4ea29f818bd617b3a1c52a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1983,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1877,
                  "charLength": 3,
                  "snippet": {
                    "text": "// The following lines pull in the real gmock *.cc files.\n#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1ba0e9fcfddb16abb8735b85bac676c83a3ade1d3cc95d1b91affa7848e2b3d"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2022,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1935,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-cardinalities.cc\"\n#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34e1a88c60d66e32029f4605e0cfe349474c2c2ddaa93a33eb0ad090b3c21f68"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2055,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1973,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-internal-utils.cc\"\n#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa27f061e9b529f033acb022e1e6a6af6900522617aa230ef96ddfb61df4f903"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googlemock/src/gmock-all.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2093,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2012,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gmock-matchers.cc\"\n#include \"src/gmock-spec-builders.cc\"\n#include \"src/gmock.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "205afc0c346b1493801e7fafd972185b738490f74324355d19e7c39bdf23ae49"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1914,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 11,
                  "charOffset": 1845,
                  "charLength": 3,
                  "snippet": {
                    "text": "\n// The following lines pull in the real gtest *.cc files.\n#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b50fabf80ecf1210100c862b778e66bb3a5827f666565d990e4e8f32880ef1b1"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1955,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 11,
                  "charOffset": 1846,
                  "charLength": 3,
                  "snippet": {
                    "text": "// The following lines pull in the real gtest *.cc files.\n#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e1ac9dcd73c7d57109a893dfd8c46bb5f1b00681235d5b24c2909246153cc69"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1990,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 11,
                  "charOffset": 1904,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-assertion-result.cc\"\n#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f585dbae6886c044683893146ceb8653ada5b6478cd916dc0d341425a3b8be2"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2023,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 11,
                  "charOffset": 1945,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-death-test.cc\"\n#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "643715303ea34bfdba5eafa4c307a7476c8c3f7a5c47a31387687f33d26dff2f"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2056,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 11,
                  "charOffset": 1980,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-filepath.cc\"\n#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85dfcd06b64899bef343c65af3ff081e6f8188672c0a387a385342c519d640b8"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2085,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 11,
                  "charOffset": 2013,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-matchers.cc\"\n#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dce063bfc6e490e4d1997bd5deaa358f5784c8459289f5344b7585d3140e122a"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 11,
                  "charOffset": 2118,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 11,
                  "charOffset": 2046,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-port.cc\"\n#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\""
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f510651ef39ccea465106a0782d88c1bbecbbd2519458fdc4ea4bbc896d54550"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 11,
                  "charOffset": 2152,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 11,
                  "charOffset": 2075,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-printers.cc\"\n#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84504dffbe1837eb95455141a27941c2b7f2b0249e331620db0eb10411b80e89"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "bugprone-suspicious-include",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "suspicious #include of file with '.cc' extension"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build/_deps/googletest-src/googletest/src/gtest-all.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 11,
                  "charOffset": 2187,
                  "charLength": 3,
                  "snippet": {
                    "text": "src"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 11,
                  "charOffset": 2108,
                  "charLength": 3,
                  "snippet": {
                    "text": "#include \"src/gtest-test-part.cc\"\n#include \"src/gtest-typed-test.cc\"\n#include \"src/gtest.cc\"\n"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f053b39fedde9ce438b82bb2be45db98dcdb4e418066c7311bcaa4adcf6f3a6"
          },
          "properties": {
            "tags": [
              "C++"
            ]
          }
        },
        {
          "ruleId": "readability-braces-around-statements",
          "ruleIndex": 694,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "libc/src/c/string/strlen.c"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "charOffset": 119,
                  "snippet": {}
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 21,
                  "charOffset": 22,
                  "snippet": {
                    "text": "__attribute__((unused)) size_t strlen(const char* str) {\n    size_t len = 0;\n    while (str[len])\n        len++;\n    return len;"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fef9f9ddc0f2b75bed099b8facfddb13964940ae031916f4d3292d6131532421"
          },
          "properties": {
            "tags": [
              "C"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "QDCL/qodana/2024-05-16",
        "guid": "124daf79-e576-4a59-afe4-b4559ee6163a",
        "properties": {
          "jobUrl": "https://github.com/LandryNorris/os/actions/runs/9105037572"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "columnKind": "unicodeCodePoints",
      "properties": {
        "deviceId": "200820300000000-7f15-ffa6-e3ca-1c02b22cc74f"
      }
    }
  ]
}